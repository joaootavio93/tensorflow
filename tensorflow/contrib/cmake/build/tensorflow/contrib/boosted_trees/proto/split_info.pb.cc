// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/contrib/boosted_trees/proto/split_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/contrib/boosted_trees/proto/split_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace boosted_trees {
namespace learner {

namespace {

const ::google::protobuf::Descriptor* SplitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SplitInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto() {
  protobuf_AddDesc_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/contrib/boosted_trees/proto/split_info.proto");
  GOOGLE_CHECK(file != NULL);
  SplitInfo_descriptor_ = file->message_type(0);
  static const int SplitInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitInfo, split_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitInfo, left_child_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitInfo, right_child_),
  };
  SplitInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SplitInfo_descriptor_,
      SplitInfo::internal_default_instance(),
      SplitInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(SplitInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitInfo, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SplitInfo_descriptor_, SplitInfo::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto() {
  SplitInfo_default_instance_.Shutdown();
  delete SplitInfo_reflection_;
}

void protobuf_InitDefaults_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tensorflow::boosted_trees::trees::protobuf_InitDefaults_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto();
  SplitInfo_default_instance_.DefaultConstruct();
  SplitInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto_once_);
void protobuf_InitDefaults_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto_once_,
                 &protobuf_InitDefaults_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto_impl);
}
void protobuf_AddDesc_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n7tensorflow/contrib/boosted_trees/proto"
    "/split_info.proto\022 tensorflow.boosted_tr"
    "ees.learner\0328tensorflow/contrib/boosted_"
    "trees/proto/tree_config.proto\"\276\001\n\tSplitI"
    "nfo\022<\n\nsplit_node\030\001 \001(\0132(.tensorflow.boo"
    "sted_trees.trees.TreeNode\0228\n\nleft_child\030"
    "\002 \001(\0132$.tensorflow.boosted_trees.trees.L"
    "eaf\0229\n\013right_child\030\003 \001(\0132$.tensorflow.bo"
    "osted_trees.trees.LeafB\003\370\001\001b\006proto3", 355);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/contrib/boosted_trees/proto/split_info.proto", &protobuf_RegisterTypes);
  ::tensorflow::boosted_trees::trees::protobuf_AddDesc_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto_once_);
void protobuf_AddDesc_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto_once_,
                 &protobuf_AddDesc_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto() {
    protobuf_AddDesc_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

void SplitInfo::_slow_mutable_split_node() {
  split_node_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::TreeNode >(
      GetArenaNoVirtual());
}
::tensorflow::boosted_trees::trees::TreeNode* SplitInfo::_slow_release_split_node() {
  if (split_node_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::boosted_trees::trees::TreeNode* temp = new ::tensorflow::boosted_trees::trees::TreeNode(*split_node_);
    split_node_ = NULL;
    return temp;
  }
}
::tensorflow::boosted_trees::trees::TreeNode* SplitInfo::unsafe_arena_release_split_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.learner.SplitInfo.split_node)
  
  ::tensorflow::boosted_trees::trees::TreeNode* temp = split_node_;
  split_node_ = NULL;
  return temp;
}
void SplitInfo::_slow_set_allocated_split_node(
    ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::trees::TreeNode** split_node) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*split_node) == NULL) {
      message_arena->Own(*split_node);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*split_node)) {
      ::tensorflow::boosted_trees::trees::TreeNode* new_split_node = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::TreeNode >(
            message_arena);
      new_split_node->CopyFrom(**split_node);
      *split_node = new_split_node;
    }
}
void SplitInfo::unsafe_arena_set_allocated_split_node(
    ::tensorflow::boosted_trees::trees::TreeNode* split_node) {
  if (GetArenaNoVirtual() == NULL) {
    delete split_node_;
  }
  split_node_ = split_node;
  if (split_node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.learner.SplitInfo.split_node)
}
void SplitInfo::_slow_mutable_left_child() {
  left_child_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::Leaf >(
      GetArenaNoVirtual());
}
::tensorflow::boosted_trees::trees::Leaf* SplitInfo::_slow_release_left_child() {
  if (left_child_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::boosted_trees::trees::Leaf* temp = new ::tensorflow::boosted_trees::trees::Leaf(*left_child_);
    left_child_ = NULL;
    return temp;
  }
}
::tensorflow::boosted_trees::trees::Leaf* SplitInfo::unsafe_arena_release_left_child() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.learner.SplitInfo.left_child)
  
  ::tensorflow::boosted_trees::trees::Leaf* temp = left_child_;
  left_child_ = NULL;
  return temp;
}
void SplitInfo::_slow_set_allocated_left_child(
    ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::trees::Leaf** left_child) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*left_child) == NULL) {
      message_arena->Own(*left_child);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*left_child)) {
      ::tensorflow::boosted_trees::trees::Leaf* new_left_child = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::Leaf >(
            message_arena);
      new_left_child->CopyFrom(**left_child);
      *left_child = new_left_child;
    }
}
void SplitInfo::unsafe_arena_set_allocated_left_child(
    ::tensorflow::boosted_trees::trees::Leaf* left_child) {
  if (GetArenaNoVirtual() == NULL) {
    delete left_child_;
  }
  left_child_ = left_child;
  if (left_child) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.learner.SplitInfo.left_child)
}
void SplitInfo::_slow_mutable_right_child() {
  right_child_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::Leaf >(
      GetArenaNoVirtual());
}
::tensorflow::boosted_trees::trees::Leaf* SplitInfo::_slow_release_right_child() {
  if (right_child_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::boosted_trees::trees::Leaf* temp = new ::tensorflow::boosted_trees::trees::Leaf(*right_child_);
    right_child_ = NULL;
    return temp;
  }
}
::tensorflow::boosted_trees::trees::Leaf* SplitInfo::unsafe_arena_release_right_child() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.learner.SplitInfo.right_child)
  
  ::tensorflow::boosted_trees::trees::Leaf* temp = right_child_;
  right_child_ = NULL;
  return temp;
}
void SplitInfo::_slow_set_allocated_right_child(
    ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::trees::Leaf** right_child) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*right_child) == NULL) {
      message_arena->Own(*right_child);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*right_child)) {
      ::tensorflow::boosted_trees::trees::Leaf* new_right_child = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::Leaf >(
            message_arena);
      new_right_child->CopyFrom(**right_child);
      *right_child = new_right_child;
    }
}
void SplitInfo::unsafe_arena_set_allocated_right_child(
    ::tensorflow::boosted_trees::trees::Leaf* right_child) {
  if (GetArenaNoVirtual() == NULL) {
    delete right_child_;
  }
  right_child_ = right_child;
  if (right_child) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.learner.SplitInfo.right_child)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitInfo::kSplitNodeFieldNumber;
const int SplitInfo::kLeftChildFieldNumber;
const int SplitInfo::kRightChildFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitInfo::SplitInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.learner.SplitInfo)
}
SplitInfo::SplitInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.learner.SplitInfo)
}

void SplitInfo::InitAsDefaultInstance() {
  split_node_ = const_cast< ::tensorflow::boosted_trees::trees::TreeNode*>(
      ::tensorflow::boosted_trees::trees::TreeNode::internal_default_instance());
  left_child_ = const_cast< ::tensorflow::boosted_trees::trees::Leaf*>(
      ::tensorflow::boosted_trees::trees::Leaf::internal_default_instance());
  right_child_ = const_cast< ::tensorflow::boosted_trees::trees::Leaf*>(
      ::tensorflow::boosted_trees::trees::Leaf::internal_default_instance());
}

SplitInfo::SplitInfo(const SplitInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.learner.SplitInfo)
}

void SplitInfo::SharedCtor() {
  split_node_ = NULL;
  left_child_ = NULL;
  right_child_ = NULL;
  _cached_size_ = 0;
}

SplitInfo::~SplitInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.learner.SplitInfo)
  SharedDtor();
}

void SplitInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != &SplitInfo_default_instance_.get()) {
    delete split_node_;
    delete left_child_;
    delete right_child_;
  }
}

void SplitInfo::ArenaDtor(void* object) {
  SplitInfo* _this = reinterpret_cast< SplitInfo* >(object);
  (void)_this;
}
void SplitInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SplitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitInfo_descriptor_;
}

const SplitInfo& SplitInfo::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SplitInfo> SplitInfo_default_instance_;

SplitInfo* SplitInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SplitInfo>(arena);
}

void SplitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.learner.SplitInfo)
  if (GetArenaNoVirtual() == NULL && split_node_ != NULL) delete split_node_;
  split_node_ = NULL;
  if (GetArenaNoVirtual() == NULL && left_child_ != NULL) delete left_child_;
  left_child_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_child_ != NULL) delete right_child_;
  right_child_ = NULL;
}

bool SplitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.learner.SplitInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.boosted_trees.trees.TreeNode split_node = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_left_child;
        break;
      }

      // optional .tensorflow.boosted_trees.trees.Leaf left_child = 2;
      case 2: {
        if (tag == 18) {
         parse_left_child:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_child()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_right_child;
        break;
      }

      // optional .tensorflow.boosted_trees.trees.Leaf right_child = 3;
      case 3: {
        if (tag == 26) {
         parse_right_child:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_child()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.learner.SplitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.learner.SplitInfo)
  return false;
#undef DO_
}

void SplitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.learner.SplitInfo)
  // optional .tensorflow.boosted_trees.trees.TreeNode split_node = 1;
  if (this->has_split_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->split_node_, output);
  }

  // optional .tensorflow.boosted_trees.trees.Leaf left_child = 2;
  if (this->has_left_child()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->left_child_, output);
  }

  // optional .tensorflow.boosted_trees.trees.Leaf right_child = 3;
  if (this->has_right_child()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->right_child_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.learner.SplitInfo)
}

::google::protobuf::uint8* SplitInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.learner.SplitInfo)
  // optional .tensorflow.boosted_trees.trees.TreeNode split_node = 1;
  if (this->has_split_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->split_node_, false, target);
  }

  // optional .tensorflow.boosted_trees.trees.Leaf left_child = 2;
  if (this->has_left_child()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->left_child_, false, target);
  }

  // optional .tensorflow.boosted_trees.trees.Leaf right_child = 3;
  if (this->has_right_child()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->right_child_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.learner.SplitInfo)
  return target;
}

size_t SplitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.learner.SplitInfo)
  size_t total_size = 0;

  // optional .tensorflow.boosted_trees.trees.TreeNode split_node = 1;
  if (this->has_split_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->split_node_);
  }

  // optional .tensorflow.boosted_trees.trees.Leaf left_child = 2;
  if (this->has_left_child()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->left_child_);
  }

  // optional .tensorflow.boosted_trees.trees.Leaf right_child = 3;
  if (this->has_right_child()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->right_child_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.learner.SplitInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SplitInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SplitInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.learner.SplitInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.learner.SplitInfo)
    UnsafeMergeFrom(*source);
  }
}

void SplitInfo::MergeFrom(const SplitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.learner.SplitInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SplitInfo::UnsafeMergeFrom(const SplitInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_split_node()) {
    mutable_split_node()->::tensorflow::boosted_trees::trees::TreeNode::MergeFrom(from.split_node());
  }
  if (from.has_left_child()) {
    mutable_left_child()->::tensorflow::boosted_trees::trees::Leaf::MergeFrom(from.left_child());
  }
  if (from.has_right_child()) {
    mutable_right_child()->::tensorflow::boosted_trees::trees::Leaf::MergeFrom(from.right_child());
  }
}

void SplitInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.learner.SplitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitInfo::CopyFrom(const SplitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.learner.SplitInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SplitInfo::IsInitialized() const {

  return true;
}

void SplitInfo::Swap(SplitInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SplitInfo temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SplitInfo::UnsafeArenaSwap(SplitInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SplitInfo::InternalSwap(SplitInfo* other) {
  std::swap(split_node_, other->split_node_);
  std::swap(left_child_, other->left_child_);
  std::swap(right_child_, other->right_child_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SplitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SplitInfo_descriptor_;
  metadata.reflection = SplitInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SplitInfo

// optional .tensorflow.boosted_trees.trees.TreeNode split_node = 1;
bool SplitInfo::has_split_node() const {
  return this != internal_default_instance() && split_node_ != NULL;
}
void SplitInfo::clear_split_node() {
  if (GetArenaNoVirtual() == NULL && split_node_ != NULL) delete split_node_;
  split_node_ = NULL;
}
const ::tensorflow::boosted_trees::trees::TreeNode& SplitInfo::split_node() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.SplitInfo.split_node)
  return split_node_ != NULL ? *split_node_
                         : *::tensorflow::boosted_trees::trees::TreeNode::internal_default_instance();
}
::tensorflow::boosted_trees::trees::TreeNode* SplitInfo::mutable_split_node() {
  
  if (split_node_ == NULL) {
    _slow_mutable_split_node();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.learner.SplitInfo.split_node)
  return split_node_;
}
::tensorflow::boosted_trees::trees::TreeNode* SplitInfo::release_split_node() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.learner.SplitInfo.split_node)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_split_node();
  } else {
    ::tensorflow::boosted_trees::trees::TreeNode* temp = split_node_;
    split_node_ = NULL;
    return temp;
  }
}
 void SplitInfo::set_allocated_split_node(::tensorflow::boosted_trees::trees::TreeNode* split_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete split_node_;
  }
  if (split_node != NULL) {
    _slow_set_allocated_split_node(message_arena, &split_node);
  }
  split_node_ = split_node;
  if (split_node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.learner.SplitInfo.split_node)
}

// optional .tensorflow.boosted_trees.trees.Leaf left_child = 2;
bool SplitInfo::has_left_child() const {
  return this != internal_default_instance() && left_child_ != NULL;
}
void SplitInfo::clear_left_child() {
  if (GetArenaNoVirtual() == NULL && left_child_ != NULL) delete left_child_;
  left_child_ = NULL;
}
const ::tensorflow::boosted_trees::trees::Leaf& SplitInfo::left_child() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.SplitInfo.left_child)
  return left_child_ != NULL ? *left_child_
                         : *::tensorflow::boosted_trees::trees::Leaf::internal_default_instance();
}
::tensorflow::boosted_trees::trees::Leaf* SplitInfo::mutable_left_child() {
  
  if (left_child_ == NULL) {
    _slow_mutable_left_child();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.learner.SplitInfo.left_child)
  return left_child_;
}
::tensorflow::boosted_trees::trees::Leaf* SplitInfo::release_left_child() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.learner.SplitInfo.left_child)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_left_child();
  } else {
    ::tensorflow::boosted_trees::trees::Leaf* temp = left_child_;
    left_child_ = NULL;
    return temp;
  }
}
 void SplitInfo::set_allocated_left_child(::tensorflow::boosted_trees::trees::Leaf* left_child) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete left_child_;
  }
  if (left_child != NULL) {
    _slow_set_allocated_left_child(message_arena, &left_child);
  }
  left_child_ = left_child;
  if (left_child) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.learner.SplitInfo.left_child)
}

// optional .tensorflow.boosted_trees.trees.Leaf right_child = 3;
bool SplitInfo::has_right_child() const {
  return this != internal_default_instance() && right_child_ != NULL;
}
void SplitInfo::clear_right_child() {
  if (GetArenaNoVirtual() == NULL && right_child_ != NULL) delete right_child_;
  right_child_ = NULL;
}
const ::tensorflow::boosted_trees::trees::Leaf& SplitInfo::right_child() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.SplitInfo.right_child)
  return right_child_ != NULL ? *right_child_
                         : *::tensorflow::boosted_trees::trees::Leaf::internal_default_instance();
}
::tensorflow::boosted_trees::trees::Leaf* SplitInfo::mutable_right_child() {
  
  if (right_child_ == NULL) {
    _slow_mutable_right_child();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.learner.SplitInfo.right_child)
  return right_child_;
}
::tensorflow::boosted_trees::trees::Leaf* SplitInfo::release_right_child() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.learner.SplitInfo.right_child)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_right_child();
  } else {
    ::tensorflow::boosted_trees::trees::Leaf* temp = right_child_;
    right_child_ = NULL;
    return temp;
  }
}
 void SplitInfo::set_allocated_right_child(::tensorflow::boosted_trees::trees::Leaf* right_child) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete right_child_;
  }
  if (right_child != NULL) {
    _slow_set_allocated_right_child(message_arena, &right_child);
  }
  right_child_ = right_child;
  if (right_child) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.learner.SplitInfo.right_child)
}

inline const SplitInfo* SplitInfo::internal_default_instance() {
  return &SplitInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace learner
}  // namespace boosted_trees
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
