// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/contrib/boosted_trees/proto/split_info.proto

#ifndef PROTOBUF_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto__INCLUDED
#define PROTOBUF_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/contrib/boosted_trees/proto/tree_config.pb.h"
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace boosted_trees {
namespace learner {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto();
void protobuf_InitDefaults_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto();
void protobuf_AssignDesc_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto();
void protobuf_ShutdownFile_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto();

class SplitInfo;

// ===================================================================

class SplitInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.boosted_trees.learner.SplitInfo) */ {
 public:
  SplitInfo();
  virtual ~SplitInfo();

  SplitInfo(const SplitInfo& from);

  inline SplitInfo& operator=(const SplitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SplitInfo& default_instance();

  static const SplitInfo* internal_default_instance();

  void UnsafeArenaSwap(SplitInfo* other);
  void Swap(SplitInfo* other);

  // implements Message ----------------------------------------------

  inline SplitInfo* New() const { return New(NULL); }

  SplitInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SplitInfo& from);
  void MergeFrom(const SplitInfo& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SplitInfo* other);
  void UnsafeMergeFrom(const SplitInfo& from);
  protected:
  explicit SplitInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tensorflow.boosted_trees.trees.TreeNode split_node = 1;
  bool has_split_node() const;
  void clear_split_node();
  static const int kSplitNodeFieldNumber = 1;
  private:
  void _slow_mutable_split_node();
  void _slow_set_allocated_split_node(
      ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::trees::TreeNode** split_node);
  ::tensorflow::boosted_trees::trees::TreeNode* _slow_release_split_node();
  public:
  const ::tensorflow::boosted_trees::trees::TreeNode& split_node() const;
  ::tensorflow::boosted_trees::trees::TreeNode* mutable_split_node();
  ::tensorflow::boosted_trees::trees::TreeNode* release_split_node();
  void set_allocated_split_node(::tensorflow::boosted_trees::trees::TreeNode* split_node);
  ::tensorflow::boosted_trees::trees::TreeNode* unsafe_arena_release_split_node();
  void unsafe_arena_set_allocated_split_node(
      ::tensorflow::boosted_trees::trees::TreeNode* split_node);

  // optional .tensorflow.boosted_trees.trees.Leaf left_child = 2;
  bool has_left_child() const;
  void clear_left_child();
  static const int kLeftChildFieldNumber = 2;
  private:
  void _slow_mutable_left_child();
  void _slow_set_allocated_left_child(
      ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::trees::Leaf** left_child);
  ::tensorflow::boosted_trees::trees::Leaf* _slow_release_left_child();
  public:
  const ::tensorflow::boosted_trees::trees::Leaf& left_child() const;
  ::tensorflow::boosted_trees::trees::Leaf* mutable_left_child();
  ::tensorflow::boosted_trees::trees::Leaf* release_left_child();
  void set_allocated_left_child(::tensorflow::boosted_trees::trees::Leaf* left_child);
  ::tensorflow::boosted_trees::trees::Leaf* unsafe_arena_release_left_child();
  void unsafe_arena_set_allocated_left_child(
      ::tensorflow::boosted_trees::trees::Leaf* left_child);

  // optional .tensorflow.boosted_trees.trees.Leaf right_child = 3;
  bool has_right_child() const;
  void clear_right_child();
  static const int kRightChildFieldNumber = 3;
  private:
  void _slow_mutable_right_child();
  void _slow_set_allocated_right_child(
      ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::trees::Leaf** right_child);
  ::tensorflow::boosted_trees::trees::Leaf* _slow_release_right_child();
  public:
  const ::tensorflow::boosted_trees::trees::Leaf& right_child() const;
  ::tensorflow::boosted_trees::trees::Leaf* mutable_right_child();
  ::tensorflow::boosted_trees::trees::Leaf* release_right_child();
  void set_allocated_right_child(::tensorflow::boosted_trees::trees::Leaf* right_child);
  ::tensorflow::boosted_trees::trees::Leaf* unsafe_arena_release_right_child();
  void unsafe_arena_set_allocated_right_child(
      ::tensorflow::boosted_trees::trees::Leaf* right_child);

  // @@protoc_insertion_point(class_scope:tensorflow.boosted_trees.learner.SplitInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tensorflow::boosted_trees::trees::TreeNode* split_node_;
  ::tensorflow::boosted_trees::trees::Leaf* left_child_;
  ::tensorflow::boosted_trees::trees::Leaf* right_child_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto_impl();
  friend void  protobuf_AddDesc_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto_impl();
  friend void protobuf_AssignDesc_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SplitInfo> SplitInfo_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SplitInfo

// optional .tensorflow.boosted_trees.trees.TreeNode split_node = 1;
inline bool SplitInfo::has_split_node() const {
  return this != internal_default_instance() && split_node_ != NULL;
}
inline void SplitInfo::clear_split_node() {
  if (GetArenaNoVirtual() == NULL && split_node_ != NULL) delete split_node_;
  split_node_ = NULL;
}
inline const ::tensorflow::boosted_trees::trees::TreeNode& SplitInfo::split_node() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.SplitInfo.split_node)
  return split_node_ != NULL ? *split_node_
                         : *::tensorflow::boosted_trees::trees::TreeNode::internal_default_instance();
}
inline ::tensorflow::boosted_trees::trees::TreeNode* SplitInfo::mutable_split_node() {
  
  if (split_node_ == NULL) {
    _slow_mutable_split_node();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.learner.SplitInfo.split_node)
  return split_node_;
}
inline ::tensorflow::boosted_trees::trees::TreeNode* SplitInfo::release_split_node() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.learner.SplitInfo.split_node)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_split_node();
  } else {
    ::tensorflow::boosted_trees::trees::TreeNode* temp = split_node_;
    split_node_ = NULL;
    return temp;
  }
}
inline  void SplitInfo::set_allocated_split_node(::tensorflow::boosted_trees::trees::TreeNode* split_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete split_node_;
  }
  if (split_node != NULL) {
    _slow_set_allocated_split_node(message_arena, &split_node);
  }
  split_node_ = split_node;
  if (split_node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.learner.SplitInfo.split_node)
}

// optional .tensorflow.boosted_trees.trees.Leaf left_child = 2;
inline bool SplitInfo::has_left_child() const {
  return this != internal_default_instance() && left_child_ != NULL;
}
inline void SplitInfo::clear_left_child() {
  if (GetArenaNoVirtual() == NULL && left_child_ != NULL) delete left_child_;
  left_child_ = NULL;
}
inline const ::tensorflow::boosted_trees::trees::Leaf& SplitInfo::left_child() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.SplitInfo.left_child)
  return left_child_ != NULL ? *left_child_
                         : *::tensorflow::boosted_trees::trees::Leaf::internal_default_instance();
}
inline ::tensorflow::boosted_trees::trees::Leaf* SplitInfo::mutable_left_child() {
  
  if (left_child_ == NULL) {
    _slow_mutable_left_child();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.learner.SplitInfo.left_child)
  return left_child_;
}
inline ::tensorflow::boosted_trees::trees::Leaf* SplitInfo::release_left_child() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.learner.SplitInfo.left_child)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_left_child();
  } else {
    ::tensorflow::boosted_trees::trees::Leaf* temp = left_child_;
    left_child_ = NULL;
    return temp;
  }
}
inline  void SplitInfo::set_allocated_left_child(::tensorflow::boosted_trees::trees::Leaf* left_child) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete left_child_;
  }
  if (left_child != NULL) {
    _slow_set_allocated_left_child(message_arena, &left_child);
  }
  left_child_ = left_child;
  if (left_child) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.learner.SplitInfo.left_child)
}

// optional .tensorflow.boosted_trees.trees.Leaf right_child = 3;
inline bool SplitInfo::has_right_child() const {
  return this != internal_default_instance() && right_child_ != NULL;
}
inline void SplitInfo::clear_right_child() {
  if (GetArenaNoVirtual() == NULL && right_child_ != NULL) delete right_child_;
  right_child_ = NULL;
}
inline const ::tensorflow::boosted_trees::trees::Leaf& SplitInfo::right_child() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.SplitInfo.right_child)
  return right_child_ != NULL ? *right_child_
                         : *::tensorflow::boosted_trees::trees::Leaf::internal_default_instance();
}
inline ::tensorflow::boosted_trees::trees::Leaf* SplitInfo::mutable_right_child() {
  
  if (right_child_ == NULL) {
    _slow_mutable_right_child();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.learner.SplitInfo.right_child)
  return right_child_;
}
inline ::tensorflow::boosted_trees::trees::Leaf* SplitInfo::release_right_child() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.learner.SplitInfo.right_child)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_right_child();
  } else {
    ::tensorflow::boosted_trees::trees::Leaf* temp = right_child_;
    right_child_ = NULL;
    return temp;
  }
}
inline  void SplitInfo::set_allocated_right_child(::tensorflow::boosted_trees::trees::Leaf* right_child) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete right_child_;
  }
  if (right_child != NULL) {
    _slow_set_allocated_right_child(message_arena, &right_child);
  }
  right_child_ = right_child;
  if (right_child) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.learner.SplitInfo.right_child)
}

inline const SplitInfo* SplitInfo::internal_default_instance() {
  return &SplitInfo_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace learner
}  // namespace boosted_trees
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto__INCLUDED
