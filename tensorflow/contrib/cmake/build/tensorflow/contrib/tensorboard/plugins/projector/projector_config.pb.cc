// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/contrib/tensorboard/plugins/projector/projector_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/contrib/tensorboard/plugins/projector/projector_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* SpriteMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpriteMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmbeddingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmbeddingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProjectorConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProjectorConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto() {
  protobuf_AddDesc_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/contrib/tensorboard/plugins/projector/projector_config.proto");
  GOOGLE_CHECK(file != NULL);
  SpriteMetadata_descriptor_ = file->message_type(0);
  static const int SpriteMetadata_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteMetadata, image_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteMetadata, single_image_dim_),
  };
  SpriteMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpriteMetadata_descriptor_,
      SpriteMetadata::internal_default_instance(),
      SpriteMetadata_offsets_,
      -1,
      -1,
      -1,
      sizeof(SpriteMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteMetadata, _internal_metadata_));
  EmbeddingInfo_descriptor_ = file->message_type(1);
  static const int EmbeddingInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbeddingInfo, tensor_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbeddingInfo, metadata_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbeddingInfo, bookmarks_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbeddingInfo, tensor_shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbeddingInfo, sprite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbeddingInfo, tensor_path_),
  };
  EmbeddingInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EmbeddingInfo_descriptor_,
      EmbeddingInfo::internal_default_instance(),
      EmbeddingInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(EmbeddingInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbeddingInfo, _internal_metadata_));
  ProjectorConfig_descriptor_ = file->message_type(2);
  static const int ProjectorConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectorConfig, model_checkpoint_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectorConfig, embeddings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectorConfig, model_checkpoint_dir_),
  };
  ProjectorConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProjectorConfig_descriptor_,
      ProjectorConfig::internal_default_instance(),
      ProjectorConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProjectorConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectorConfig, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpriteMetadata_descriptor_, SpriteMetadata::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EmbeddingInfo_descriptor_, EmbeddingInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProjectorConfig_descriptor_, ProjectorConfig::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto() {
  SpriteMetadata_default_instance_.Shutdown();
  delete SpriteMetadata_reflection_;
  EmbeddingInfo_default_instance_.Shutdown();
  delete EmbeddingInfo_reflection_;
  ProjectorConfig_default_instance_.Shutdown();
  delete ProjectorConfig_reflection_;
}

void protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  SpriteMetadata_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  EmbeddingInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ProjectorConfig_default_instance_.DefaultConstruct();
  SpriteMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
  EmbeddingInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  ProjectorConfig_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto_once_);
void protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto_once_,
                 &protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto_impl);
}
void protobuf_AddDesc_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\nGtensorflow/contrib/tensorboard/plugins"
    "/projector/projector_config.proto\022\ntenso"
    "rflow\">\n\016SpriteMetadata\022\022\n\nimage_path\030\001 "
    "\001(\t\022\030\n\020single_image_dim\030\002 \003(\r\"\252\001\n\rEmbedd"
    "ingInfo\022\023\n\013tensor_name\030\001 \001(\t\022\025\n\rmetadata"
    "_path\030\002 \001(\t\022\026\n\016bookmarks_path\030\003 \001(\t\022\024\n\014t"
    "ensor_shape\030\004 \003(\r\022*\n\006sprite\030\005 \001(\0132\032.tens"
    "orflow.SpriteMetadata\022\023\n\013tensor_path\030\006 \001"
    "(\t\"}\n\017ProjectorConfig\022\035\n\025model_checkpoin"
    "t_path\030\001 \001(\t\022-\n\nembeddings\030\002 \003(\0132\031.tenso"
    "rflow.EmbeddingInfo\022\034\n\024model_checkpoint_"
    "dir\030\003 \001(\tb\006proto3", 457);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/contrib/tensorboard/plugins/projector/projector_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto_once_);
void protobuf_AddDesc_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto_once_,
                 &protobuf_AddDesc_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto() {
    protobuf_AddDesc_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpriteMetadata::kImagePathFieldNumber;
const int SpriteMetadata::kSingleImageDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpriteMetadata::SpriteMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.SpriteMetadata)
}

void SpriteMetadata::InitAsDefaultInstance() {
}

SpriteMetadata::SpriteMetadata(const SpriteMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.SpriteMetadata)
}

void SpriteMetadata::SharedCtor() {
  image_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SpriteMetadata::~SpriteMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.SpriteMetadata)
  SharedDtor();
}

void SpriteMetadata::SharedDtor() {
  image_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpriteMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpriteMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpriteMetadata_descriptor_;
}

const SpriteMetadata& SpriteMetadata::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SpriteMetadata> SpriteMetadata_default_instance_;

SpriteMetadata* SpriteMetadata::New(::google::protobuf::Arena* arena) const {
  SpriteMetadata* n = new SpriteMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpriteMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SpriteMetadata)
  image_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  single_image_dim_.Clear();
}

bool SpriteMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.SpriteMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string image_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_path().data(), this->image_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.SpriteMetadata.image_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_single_image_dim;
        break;
      }

      // repeated uint32 single_image_dim = 2;
      case 2: {
        if (tag == 18) {
         parse_single_image_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_single_image_dim())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_single_image_dim())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.SpriteMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.SpriteMetadata)
  return false;
#undef DO_
}

void SpriteMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.SpriteMetadata)
  // optional string image_path = 1;
  if (this->image_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_path().data(), this->image_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SpriteMetadata.image_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->image_path(), output);
  }

  // repeated uint32 single_image_dim = 2;
  if (this->single_image_dim_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_single_image_dim_cached_byte_size_);
  }
  for (int i = 0; i < this->single_image_dim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->single_image_dim(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.SpriteMetadata)
}

::google::protobuf::uint8* SpriteMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SpriteMetadata)
  // optional string image_path = 1;
  if (this->image_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_path().data(), this->image_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SpriteMetadata.image_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image_path(), target);
  }

  // repeated uint32 single_image_dim = 2;
  if (this->single_image_dim_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _single_image_dim_cached_byte_size_, target);
  }
  for (int i = 0; i < this->single_image_dim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->single_image_dim(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SpriteMetadata)
  return target;
}

size_t SpriteMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SpriteMetadata)
  size_t total_size = 0;

  // optional string image_path = 1;
  if (this->image_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_path());
  }

  // repeated uint32 single_image_dim = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->single_image_dim_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->single_image_dim(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _single_image_dim_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpriteMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SpriteMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SpriteMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpriteMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SpriteMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SpriteMetadata)
    UnsafeMergeFrom(*source);
  }
}

void SpriteMetadata::MergeFrom(const SpriteMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SpriteMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SpriteMetadata::UnsafeMergeFrom(const SpriteMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  single_image_dim_.UnsafeMergeFrom(from.single_image_dim_);
  if (from.image_path().size() > 0) {

    image_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_path_);
  }
}

void SpriteMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SpriteMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpriteMetadata::CopyFrom(const SpriteMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SpriteMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SpriteMetadata::IsInitialized() const {

  return true;
}

void SpriteMetadata::Swap(SpriteMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpriteMetadata::InternalSwap(SpriteMetadata* other) {
  image_path_.Swap(&other->image_path_);
  single_image_dim_.UnsafeArenaSwap(&other->single_image_dim_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpriteMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpriteMetadata_descriptor_;
  metadata.reflection = SpriteMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpriteMetadata

// optional string image_path = 1;
void SpriteMetadata::clear_image_path() {
  image_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SpriteMetadata::image_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.SpriteMetadata.image_path)
  return image_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpriteMetadata::set_image_path(const ::std::string& value) {
  
  image_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.SpriteMetadata.image_path)
}
void SpriteMetadata::set_image_path(const char* value) {
  
  image_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.SpriteMetadata.image_path)
}
void SpriteMetadata::set_image_path(const char* value, size_t size) {
  
  image_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.SpriteMetadata.image_path)
}
::std::string* SpriteMetadata::mutable_image_path() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.SpriteMetadata.image_path)
  return image_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SpriteMetadata::release_image_path() {
  // @@protoc_insertion_point(field_release:tensorflow.SpriteMetadata.image_path)
  
  return image_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpriteMetadata::set_allocated_image_path(::std::string* image_path) {
  if (image_path != NULL) {
    
  } else {
    
  }
  image_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_path);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SpriteMetadata.image_path)
}

// repeated uint32 single_image_dim = 2;
int SpriteMetadata::single_image_dim_size() const {
  return single_image_dim_.size();
}
void SpriteMetadata::clear_single_image_dim() {
  single_image_dim_.Clear();
}
::google::protobuf::uint32 SpriteMetadata::single_image_dim(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.SpriteMetadata.single_image_dim)
  return single_image_dim_.Get(index);
}
void SpriteMetadata::set_single_image_dim(int index, ::google::protobuf::uint32 value) {
  single_image_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.SpriteMetadata.single_image_dim)
}
void SpriteMetadata::add_single_image_dim(::google::protobuf::uint32 value) {
  single_image_dim_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.SpriteMetadata.single_image_dim)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SpriteMetadata::single_image_dim() const {
  // @@protoc_insertion_point(field_list:tensorflow.SpriteMetadata.single_image_dim)
  return single_image_dim_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SpriteMetadata::mutable_single_image_dim() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.SpriteMetadata.single_image_dim)
  return &single_image_dim_;
}

inline const SpriteMetadata* SpriteMetadata::internal_default_instance() {
  return &SpriteMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmbeddingInfo::kTensorNameFieldNumber;
const int EmbeddingInfo::kMetadataPathFieldNumber;
const int EmbeddingInfo::kBookmarksPathFieldNumber;
const int EmbeddingInfo::kTensorShapeFieldNumber;
const int EmbeddingInfo::kSpriteFieldNumber;
const int EmbeddingInfo::kTensorPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmbeddingInfo::EmbeddingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.EmbeddingInfo)
}

void EmbeddingInfo::InitAsDefaultInstance() {
  sprite_ = const_cast< ::tensorflow::SpriteMetadata*>(
      ::tensorflow::SpriteMetadata::internal_default_instance());
}

EmbeddingInfo::EmbeddingInfo(const EmbeddingInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.EmbeddingInfo)
}

void EmbeddingInfo::SharedCtor() {
  tensor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bookmarks_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tensor_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sprite_ = NULL;
  _cached_size_ = 0;
}

EmbeddingInfo::~EmbeddingInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.EmbeddingInfo)
  SharedDtor();
}

void EmbeddingInfo::SharedDtor() {
  tensor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bookmarks_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tensor_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &EmbeddingInfo_default_instance_.get()) {
    delete sprite_;
  }
}

void EmbeddingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmbeddingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmbeddingInfo_descriptor_;
}

const EmbeddingInfo& EmbeddingInfo::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EmbeddingInfo> EmbeddingInfo_default_instance_;

EmbeddingInfo* EmbeddingInfo::New(::google::protobuf::Arena* arena) const {
  EmbeddingInfo* n = new EmbeddingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmbeddingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.EmbeddingInfo)
  tensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bookmarks_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sprite_ != NULL) delete sprite_;
  sprite_ = NULL;
  tensor_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tensor_shape_.Clear();
}

bool EmbeddingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.EmbeddingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tensor_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tensor_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tensor_name().data(), this->tensor_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.EmbeddingInfo.tensor_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_metadata_path;
        break;
      }

      // optional string metadata_path = 2;
      case 2: {
        if (tag == 18) {
         parse_metadata_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata_path().data(), this->metadata_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.EmbeddingInfo.metadata_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bookmarks_path;
        break;
      }

      // optional string bookmarks_path = 3;
      case 3: {
        if (tag == 26) {
         parse_bookmarks_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bookmarks_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bookmarks_path().data(), this->bookmarks_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.EmbeddingInfo.bookmarks_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tensor_shape;
        break;
      }

      // repeated uint32 tensor_shape = 4;
      case 4: {
        if (tag == 34) {
         parse_tensor_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tensor_shape())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_tensor_shape())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sprite;
        break;
      }

      // optional .tensorflow.SpriteMetadata sprite = 5;
      case 5: {
        if (tag == 42) {
         parse_sprite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sprite()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_tensor_path;
        break;
      }

      // optional string tensor_path = 6;
      case 6: {
        if (tag == 50) {
         parse_tensor_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tensor_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tensor_path().data(), this->tensor_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.EmbeddingInfo.tensor_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.EmbeddingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.EmbeddingInfo)
  return false;
#undef DO_
}

void EmbeddingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.EmbeddingInfo)
  // optional string tensor_name = 1;
  if (this->tensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), this->tensor_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.EmbeddingInfo.tensor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tensor_name(), output);
  }

  // optional string metadata_path = 2;
  if (this->metadata_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata_path().data(), this->metadata_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.EmbeddingInfo.metadata_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->metadata_path(), output);
  }

  // optional string bookmarks_path = 3;
  if (this->bookmarks_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bookmarks_path().data(), this->bookmarks_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.EmbeddingInfo.bookmarks_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bookmarks_path(), output);
  }

  // repeated uint32 tensor_shape = 4;
  if (this->tensor_shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tensor_shape_cached_byte_size_);
  }
  for (int i = 0; i < this->tensor_shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->tensor_shape(i), output);
  }

  // optional .tensorflow.SpriteMetadata sprite = 5;
  if (this->has_sprite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->sprite_, output);
  }

  // optional string tensor_path = 6;
  if (this->tensor_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_path().data(), this->tensor_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.EmbeddingInfo.tensor_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->tensor_path(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.EmbeddingInfo)
}

::google::protobuf::uint8* EmbeddingInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.EmbeddingInfo)
  // optional string tensor_name = 1;
  if (this->tensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), this->tensor_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.EmbeddingInfo.tensor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tensor_name(), target);
  }

  // optional string metadata_path = 2;
  if (this->metadata_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata_path().data(), this->metadata_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.EmbeddingInfo.metadata_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->metadata_path(), target);
  }

  // optional string bookmarks_path = 3;
  if (this->bookmarks_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bookmarks_path().data(), this->bookmarks_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.EmbeddingInfo.bookmarks_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bookmarks_path(), target);
  }

  // repeated uint32 tensor_shape = 4;
  if (this->tensor_shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _tensor_shape_cached_byte_size_, target);
  }
  for (int i = 0; i < this->tensor_shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->tensor_shape(i), target);
  }

  // optional .tensorflow.SpriteMetadata sprite = 5;
  if (this->has_sprite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->sprite_, false, target);
  }

  // optional string tensor_path = 6;
  if (this->tensor_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_path().data(), this->tensor_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.EmbeddingInfo.tensor_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->tensor_path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.EmbeddingInfo)
  return target;
}

size_t EmbeddingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.EmbeddingInfo)
  size_t total_size = 0;

  // optional string tensor_name = 1;
  if (this->tensor_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tensor_name());
  }

  // optional string metadata_path = 2;
  if (this->metadata_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata_path());
  }

  // optional string bookmarks_path = 3;
  if (this->bookmarks_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bookmarks_path());
  }

  // optional .tensorflow.SpriteMetadata sprite = 5;
  if (this->has_sprite()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sprite_);
  }

  // optional string tensor_path = 6;
  if (this->tensor_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tensor_path());
  }

  // repeated uint32 tensor_shape = 4;
  {
    size_t data_size = 0;
    unsigned int count = this->tensor_shape_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tensor_shape(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tensor_shape_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmbeddingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.EmbeddingInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EmbeddingInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmbeddingInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.EmbeddingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.EmbeddingInfo)
    UnsafeMergeFrom(*source);
  }
}

void EmbeddingInfo::MergeFrom(const EmbeddingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.EmbeddingInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EmbeddingInfo::UnsafeMergeFrom(const EmbeddingInfo& from) {
  GOOGLE_DCHECK(&from != this);
  tensor_shape_.UnsafeMergeFrom(from.tensor_shape_);
  if (from.tensor_name().size() > 0) {

    tensor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
  if (from.metadata_path().size() > 0) {

    metadata_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_path_);
  }
  if (from.bookmarks_path().size() > 0) {

    bookmarks_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bookmarks_path_);
  }
  if (from.has_sprite()) {
    mutable_sprite()->::tensorflow::SpriteMetadata::MergeFrom(from.sprite());
  }
  if (from.tensor_path().size() > 0) {

    tensor_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tensor_path_);
  }
}

void EmbeddingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.EmbeddingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmbeddingInfo::CopyFrom(const EmbeddingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.EmbeddingInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EmbeddingInfo::IsInitialized() const {

  return true;
}

void EmbeddingInfo::Swap(EmbeddingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmbeddingInfo::InternalSwap(EmbeddingInfo* other) {
  tensor_name_.Swap(&other->tensor_name_);
  metadata_path_.Swap(&other->metadata_path_);
  bookmarks_path_.Swap(&other->bookmarks_path_);
  tensor_shape_.UnsafeArenaSwap(&other->tensor_shape_);
  std::swap(sprite_, other->sprite_);
  tensor_path_.Swap(&other->tensor_path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmbeddingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmbeddingInfo_descriptor_;
  metadata.reflection = EmbeddingInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmbeddingInfo

// optional string tensor_name = 1;
void EmbeddingInfo::clear_tensor_name() {
  tensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EmbeddingInfo::tensor_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.EmbeddingInfo.tensor_name)
  return tensor_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmbeddingInfo::set_tensor_name(const ::std::string& value) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.EmbeddingInfo.tensor_name)
}
void EmbeddingInfo::set_tensor_name(const char* value) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.EmbeddingInfo.tensor_name)
}
void EmbeddingInfo::set_tensor_name(const char* value, size_t size) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.EmbeddingInfo.tensor_name)
}
::std::string* EmbeddingInfo::mutable_tensor_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.EmbeddingInfo.tensor_name)
  return tensor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmbeddingInfo::release_tensor_name() {
  // @@protoc_insertion_point(field_release:tensorflow.EmbeddingInfo.tensor_name)
  
  return tensor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmbeddingInfo::set_allocated_tensor_name(::std::string* tensor_name) {
  if (tensor_name != NULL) {
    
  } else {
    
  }
  tensor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tensor_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.EmbeddingInfo.tensor_name)
}

// optional string metadata_path = 2;
void EmbeddingInfo::clear_metadata_path() {
  metadata_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EmbeddingInfo::metadata_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.EmbeddingInfo.metadata_path)
  return metadata_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmbeddingInfo::set_metadata_path(const ::std::string& value) {
  
  metadata_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.EmbeddingInfo.metadata_path)
}
void EmbeddingInfo::set_metadata_path(const char* value) {
  
  metadata_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.EmbeddingInfo.metadata_path)
}
void EmbeddingInfo::set_metadata_path(const char* value, size_t size) {
  
  metadata_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.EmbeddingInfo.metadata_path)
}
::std::string* EmbeddingInfo::mutable_metadata_path() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.EmbeddingInfo.metadata_path)
  return metadata_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmbeddingInfo::release_metadata_path() {
  // @@protoc_insertion_point(field_release:tensorflow.EmbeddingInfo.metadata_path)
  
  return metadata_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmbeddingInfo::set_allocated_metadata_path(::std::string* metadata_path) {
  if (metadata_path != NULL) {
    
  } else {
    
  }
  metadata_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata_path);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.EmbeddingInfo.metadata_path)
}

// optional string bookmarks_path = 3;
void EmbeddingInfo::clear_bookmarks_path() {
  bookmarks_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EmbeddingInfo::bookmarks_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.EmbeddingInfo.bookmarks_path)
  return bookmarks_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmbeddingInfo::set_bookmarks_path(const ::std::string& value) {
  
  bookmarks_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.EmbeddingInfo.bookmarks_path)
}
void EmbeddingInfo::set_bookmarks_path(const char* value) {
  
  bookmarks_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.EmbeddingInfo.bookmarks_path)
}
void EmbeddingInfo::set_bookmarks_path(const char* value, size_t size) {
  
  bookmarks_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.EmbeddingInfo.bookmarks_path)
}
::std::string* EmbeddingInfo::mutable_bookmarks_path() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.EmbeddingInfo.bookmarks_path)
  return bookmarks_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmbeddingInfo::release_bookmarks_path() {
  // @@protoc_insertion_point(field_release:tensorflow.EmbeddingInfo.bookmarks_path)
  
  return bookmarks_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmbeddingInfo::set_allocated_bookmarks_path(::std::string* bookmarks_path) {
  if (bookmarks_path != NULL) {
    
  } else {
    
  }
  bookmarks_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bookmarks_path);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.EmbeddingInfo.bookmarks_path)
}

// repeated uint32 tensor_shape = 4;
int EmbeddingInfo::tensor_shape_size() const {
  return tensor_shape_.size();
}
void EmbeddingInfo::clear_tensor_shape() {
  tensor_shape_.Clear();
}
::google::protobuf::uint32 EmbeddingInfo::tensor_shape(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.EmbeddingInfo.tensor_shape)
  return tensor_shape_.Get(index);
}
void EmbeddingInfo::set_tensor_shape(int index, ::google::protobuf::uint32 value) {
  tensor_shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.EmbeddingInfo.tensor_shape)
}
void EmbeddingInfo::add_tensor_shape(::google::protobuf::uint32 value) {
  tensor_shape_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.EmbeddingInfo.tensor_shape)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
EmbeddingInfo::tensor_shape() const {
  // @@protoc_insertion_point(field_list:tensorflow.EmbeddingInfo.tensor_shape)
  return tensor_shape_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
EmbeddingInfo::mutable_tensor_shape() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.EmbeddingInfo.tensor_shape)
  return &tensor_shape_;
}

// optional .tensorflow.SpriteMetadata sprite = 5;
bool EmbeddingInfo::has_sprite() const {
  return this != internal_default_instance() && sprite_ != NULL;
}
void EmbeddingInfo::clear_sprite() {
  if (GetArenaNoVirtual() == NULL && sprite_ != NULL) delete sprite_;
  sprite_ = NULL;
}
const ::tensorflow::SpriteMetadata& EmbeddingInfo::sprite() const {
  // @@protoc_insertion_point(field_get:tensorflow.EmbeddingInfo.sprite)
  return sprite_ != NULL ? *sprite_
                         : *::tensorflow::SpriteMetadata::internal_default_instance();
}
::tensorflow::SpriteMetadata* EmbeddingInfo::mutable_sprite() {
  
  if (sprite_ == NULL) {
    sprite_ = new ::tensorflow::SpriteMetadata;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.EmbeddingInfo.sprite)
  return sprite_;
}
::tensorflow::SpriteMetadata* EmbeddingInfo::release_sprite() {
  // @@protoc_insertion_point(field_release:tensorflow.EmbeddingInfo.sprite)
  
  ::tensorflow::SpriteMetadata* temp = sprite_;
  sprite_ = NULL;
  return temp;
}
void EmbeddingInfo::set_allocated_sprite(::tensorflow::SpriteMetadata* sprite) {
  delete sprite_;
  sprite_ = sprite;
  if (sprite) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.EmbeddingInfo.sprite)
}

// optional string tensor_path = 6;
void EmbeddingInfo::clear_tensor_path() {
  tensor_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EmbeddingInfo::tensor_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.EmbeddingInfo.tensor_path)
  return tensor_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmbeddingInfo::set_tensor_path(const ::std::string& value) {
  
  tensor_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.EmbeddingInfo.tensor_path)
}
void EmbeddingInfo::set_tensor_path(const char* value) {
  
  tensor_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.EmbeddingInfo.tensor_path)
}
void EmbeddingInfo::set_tensor_path(const char* value, size_t size) {
  
  tensor_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.EmbeddingInfo.tensor_path)
}
::std::string* EmbeddingInfo::mutable_tensor_path() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.EmbeddingInfo.tensor_path)
  return tensor_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmbeddingInfo::release_tensor_path() {
  // @@protoc_insertion_point(field_release:tensorflow.EmbeddingInfo.tensor_path)
  
  return tensor_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmbeddingInfo::set_allocated_tensor_path(::std::string* tensor_path) {
  if (tensor_path != NULL) {
    
  } else {
    
  }
  tensor_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tensor_path);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.EmbeddingInfo.tensor_path)
}

inline const EmbeddingInfo* EmbeddingInfo::internal_default_instance() {
  return &EmbeddingInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjectorConfig::kModelCheckpointPathFieldNumber;
const int ProjectorConfig::kEmbeddingsFieldNumber;
const int ProjectorConfig::kModelCheckpointDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProjectorConfig::ProjectorConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ProjectorConfig)
}

void ProjectorConfig::InitAsDefaultInstance() {
}

ProjectorConfig::ProjectorConfig(const ProjectorConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ProjectorConfig)
}

void ProjectorConfig::SharedCtor() {
  model_checkpoint_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_checkpoint_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ProjectorConfig::~ProjectorConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.ProjectorConfig)
  SharedDtor();
}

void ProjectorConfig::SharedDtor() {
  model_checkpoint_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_checkpoint_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProjectorConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjectorConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProjectorConfig_descriptor_;
}

const ProjectorConfig& ProjectorConfig::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ProjectorConfig> ProjectorConfig_default_instance_;

ProjectorConfig* ProjectorConfig::New(::google::protobuf::Arena* arena) const {
  ProjectorConfig* n = new ProjectorConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProjectorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ProjectorConfig)
  model_checkpoint_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_checkpoint_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  embeddings_.Clear();
}

bool ProjectorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ProjectorConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_checkpoint_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_checkpoint_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_checkpoint_path().data(), this->model_checkpoint_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.ProjectorConfig.model_checkpoint_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_embeddings;
        break;
      }

      // repeated .tensorflow.EmbeddingInfo embeddings = 2;
      case 2: {
        if (tag == 18) {
         parse_embeddings:
          DO_(input->IncrementRecursionDepth());
         parse_loop_embeddings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_embeddings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_embeddings;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_model_checkpoint_dir;
        break;
      }

      // optional string model_checkpoint_dir = 3;
      case 3: {
        if (tag == 26) {
         parse_model_checkpoint_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_checkpoint_dir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_checkpoint_dir().data(), this->model_checkpoint_dir().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.ProjectorConfig.model_checkpoint_dir"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ProjectorConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ProjectorConfig)
  return false;
#undef DO_
}

void ProjectorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ProjectorConfig)
  // optional string model_checkpoint_path = 1;
  if (this->model_checkpoint_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_checkpoint_path().data(), this->model_checkpoint_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProjectorConfig.model_checkpoint_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_checkpoint_path(), output);
  }

  // repeated .tensorflow.EmbeddingInfo embeddings = 2;
  for (unsigned int i = 0, n = this->embeddings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->embeddings(i), output);
  }

  // optional string model_checkpoint_dir = 3;
  if (this->model_checkpoint_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_checkpoint_dir().data(), this->model_checkpoint_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProjectorConfig.model_checkpoint_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model_checkpoint_dir(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ProjectorConfig)
}

::google::protobuf::uint8* ProjectorConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ProjectorConfig)
  // optional string model_checkpoint_path = 1;
  if (this->model_checkpoint_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_checkpoint_path().data(), this->model_checkpoint_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProjectorConfig.model_checkpoint_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_checkpoint_path(), target);
  }

  // repeated .tensorflow.EmbeddingInfo embeddings = 2;
  for (unsigned int i = 0, n = this->embeddings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->embeddings(i), false, target);
  }

  // optional string model_checkpoint_dir = 3;
  if (this->model_checkpoint_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_checkpoint_dir().data(), this->model_checkpoint_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProjectorConfig.model_checkpoint_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model_checkpoint_dir(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ProjectorConfig)
  return target;
}

size_t ProjectorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ProjectorConfig)
  size_t total_size = 0;

  // optional string model_checkpoint_path = 1;
  if (this->model_checkpoint_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_checkpoint_path());
  }

  // optional string model_checkpoint_dir = 3;
  if (this->model_checkpoint_dir().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_checkpoint_dir());
  }

  // repeated .tensorflow.EmbeddingInfo embeddings = 2;
  {
    unsigned int count = this->embeddings_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->embeddings(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjectorConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ProjectorConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProjectorConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProjectorConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ProjectorConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ProjectorConfig)
    UnsafeMergeFrom(*source);
  }
}

void ProjectorConfig::MergeFrom(const ProjectorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ProjectorConfig)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ProjectorConfig::UnsafeMergeFrom(const ProjectorConfig& from) {
  GOOGLE_DCHECK(&from != this);
  embeddings_.MergeFrom(from.embeddings_);
  if (from.model_checkpoint_path().size() > 0) {

    model_checkpoint_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_checkpoint_path_);
  }
  if (from.model_checkpoint_dir().size() > 0) {

    model_checkpoint_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_checkpoint_dir_);
  }
}

void ProjectorConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ProjectorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectorConfig::CopyFrom(const ProjectorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ProjectorConfig)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ProjectorConfig::IsInitialized() const {

  return true;
}

void ProjectorConfig::Swap(ProjectorConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProjectorConfig::InternalSwap(ProjectorConfig* other) {
  model_checkpoint_path_.Swap(&other->model_checkpoint_path_);
  embeddings_.UnsafeArenaSwap(&other->embeddings_);
  model_checkpoint_dir_.Swap(&other->model_checkpoint_dir_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProjectorConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProjectorConfig_descriptor_;
  metadata.reflection = ProjectorConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProjectorConfig

// optional string model_checkpoint_path = 1;
void ProjectorConfig::clear_model_checkpoint_path() {
  model_checkpoint_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProjectorConfig::model_checkpoint_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.ProjectorConfig.model_checkpoint_path)
  return model_checkpoint_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProjectorConfig::set_model_checkpoint_path(const ::std::string& value) {
  
  model_checkpoint_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.ProjectorConfig.model_checkpoint_path)
}
void ProjectorConfig::set_model_checkpoint_path(const char* value) {
  
  model_checkpoint_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.ProjectorConfig.model_checkpoint_path)
}
void ProjectorConfig::set_model_checkpoint_path(const char* value, size_t size) {
  
  model_checkpoint_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ProjectorConfig.model_checkpoint_path)
}
::std::string* ProjectorConfig::mutable_model_checkpoint_path() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.ProjectorConfig.model_checkpoint_path)
  return model_checkpoint_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProjectorConfig::release_model_checkpoint_path() {
  // @@protoc_insertion_point(field_release:tensorflow.ProjectorConfig.model_checkpoint_path)
  
  return model_checkpoint_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProjectorConfig::set_allocated_model_checkpoint_path(::std::string* model_checkpoint_path) {
  if (model_checkpoint_path != NULL) {
    
  } else {
    
  }
  model_checkpoint_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_checkpoint_path);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ProjectorConfig.model_checkpoint_path)
}

// repeated .tensorflow.EmbeddingInfo embeddings = 2;
int ProjectorConfig::embeddings_size() const {
  return embeddings_.size();
}
void ProjectorConfig::clear_embeddings() {
  embeddings_.Clear();
}
const ::tensorflow::EmbeddingInfo& ProjectorConfig::embeddings(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ProjectorConfig.embeddings)
  return embeddings_.Get(index);
}
::tensorflow::EmbeddingInfo* ProjectorConfig::mutable_embeddings(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ProjectorConfig.embeddings)
  return embeddings_.Mutable(index);
}
::tensorflow::EmbeddingInfo* ProjectorConfig::add_embeddings() {
  // @@protoc_insertion_point(field_add:tensorflow.ProjectorConfig.embeddings)
  return embeddings_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::EmbeddingInfo >*
ProjectorConfig::mutable_embeddings() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ProjectorConfig.embeddings)
  return &embeddings_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::EmbeddingInfo >&
ProjectorConfig::embeddings() const {
  // @@protoc_insertion_point(field_list:tensorflow.ProjectorConfig.embeddings)
  return embeddings_;
}

// optional string model_checkpoint_dir = 3;
void ProjectorConfig::clear_model_checkpoint_dir() {
  model_checkpoint_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProjectorConfig::model_checkpoint_dir() const {
  // @@protoc_insertion_point(field_get:tensorflow.ProjectorConfig.model_checkpoint_dir)
  return model_checkpoint_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProjectorConfig::set_model_checkpoint_dir(const ::std::string& value) {
  
  model_checkpoint_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.ProjectorConfig.model_checkpoint_dir)
}
void ProjectorConfig::set_model_checkpoint_dir(const char* value) {
  
  model_checkpoint_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.ProjectorConfig.model_checkpoint_dir)
}
void ProjectorConfig::set_model_checkpoint_dir(const char* value, size_t size) {
  
  model_checkpoint_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ProjectorConfig.model_checkpoint_dir)
}
::std::string* ProjectorConfig::mutable_model_checkpoint_dir() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.ProjectorConfig.model_checkpoint_dir)
  return model_checkpoint_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProjectorConfig::release_model_checkpoint_dir() {
  // @@protoc_insertion_point(field_release:tensorflow.ProjectorConfig.model_checkpoint_dir)
  
  return model_checkpoint_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProjectorConfig::set_allocated_model_checkpoint_dir(::std::string* model_checkpoint_dir) {
  if (model_checkpoint_dir != NULL) {
    
  } else {
    
  }
  model_checkpoint_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_checkpoint_dir);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ProjectorConfig.model_checkpoint_dir)
}

inline const ProjectorConfig* ProjectorConfig::internal_default_instance() {
  return &ProjectorConfig_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
