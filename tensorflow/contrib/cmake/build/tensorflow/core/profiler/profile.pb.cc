// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/profile.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/profiler/profile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace tfprof {
namespace pprof {

namespace {

const ::google::protobuf::Descriptor* Profile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Profile_reflection_ = NULL;
const ::google::protobuf::Descriptor* ValueType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValueType_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sample_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sample_reflection_ = NULL;
const ::google::protobuf::Descriptor* Label_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Label_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mapping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mapping_reflection_ = NULL;
const ::google::protobuf::Descriptor* Location_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Location_reflection_ = NULL;
const ::google::protobuf::Descriptor* Line_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Line_reflection_ = NULL;
const ::google::protobuf::Descriptor* Function_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Function_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fprofiler_2fprofile_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fprofiler_2fprofile_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2fprofile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/profiler/profile.proto");
  GOOGLE_CHECK(file != NULL);
  Profile_descriptor_ = file->message_type(0);
  static const int Profile_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, sample_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, sample_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, mapping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, string_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, drop_frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, keep_frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, time_nanos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, duration_nanos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, period_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, default_sample_type_),
  };
  Profile_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Profile_descriptor_,
      Profile::internal_default_instance(),
      Profile_offsets_,
      -1,
      -1,
      -1,
      sizeof(Profile),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, _internal_metadata_));
  ValueType_descriptor_ = file->message_type(1);
  static const int ValueType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueType, unit_),
  };
  ValueType_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ValueType_descriptor_,
      ValueType::internal_default_instance(),
      ValueType_offsets_,
      -1,
      -1,
      -1,
      sizeof(ValueType),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueType, _internal_metadata_));
  Sample_descriptor_ = file->message_type(2);
  static const int Sample_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, location_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, label_),
  };
  Sample_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Sample_descriptor_,
      Sample::internal_default_instance(),
      Sample_offsets_,
      -1,
      -1,
      -1,
      sizeof(Sample),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, _internal_metadata_));
  Label_descriptor_ = file->message_type(3);
  static const int Label_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, num_),
  };
  Label_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Label_descriptor_,
      Label::internal_default_instance(),
      Label_offsets_,
      -1,
      -1,
      -1,
      sizeof(Label),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, _internal_metadata_));
  Mapping_descriptor_ = file->message_type(4);
  static const int Mapping_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, memory_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, memory_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, file_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, build_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, has_functions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, has_filenames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, has_line_numbers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, has_inline_frames_),
  };
  Mapping_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mapping_descriptor_,
      Mapping::internal_default_instance(),
      Mapping_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mapping),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, _internal_metadata_));
  Location_descriptor_ = file->message_type(5);
  static const int Location_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, mapping_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, line_),
  };
  Location_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Location_descriptor_,
      Location::internal_default_instance(),
      Location_offsets_,
      -1,
      -1,
      -1,
      sizeof(Location),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _internal_metadata_));
  Line_descriptor_ = file->message_type(6);
  static const int Line_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, function_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, line_),
  };
  Line_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Line_descriptor_,
      Line::internal_default_instance(),
      Line_offsets_,
      -1,
      -1,
      -1,
      sizeof(Line),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, _internal_metadata_));
  Function_descriptor_ = file->message_type(7);
  static const int Function_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, system_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, start_line_),
  };
  Function_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Function_descriptor_,
      Function::internal_default_instance(),
      Function_offsets_,
      -1,
      -1,
      -1,
      sizeof(Function),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fprofiler_2fprofile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Profile_descriptor_, Profile::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ValueType_descriptor_, ValueType::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Sample_descriptor_, Sample::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Label_descriptor_, Label::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mapping_descriptor_, Mapping::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Location_descriptor_, Location::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Line_descriptor_, Line::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Function_descriptor_, Function::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fprofiler_2fprofile_2eproto() {
  Profile_default_instance_.Shutdown();
  delete Profile_reflection_;
  ValueType_default_instance_.Shutdown();
  delete ValueType_reflection_;
  Sample_default_instance_.Shutdown();
  delete Sample_reflection_;
  Label_default_instance_.Shutdown();
  delete Label_reflection_;
  Mapping_default_instance_.Shutdown();
  delete Mapping_reflection_;
  Location_default_instance_.Shutdown();
  delete Location_reflection_;
  Line_default_instance_.Shutdown();
  delete Line_reflection_;
  Function_default_instance_.Shutdown();
  delete Function_reflection_;
}

void protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  Profile_default_instance_.DefaultConstruct();
  ValueType_default_instance_.DefaultConstruct();
  Sample_default_instance_.DefaultConstruct();
  Label_default_instance_.DefaultConstruct();
  Mapping_default_instance_.DefaultConstruct();
  Location_default_instance_.DefaultConstruct();
  Line_default_instance_.DefaultConstruct();
  Function_default_instance_.DefaultConstruct();
  Profile_default_instance_.get_mutable()->InitAsDefaultInstance();
  ValueType_default_instance_.get_mutable()->InitAsDefaultInstance();
  Sample_default_instance_.get_mutable()->InitAsDefaultInstance();
  Label_default_instance_.get_mutable()->InitAsDefaultInstance();
  Mapping_default_instance_.get_mutable()->InitAsDefaultInstance();
  Location_default_instance_.get_mutable()->InitAsDefaultInstance();
  Line_default_instance_.get_mutable()->InitAsDefaultInstance();
  Function_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto_once_);
void protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto_once_,
                 &protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto_impl);
}
void protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2fprofile_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&tensorflow/core/profiler/profile.proto"
    "\022\027tensorflow.tfprof.pprof\"\363\003\n\007Profile\0227\n"
    "\013sample_type\030\001 \003(\0132\".tensorflow.tfprof.p"
    "prof.ValueType\022/\n\006sample\030\002 \003(\0132\037.tensorf"
    "low.tfprof.pprof.Sample\0221\n\007mapping\030\003 \003(\013"
    "2 .tensorflow.tfprof.pprof.Mapping\0223\n\010lo"
    "cation\030\004 \003(\0132!.tensorflow.tfprof.pprof.L"
    "ocation\0223\n\010function\030\005 \003(\0132!.tensorflow.t"
    "fprof.pprof.Function\022\024\n\014string_table\030\006 \003"
    "(\t\022\023\n\013drop_frames\030\007 \001(\003\022\023\n\013keep_frames\030\010"
    " \001(\003\022\022\n\ntime_nanos\030\t \001(\003\022\026\n\016duration_nan"
    "os\030\n \001(\003\0227\n\013period_type\030\013 \001(\0132\".tensorfl"
    "ow.tfprof.pprof.ValueType\022\016\n\006period\030\014 \001("
    "\003\022\017\n\007comment\030\r \003(\003\022\033\n\023default_sample_typ"
    "e\030\016 \001(\003\"\'\n\tValueType\022\014\n\004type\030\001 \001(\003\022\014\n\004un"
    "it\030\002 \001(\003\"[\n\006Sample\022\023\n\013location_id\030\001 \003(\004\022"
    "\r\n\005value\030\002 \003(\003\022-\n\005label\030\003 \003(\0132\036.tensorfl"
    "ow.tfprof.pprof.Label\".\n\005Label\022\013\n\003key\030\001 "
    "\001(\003\022\013\n\003str\030\002 \001(\003\022\013\n\003num\030\003 \001(\003\"\335\001\n\007Mappin"
    "g\022\n\n\002id\030\001 \001(\004\022\024\n\014memory_start\030\002 \001(\004\022\024\n\014m"
    "emory_limit\030\003 \001(\004\022\023\n\013file_offset\030\004 \001(\004\022\020"
    "\n\010filename\030\005 \001(\003\022\020\n\010build_id\030\006 \001(\003\022\025\n\rha"
    "s_functions\030\007 \001(\010\022\025\n\rhas_filenames\030\010 \001(\010"
    "\022\030\n\020has_line_numbers\030\t \001(\010\022\031\n\021has_inline"
    "_frames\030\n \001(\010\"h\n\010Location\022\n\n\002id\030\001 \001(\004\022\022\n"
    "\nmapping_id\030\002 \001(\004\022\017\n\007address\030\003 \001(\004\022+\n\004li"
    "ne\030\004 \003(\0132\035.tensorflow.tfprof.pprof.Line\""
    ")\n\004Line\022\023\n\013function_id\030\001 \001(\004\022\014\n\004line\030\002 \001"
    "(\003\"_\n\010Function\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002 \001(\003"
    "\022\023\n\013system_name\030\003 \001(\003\022\020\n\010filename\030\004 \001(\003\022"
    "\022\n\nstart_line\030\005 \001(\003b\006proto3", 1227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/profiler/profile.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fprofiler_2fprofile_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2fprofile_2eproto_once_);
void protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2fprofile_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2fprofile_2eproto_once_,
                 &protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2fprofile_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fprofiler_2fprofile_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fprofiler_2fprofile_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2fprofile_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fprofiler_2fprofile_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Profile::kSampleTypeFieldNumber;
const int Profile::kSampleFieldNumber;
const int Profile::kMappingFieldNumber;
const int Profile::kLocationFieldNumber;
const int Profile::kFunctionFieldNumber;
const int Profile::kStringTableFieldNumber;
const int Profile::kDropFramesFieldNumber;
const int Profile::kKeepFramesFieldNumber;
const int Profile::kTimeNanosFieldNumber;
const int Profile::kDurationNanosFieldNumber;
const int Profile::kPeriodTypeFieldNumber;
const int Profile::kPeriodFieldNumber;
const int Profile::kCommentFieldNumber;
const int Profile::kDefaultSampleTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Profile::Profile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.pprof.Profile)
}

void Profile::InitAsDefaultInstance() {
  period_type_ = const_cast< ::tensorflow::tfprof::pprof::ValueType*>(
      ::tensorflow::tfprof::pprof::ValueType::internal_default_instance());
}

Profile::Profile(const Profile& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.pprof.Profile)
}

void Profile::SharedCtor() {
  period_type_ = NULL;
  ::memset(&drop_frames_, 0, reinterpret_cast<char*>(&default_sample_type_) -
    reinterpret_cast<char*>(&drop_frames_) + sizeof(default_sample_type_));
  _cached_size_ = 0;
}

Profile::~Profile() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.pprof.Profile)
  SharedDtor();
}

void Profile::SharedDtor() {
  if (this != &Profile_default_instance_.get()) {
    delete period_type_;
  }
}

void Profile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Profile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Profile_descriptor_;
}

const Profile& Profile::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Profile> Profile_default_instance_;

Profile* Profile::New(::google::protobuf::Arena* arena) const {
  Profile* n = new Profile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Profile::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.pprof.Profile)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Profile, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Profile*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(drop_frames_, keep_frames_);
  ZR_(time_nanos_, default_sample_type_);
  if (GetArenaNoVirtual() == NULL && period_type_ != NULL) delete period_type_;
  period_type_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  sample_type_.Clear();
  sample_.Clear();
  mapping_.Clear();
  location_.Clear();
  function_.Clear();
  string_table_.Clear();
  comment_.Clear();
}

bool Profile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.pprof.Profile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.tfprof.pprof.ValueType sample_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sample_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sample_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_sample_type;
        if (input->ExpectTag(18)) goto parse_loop_sample;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.tfprof.pprof.Sample sample = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sample:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sample()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_sample;
        if (input->ExpectTag(26)) goto parse_loop_mapping;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.tfprof.pprof.Mapping mapping = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_mapping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mapping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_mapping;
        if (input->ExpectTag(34)) goto parse_loop_location;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.tfprof.pprof.Location location = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_location;
        if (input->ExpectTag(42)) goto parse_loop_function;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.tfprof.pprof.Function function = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_function()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_function;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_string_table;
        break;
      }

      // repeated string string_table = 6;
      case 6: {
        if (tag == 50) {
         parse_string_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_string_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string_table(this->string_table_size() - 1).data(),
            this->string_table(this->string_table_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.pprof.Profile.string_table"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_string_table;
        if (input->ExpectTag(56)) goto parse_drop_frames;
        break;
      }

      // optional int64 drop_frames = 7;
      case 7: {
        if (tag == 56) {
         parse_drop_frames:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &drop_frames_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_keep_frames;
        break;
      }

      // optional int64 keep_frames = 8;
      case 8: {
        if (tag == 64) {
         parse_keep_frames:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &keep_frames_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time_nanos;
        break;
      }

      // optional int64 time_nanos = 9;
      case 9: {
        if (tag == 72) {
         parse_time_nanos:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_nanos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_duration_nanos;
        break;
      }

      // optional int64 duration_nanos = 10;
      case 10: {
        if (tag == 80) {
         parse_duration_nanos:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_nanos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_period_type;
        break;
      }

      // optional .tensorflow.tfprof.pprof.ValueType period_type = 11;
      case 11: {
        if (tag == 90) {
         parse_period_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_period_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_period;
        break;
      }

      // optional int64 period = 12;
      case 12: {
        if (tag == 96) {
         parse_period:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &period_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_comment;
        break;
      }

      // repeated int64 comment = 13;
      case 13: {
        if (tag == 106) {
         parse_comment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_comment())));
        } else if (tag == 104) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 106, input, this->mutable_comment())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_default_sample_type;
        break;
      }

      // optional int64 default_sample_type = 14;
      case 14: {
        if (tag == 112) {
         parse_default_sample_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &default_sample_type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.pprof.Profile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.pprof.Profile)
  return false;
#undef DO_
}

void Profile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.pprof.Profile)
  // repeated .tensorflow.tfprof.pprof.ValueType sample_type = 1;
  for (unsigned int i = 0, n = this->sample_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sample_type(i), output);
  }

  // repeated .tensorflow.tfprof.pprof.Sample sample = 2;
  for (unsigned int i = 0, n = this->sample_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sample(i), output);
  }

  // repeated .tensorflow.tfprof.pprof.Mapping mapping = 3;
  for (unsigned int i = 0, n = this->mapping_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mapping(i), output);
  }

  // repeated .tensorflow.tfprof.pprof.Location location = 4;
  for (unsigned int i = 0, n = this->location_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->location(i), output);
  }

  // repeated .tensorflow.tfprof.pprof.Function function = 5;
  for (unsigned int i = 0, n = this->function_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->function(i), output);
  }

  // repeated string string_table = 6;
  for (int i = 0; i < this->string_table_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_table(i).data(), this->string_table(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.pprof.Profile.string_table");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->string_table(i), output);
  }

  // optional int64 drop_frames = 7;
  if (this->drop_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->drop_frames(), output);
  }

  // optional int64 keep_frames = 8;
  if (this->keep_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->keep_frames(), output);
  }

  // optional int64 time_nanos = 9;
  if (this->time_nanos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->time_nanos(), output);
  }

  // optional int64 duration_nanos = 10;
  if (this->duration_nanos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->duration_nanos(), output);
  }

  // optional .tensorflow.tfprof.pprof.ValueType period_type = 11;
  if (this->has_period_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->period_type_, output);
  }

  // optional int64 period = 12;
  if (this->period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->period(), output);
  }

  // repeated int64 comment = 13;
  if (this->comment_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_comment_cached_byte_size_);
  }
  for (int i = 0; i < this->comment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->comment(i), output);
  }

  // optional int64 default_sample_type = 14;
  if (this->default_sample_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->default_sample_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.pprof.Profile)
}

::google::protobuf::uint8* Profile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.pprof.Profile)
  // repeated .tensorflow.tfprof.pprof.ValueType sample_type = 1;
  for (unsigned int i = 0, n = this->sample_type_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sample_type(i), false, target);
  }

  // repeated .tensorflow.tfprof.pprof.Sample sample = 2;
  for (unsigned int i = 0, n = this->sample_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->sample(i), false, target);
  }

  // repeated .tensorflow.tfprof.pprof.Mapping mapping = 3;
  for (unsigned int i = 0, n = this->mapping_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->mapping(i), false, target);
  }

  // repeated .tensorflow.tfprof.pprof.Location location = 4;
  for (unsigned int i = 0, n = this->location_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->location(i), false, target);
  }

  // repeated .tensorflow.tfprof.pprof.Function function = 5;
  for (unsigned int i = 0, n = this->function_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->function(i), false, target);
  }

  // repeated string string_table = 6;
  for (int i = 0; i < this->string_table_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_table(i).data(), this->string_table(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.pprof.Profile.string_table");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->string_table(i), target);
  }

  // optional int64 drop_frames = 7;
  if (this->drop_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->drop_frames(), target);
  }

  // optional int64 keep_frames = 8;
  if (this->keep_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->keep_frames(), target);
  }

  // optional int64 time_nanos = 9;
  if (this->time_nanos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->time_nanos(), target);
  }

  // optional int64 duration_nanos = 10;
  if (this->duration_nanos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->duration_nanos(), target);
  }

  // optional .tensorflow.tfprof.pprof.ValueType period_type = 11;
  if (this->has_period_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->period_type_, false, target);
  }

  // optional int64 period = 12;
  if (this->period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->period(), target);
  }

  // repeated int64 comment = 13;
  if (this->comment_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _comment_cached_byte_size_, target);
  }
  for (int i = 0; i < this->comment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->comment(i), target);
  }

  // optional int64 default_sample_type = 14;
  if (this->default_sample_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->default_sample_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.pprof.Profile)
  return target;
}

size_t Profile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.pprof.Profile)
  size_t total_size = 0;

  // optional int64 drop_frames = 7;
  if (this->drop_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->drop_frames());
  }

  // optional int64 keep_frames = 8;
  if (this->keep_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->keep_frames());
  }

  // optional int64 time_nanos = 9;
  if (this->time_nanos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_nanos());
  }

  // optional int64 duration_nanos = 10;
  if (this->duration_nanos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->duration_nanos());
  }

  // optional .tensorflow.tfprof.pprof.ValueType period_type = 11;
  if (this->has_period_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->period_type_);
  }

  // optional int64 period = 12;
  if (this->period() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->period());
  }

  // optional int64 default_sample_type = 14;
  if (this->default_sample_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->default_sample_type());
  }

  // repeated .tensorflow.tfprof.pprof.ValueType sample_type = 1;
  {
    unsigned int count = this->sample_type_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sample_type(i));
    }
  }

  // repeated .tensorflow.tfprof.pprof.Sample sample = 2;
  {
    unsigned int count = this->sample_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sample(i));
    }
  }

  // repeated .tensorflow.tfprof.pprof.Mapping mapping = 3;
  {
    unsigned int count = this->mapping_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapping(i));
    }
  }

  // repeated .tensorflow.tfprof.pprof.Location location = 4;
  {
    unsigned int count = this->location_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location(i));
    }
  }

  // repeated .tensorflow.tfprof.pprof.Function function = 5;
  {
    unsigned int count = this->function_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->function(i));
    }
  }

  // repeated string string_table = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_table_size());
  for (int i = 0; i < this->string_table_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->string_table(i));
  }

  // repeated int64 comment = 13;
  {
    size_t data_size = 0;
    unsigned int count = this->comment_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->comment(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _comment_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Profile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.pprof.Profile)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Profile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Profile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.pprof.Profile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.pprof.Profile)
    UnsafeMergeFrom(*source);
  }
}

void Profile::MergeFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.pprof.Profile)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Profile::UnsafeMergeFrom(const Profile& from) {
  GOOGLE_DCHECK(&from != this);
  sample_type_.MergeFrom(from.sample_type_);
  sample_.MergeFrom(from.sample_);
  mapping_.MergeFrom(from.mapping_);
  location_.MergeFrom(from.location_);
  function_.MergeFrom(from.function_);
  string_table_.UnsafeMergeFrom(from.string_table_);
  comment_.UnsafeMergeFrom(from.comment_);
  if (from.drop_frames() != 0) {
    set_drop_frames(from.drop_frames());
  }
  if (from.keep_frames() != 0) {
    set_keep_frames(from.keep_frames());
  }
  if (from.time_nanos() != 0) {
    set_time_nanos(from.time_nanos());
  }
  if (from.duration_nanos() != 0) {
    set_duration_nanos(from.duration_nanos());
  }
  if (from.has_period_type()) {
    mutable_period_type()->::tensorflow::tfprof::pprof::ValueType::MergeFrom(from.period_type());
  }
  if (from.period() != 0) {
    set_period(from.period());
  }
  if (from.default_sample_type() != 0) {
    set_default_sample_type(from.default_sample_type());
  }
}

void Profile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.pprof.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profile::CopyFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.pprof.Profile)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Profile::IsInitialized() const {

  return true;
}

void Profile::Swap(Profile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Profile::InternalSwap(Profile* other) {
  sample_type_.UnsafeArenaSwap(&other->sample_type_);
  sample_.UnsafeArenaSwap(&other->sample_);
  mapping_.UnsafeArenaSwap(&other->mapping_);
  location_.UnsafeArenaSwap(&other->location_);
  function_.UnsafeArenaSwap(&other->function_);
  string_table_.UnsafeArenaSwap(&other->string_table_);
  std::swap(drop_frames_, other->drop_frames_);
  std::swap(keep_frames_, other->keep_frames_);
  std::swap(time_nanos_, other->time_nanos_);
  std::swap(duration_nanos_, other->duration_nanos_);
  std::swap(period_type_, other->period_type_);
  std::swap(period_, other->period_);
  comment_.UnsafeArenaSwap(&other->comment_);
  std::swap(default_sample_type_, other->default_sample_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Profile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Profile_descriptor_;
  metadata.reflection = Profile_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Profile

// repeated .tensorflow.tfprof.pprof.ValueType sample_type = 1;
int Profile::sample_type_size() const {
  return sample_type_.size();
}
void Profile::clear_sample_type() {
  sample_type_.Clear();
}
const ::tensorflow::tfprof::pprof::ValueType& Profile::sample_type(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Profile.sample_type)
  return sample_type_.Get(index);
}
::tensorflow::tfprof::pprof::ValueType* Profile::mutable_sample_type(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.pprof.Profile.sample_type)
  return sample_type_.Mutable(index);
}
::tensorflow::tfprof::pprof::ValueType* Profile::add_sample_type() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.pprof.Profile.sample_type)
  return sample_type_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::pprof::ValueType >*
Profile::mutable_sample_type() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.pprof.Profile.sample_type)
  return &sample_type_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::pprof::ValueType >&
Profile::sample_type() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.pprof.Profile.sample_type)
  return sample_type_;
}

// repeated .tensorflow.tfprof.pprof.Sample sample = 2;
int Profile::sample_size() const {
  return sample_.size();
}
void Profile::clear_sample() {
  sample_.Clear();
}
const ::tensorflow::tfprof::pprof::Sample& Profile::sample(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Profile.sample)
  return sample_.Get(index);
}
::tensorflow::tfprof::pprof::Sample* Profile::mutable_sample(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.pprof.Profile.sample)
  return sample_.Mutable(index);
}
::tensorflow::tfprof::pprof::Sample* Profile::add_sample() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.pprof.Profile.sample)
  return sample_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::pprof::Sample >*
Profile::mutable_sample() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.pprof.Profile.sample)
  return &sample_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::pprof::Sample >&
Profile::sample() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.pprof.Profile.sample)
  return sample_;
}

// repeated .tensorflow.tfprof.pprof.Mapping mapping = 3;
int Profile::mapping_size() const {
  return mapping_.size();
}
void Profile::clear_mapping() {
  mapping_.Clear();
}
const ::tensorflow::tfprof::pprof::Mapping& Profile::mapping(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Profile.mapping)
  return mapping_.Get(index);
}
::tensorflow::tfprof::pprof::Mapping* Profile::mutable_mapping(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.pprof.Profile.mapping)
  return mapping_.Mutable(index);
}
::tensorflow::tfprof::pprof::Mapping* Profile::add_mapping() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.pprof.Profile.mapping)
  return mapping_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::pprof::Mapping >*
Profile::mutable_mapping() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.pprof.Profile.mapping)
  return &mapping_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::pprof::Mapping >&
Profile::mapping() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.pprof.Profile.mapping)
  return mapping_;
}

// repeated .tensorflow.tfprof.pprof.Location location = 4;
int Profile::location_size() const {
  return location_.size();
}
void Profile::clear_location() {
  location_.Clear();
}
const ::tensorflow::tfprof::pprof::Location& Profile::location(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Profile.location)
  return location_.Get(index);
}
::tensorflow::tfprof::pprof::Location* Profile::mutable_location(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.pprof.Profile.location)
  return location_.Mutable(index);
}
::tensorflow::tfprof::pprof::Location* Profile::add_location() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.pprof.Profile.location)
  return location_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::pprof::Location >*
Profile::mutable_location() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.pprof.Profile.location)
  return &location_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::pprof::Location >&
Profile::location() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.pprof.Profile.location)
  return location_;
}

// repeated .tensorflow.tfprof.pprof.Function function = 5;
int Profile::function_size() const {
  return function_.size();
}
void Profile::clear_function() {
  function_.Clear();
}
const ::tensorflow::tfprof::pprof::Function& Profile::function(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Profile.function)
  return function_.Get(index);
}
::tensorflow::tfprof::pprof::Function* Profile::mutable_function(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.pprof.Profile.function)
  return function_.Mutable(index);
}
::tensorflow::tfprof::pprof::Function* Profile::add_function() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.pprof.Profile.function)
  return function_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::pprof::Function >*
Profile::mutable_function() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.pprof.Profile.function)
  return &function_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::pprof::Function >&
Profile::function() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.pprof.Profile.function)
  return function_;
}

// repeated string string_table = 6;
int Profile::string_table_size() const {
  return string_table_.size();
}
void Profile::clear_string_table() {
  string_table_.Clear();
}
const ::std::string& Profile::string_table(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Profile.string_table)
  return string_table_.Get(index);
}
::std::string* Profile::mutable_string_table(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.pprof.Profile.string_table)
  return string_table_.Mutable(index);
}
void Profile::set_string_table(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Profile.string_table)
  string_table_.Mutable(index)->assign(value);
}
void Profile::set_string_table(int index, const char* value) {
  string_table_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.pprof.Profile.string_table)
}
void Profile::set_string_table(int index, const char* value, size_t size) {
  string_table_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.pprof.Profile.string_table)
}
::std::string* Profile::add_string_table() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.pprof.Profile.string_table)
  return string_table_.Add();
}
void Profile::add_string_table(const ::std::string& value) {
  string_table_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.pprof.Profile.string_table)
}
void Profile::add_string_table(const char* value) {
  string_table_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.pprof.Profile.string_table)
}
void Profile::add_string_table(const char* value, size_t size) {
  string_table_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.pprof.Profile.string_table)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Profile::string_table() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.pprof.Profile.string_table)
  return string_table_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Profile::mutable_string_table() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.pprof.Profile.string_table)
  return &string_table_;
}

// optional int64 drop_frames = 7;
void Profile::clear_drop_frames() {
  drop_frames_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Profile::drop_frames() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Profile.drop_frames)
  return drop_frames_;
}
void Profile::set_drop_frames(::google::protobuf::int64 value) {
  
  drop_frames_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Profile.drop_frames)
}

// optional int64 keep_frames = 8;
void Profile::clear_keep_frames() {
  keep_frames_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Profile::keep_frames() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Profile.keep_frames)
  return keep_frames_;
}
void Profile::set_keep_frames(::google::protobuf::int64 value) {
  
  keep_frames_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Profile.keep_frames)
}

// optional int64 time_nanos = 9;
void Profile::clear_time_nanos() {
  time_nanos_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Profile::time_nanos() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Profile.time_nanos)
  return time_nanos_;
}
void Profile::set_time_nanos(::google::protobuf::int64 value) {
  
  time_nanos_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Profile.time_nanos)
}

// optional int64 duration_nanos = 10;
void Profile::clear_duration_nanos() {
  duration_nanos_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Profile::duration_nanos() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Profile.duration_nanos)
  return duration_nanos_;
}
void Profile::set_duration_nanos(::google::protobuf::int64 value) {
  
  duration_nanos_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Profile.duration_nanos)
}

// optional .tensorflow.tfprof.pprof.ValueType period_type = 11;
bool Profile::has_period_type() const {
  return this != internal_default_instance() && period_type_ != NULL;
}
void Profile::clear_period_type() {
  if (GetArenaNoVirtual() == NULL && period_type_ != NULL) delete period_type_;
  period_type_ = NULL;
}
const ::tensorflow::tfprof::pprof::ValueType& Profile::period_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Profile.period_type)
  return period_type_ != NULL ? *period_type_
                         : *::tensorflow::tfprof::pprof::ValueType::internal_default_instance();
}
::tensorflow::tfprof::pprof::ValueType* Profile::mutable_period_type() {
  
  if (period_type_ == NULL) {
    period_type_ = new ::tensorflow::tfprof::pprof::ValueType;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.pprof.Profile.period_type)
  return period_type_;
}
::tensorflow::tfprof::pprof::ValueType* Profile::release_period_type() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.pprof.Profile.period_type)
  
  ::tensorflow::tfprof::pprof::ValueType* temp = period_type_;
  period_type_ = NULL;
  return temp;
}
void Profile::set_allocated_period_type(::tensorflow::tfprof::pprof::ValueType* period_type) {
  delete period_type_;
  period_type_ = period_type;
  if (period_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.pprof.Profile.period_type)
}

// optional int64 period = 12;
void Profile::clear_period() {
  period_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Profile::period() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Profile.period)
  return period_;
}
void Profile::set_period(::google::protobuf::int64 value) {
  
  period_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Profile.period)
}

// repeated int64 comment = 13;
int Profile::comment_size() const {
  return comment_.size();
}
void Profile::clear_comment() {
  comment_.Clear();
}
::google::protobuf::int64 Profile::comment(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Profile.comment)
  return comment_.Get(index);
}
void Profile::set_comment(int index, ::google::protobuf::int64 value) {
  comment_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Profile.comment)
}
void Profile::add_comment(::google::protobuf::int64 value) {
  comment_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.pprof.Profile.comment)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Profile::comment() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.pprof.Profile.comment)
  return comment_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Profile::mutable_comment() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.pprof.Profile.comment)
  return &comment_;
}

// optional int64 default_sample_type = 14;
void Profile::clear_default_sample_type() {
  default_sample_type_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Profile::default_sample_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Profile.default_sample_type)
  return default_sample_type_;
}
void Profile::set_default_sample_type(::google::protobuf::int64 value) {
  
  default_sample_type_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Profile.default_sample_type)
}

inline const Profile* Profile::internal_default_instance() {
  return &Profile_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValueType::kTypeFieldNumber;
const int ValueType::kUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValueType::ValueType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.pprof.ValueType)
}

void ValueType::InitAsDefaultInstance() {
}

ValueType::ValueType(const ValueType& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.pprof.ValueType)
}

void ValueType::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&type_) + sizeof(unit_));
  _cached_size_ = 0;
}

ValueType::~ValueType() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.pprof.ValueType)
  SharedDtor();
}

void ValueType::SharedDtor() {
}

void ValueType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValueType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValueType_descriptor_;
}

const ValueType& ValueType::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ValueType> ValueType_default_instance_;

ValueType* ValueType::New(::google::protobuf::Arena* arena) const {
  ValueType* n = new ValueType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValueType::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.pprof.ValueType)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ValueType, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ValueType*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, unit_);

#undef ZR_HELPER_
#undef ZR_

}

bool ValueType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.pprof.ValueType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unit;
        break;
      }

      // optional int64 unit = 2;
      case 2: {
        if (tag == 16) {
         parse_unit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.pprof.ValueType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.pprof.ValueType)
  return false;
#undef DO_
}

void ValueType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.pprof.ValueType)
  // optional int64 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->type(), output);
  }

  // optional int64 unit = 2;
  if (this->unit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->unit(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.pprof.ValueType)
}

::google::protobuf::uint8* ValueType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.pprof.ValueType)
  // optional int64 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->type(), target);
  }

  // optional int64 unit = 2;
  if (this->unit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->unit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.pprof.ValueType)
  return target;
}

size_t ValueType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.pprof.ValueType)
  size_t total_size = 0;

  // optional int64 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->type());
  }

  // optional int64 unit = 2;
  if (this->unit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->unit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValueType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.pprof.ValueType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ValueType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ValueType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.pprof.ValueType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.pprof.ValueType)
    UnsafeMergeFrom(*source);
  }
}

void ValueType::MergeFrom(const ValueType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.pprof.ValueType)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ValueType::UnsafeMergeFrom(const ValueType& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.unit() != 0) {
    set_unit(from.unit());
  }
}

void ValueType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.pprof.ValueType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueType::CopyFrom(const ValueType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.pprof.ValueType)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ValueType::IsInitialized() const {

  return true;
}

void ValueType::Swap(ValueType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValueType::InternalSwap(ValueType* other) {
  std::swap(type_, other->type_);
  std::swap(unit_, other->unit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ValueType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ValueType_descriptor_;
  metadata.reflection = ValueType_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ValueType

// optional int64 type = 1;
void ValueType::clear_type() {
  type_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ValueType::type() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.ValueType.type)
  return type_;
}
void ValueType::set_type(::google::protobuf::int64 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.ValueType.type)
}

// optional int64 unit = 2;
void ValueType::clear_unit() {
  unit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ValueType::unit() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.ValueType.unit)
  return unit_;
}
void ValueType::set_unit(::google::protobuf::int64 value) {
  
  unit_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.ValueType.unit)
}

inline const ValueType* ValueType::internal_default_instance() {
  return &ValueType_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sample::kLocationIdFieldNumber;
const int Sample::kValueFieldNumber;
const int Sample::kLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sample::Sample()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.pprof.Sample)
}

void Sample::InitAsDefaultInstance() {
}

Sample::Sample(const Sample& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.pprof.Sample)
}

void Sample::SharedCtor() {
  _cached_size_ = 0;
}

Sample::~Sample() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.pprof.Sample)
  SharedDtor();
}

void Sample::SharedDtor() {
}

void Sample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sample::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sample_descriptor_;
}

const Sample& Sample::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Sample> Sample_default_instance_;

Sample* Sample::New(::google::protobuf::Arena* arena) const {
  Sample* n = new Sample;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sample::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.pprof.Sample)
  location_id_.Clear();
  value_.Clear();
  label_.Clear();
}

bool Sample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.pprof.Sample)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 location_id = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_location_id())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10, input, this->mutable_location_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // repeated int64 value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_value())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_label;
        break;
      }

      // repeated .tensorflow.tfprof.pprof.Label label = 3;
      case 3: {
        if (tag == 26) {
         parse_label:
          DO_(input->IncrementRecursionDepth());
         parse_loop_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_label()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_label;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.pprof.Sample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.pprof.Sample)
  return false;
#undef DO_
}

void Sample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.pprof.Sample)
  // repeated uint64 location_id = 1;
  if (this->location_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_location_id_cached_byte_size_);
  }
  for (int i = 0; i < this->location_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->location_id(i), output);
  }

  // repeated int64 value = 2;
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->value(i), output);
  }

  // repeated .tensorflow.tfprof.pprof.Label label = 3;
  for (unsigned int i = 0, n = this->label_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->label(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.pprof.Sample)
}

::google::protobuf::uint8* Sample::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.pprof.Sample)
  // repeated uint64 location_id = 1;
  if (this->location_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _location_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->location_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->location_id(i), target);
  }

  // repeated int64 value = 2;
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->value(i), target);
  }

  // repeated .tensorflow.tfprof.pprof.Label label = 3;
  for (unsigned int i = 0, n = this->label_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->label(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.pprof.Sample)
  return target;
}

size_t Sample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.pprof.Sample)
  size_t total_size = 0;

  // repeated uint64 location_id = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->location_id_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->location_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _location_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 value = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->value_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->value(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .tensorflow.tfprof.pprof.Label label = 3;
  {
    unsigned int count = this->label_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->label(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sample::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.pprof.Sample)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Sample* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sample>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.pprof.Sample)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.pprof.Sample)
    UnsafeMergeFrom(*source);
  }
}

void Sample::MergeFrom(const Sample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.pprof.Sample)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Sample::UnsafeMergeFrom(const Sample& from) {
  GOOGLE_DCHECK(&from != this);
  location_id_.UnsafeMergeFrom(from.location_id_);
  value_.UnsafeMergeFrom(from.value_);
  label_.MergeFrom(from.label_);
}

void Sample::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.pprof.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sample::CopyFrom(const Sample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.pprof.Sample)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Sample::IsInitialized() const {

  return true;
}

void Sample::Swap(Sample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sample::InternalSwap(Sample* other) {
  location_id_.UnsafeArenaSwap(&other->location_id_);
  value_.UnsafeArenaSwap(&other->value_);
  label_.UnsafeArenaSwap(&other->label_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sample::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sample_descriptor_;
  metadata.reflection = Sample_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sample

// repeated uint64 location_id = 1;
int Sample::location_id_size() const {
  return location_id_.size();
}
void Sample::clear_location_id() {
  location_id_.Clear();
}
::google::protobuf::uint64 Sample::location_id(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Sample.location_id)
  return location_id_.Get(index);
}
void Sample::set_location_id(int index, ::google::protobuf::uint64 value) {
  location_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Sample.location_id)
}
void Sample::add_location_id(::google::protobuf::uint64 value) {
  location_id_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.pprof.Sample.location_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Sample::location_id() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.pprof.Sample.location_id)
  return location_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Sample::mutable_location_id() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.pprof.Sample.location_id)
  return &location_id_;
}

// repeated int64 value = 2;
int Sample::value_size() const {
  return value_.size();
}
void Sample::clear_value() {
  value_.Clear();
}
::google::protobuf::int64 Sample::value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Sample.value)
  return value_.Get(index);
}
void Sample::set_value(int index, ::google::protobuf::int64 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Sample.value)
}
void Sample::add_value(::google::protobuf::int64 value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.pprof.Sample.value)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Sample::value() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.pprof.Sample.value)
  return value_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Sample::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.pprof.Sample.value)
  return &value_;
}

// repeated .tensorflow.tfprof.pprof.Label label = 3;
int Sample::label_size() const {
  return label_.size();
}
void Sample::clear_label() {
  label_.Clear();
}
const ::tensorflow::tfprof::pprof::Label& Sample::label(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Sample.label)
  return label_.Get(index);
}
::tensorflow::tfprof::pprof::Label* Sample::mutable_label(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.pprof.Sample.label)
  return label_.Mutable(index);
}
::tensorflow::tfprof::pprof::Label* Sample::add_label() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.pprof.Sample.label)
  return label_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::pprof::Label >*
Sample::mutable_label() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.pprof.Sample.label)
  return &label_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::pprof::Label >&
Sample::label() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.pprof.Sample.label)
  return label_;
}

inline const Sample* Sample::internal_default_instance() {
  return &Sample_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Label::kKeyFieldNumber;
const int Label::kStrFieldNumber;
const int Label::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Label::Label()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.pprof.Label)
}

void Label::InitAsDefaultInstance() {
}

Label::Label(const Label& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.pprof.Label)
}

void Label::SharedCtor() {
  ::memset(&key_, 0, reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&key_) + sizeof(num_));
  _cached_size_ = 0;
}

Label::~Label() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.pprof.Label)
  SharedDtor();
}

void Label::SharedDtor() {
}

void Label::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Label::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Label_descriptor_;
}

const Label& Label::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Label> Label_default_instance_;

Label* Label::New(::google::protobuf::Arena* arena) const {
  Label* n = new Label;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Label::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.pprof.Label)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Label, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Label*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(key_, num_);

#undef ZR_HELPER_
#undef ZR_

}

bool Label::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.pprof.Label)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 key = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_str;
        break;
      }

      // optional int64 str = 2;
      case 2: {
        if (tag == 16) {
         parse_str:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &str_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int64 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.pprof.Label)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.pprof.Label)
  return false;
#undef DO_
}

void Label::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.pprof.Label)
  // optional int64 key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->key(), output);
  }

  // optional int64 str = 2;
  if (this->str() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->str(), output);
  }

  // optional int64 num = 3;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->num(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.pprof.Label)
}

::google::protobuf::uint8* Label::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.pprof.Label)
  // optional int64 key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->key(), target);
  }

  // optional int64 str = 2;
  if (this->str() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->str(), target);
  }

  // optional int64 num = 3;
  if (this->num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->num(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.pprof.Label)
  return target;
}

size_t Label::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.pprof.Label)
  size_t total_size = 0;

  // optional int64 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->key());
  }

  // optional int64 str = 2;
  if (this->str() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->str());
  }

  // optional int64 num = 3;
  if (this->num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Label::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.pprof.Label)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Label* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Label>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.pprof.Label)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.pprof.Label)
    UnsafeMergeFrom(*source);
  }
}

void Label::MergeFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.pprof.Label)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Label::UnsafeMergeFrom(const Label& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.str() != 0) {
    set_str(from.str());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
}

void Label::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.pprof.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Label::CopyFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.pprof.Label)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Label::IsInitialized() const {

  return true;
}

void Label::Swap(Label* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Label::InternalSwap(Label* other) {
  std::swap(key_, other->key_);
  std::swap(str_, other->str_);
  std::swap(num_, other->num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Label::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Label_descriptor_;
  metadata.reflection = Label_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Label

// optional int64 key = 1;
void Label::clear_key() {
  key_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Label::key() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Label.key)
  return key_;
}
void Label::set_key(::google::protobuf::int64 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Label.key)
}

// optional int64 str = 2;
void Label::clear_str() {
  str_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Label::str() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Label.str)
  return str_;
}
void Label::set_str(::google::protobuf::int64 value) {
  
  str_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Label.str)
}

// optional int64 num = 3;
void Label::clear_num() {
  num_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Label::num() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Label.num)
  return num_;
}
void Label::set_num(::google::protobuf::int64 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Label.num)
}

inline const Label* Label::internal_default_instance() {
  return &Label_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mapping::kIdFieldNumber;
const int Mapping::kMemoryStartFieldNumber;
const int Mapping::kMemoryLimitFieldNumber;
const int Mapping::kFileOffsetFieldNumber;
const int Mapping::kFilenameFieldNumber;
const int Mapping::kBuildIdFieldNumber;
const int Mapping::kHasFunctionsFieldNumber;
const int Mapping::kHasFilenamesFieldNumber;
const int Mapping::kHasLineNumbersFieldNumber;
const int Mapping::kHasInlineFramesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mapping::Mapping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.pprof.Mapping)
}

void Mapping::InitAsDefaultInstance() {
}

Mapping::Mapping(const Mapping& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.pprof.Mapping)
}

void Mapping::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&has_inline_frames_) -
    reinterpret_cast<char*>(&id_) + sizeof(has_inline_frames_));
  _cached_size_ = 0;
}

Mapping::~Mapping() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.pprof.Mapping)
  SharedDtor();
}

void Mapping::SharedDtor() {
}

void Mapping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mapping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mapping_descriptor_;
}

const Mapping& Mapping::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Mapping> Mapping_default_instance_;

Mapping* Mapping::New(::google::protobuf::Arena* arena) const {
  Mapping* n = new Mapping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mapping::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.pprof.Mapping)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Mapping, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Mapping*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, has_filenames_);
  ZR_(has_line_numbers_, has_inline_frames_);

#undef ZR_HELPER_
#undef ZR_

}

bool Mapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.pprof.Mapping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_memory_start;
        break;
      }

      // optional uint64 memory_start = 2;
      case 2: {
        if (tag == 16) {
         parse_memory_start:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memory_start_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_memory_limit;
        break;
      }

      // optional uint64 memory_limit = 3;
      case 3: {
        if (tag == 24) {
         parse_memory_limit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memory_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_file_offset;
        break;
      }

      // optional uint64 file_offset = 4;
      case 4: {
        if (tag == 32) {
         parse_file_offset:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_offset_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_filename;
        break;
      }

      // optional int64 filename = 5;
      case 5: {
        if (tag == 40) {
         parse_filename:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filename_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_build_id;
        break;
      }

      // optional int64 build_id = 6;
      case 6: {
        if (tag == 48) {
         parse_build_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &build_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_has_functions;
        break;
      }

      // optional bool has_functions = 7;
      case 7: {
        if (tag == 56) {
         parse_has_functions:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_functions_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_has_filenames;
        break;
      }

      // optional bool has_filenames = 8;
      case 8: {
        if (tag == 64) {
         parse_has_filenames:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_filenames_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_has_line_numbers;
        break;
      }

      // optional bool has_line_numbers = 9;
      case 9: {
        if (tag == 72) {
         parse_has_line_numbers:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_line_numbers_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_has_inline_frames;
        break;
      }

      // optional bool has_inline_frames = 10;
      case 10: {
        if (tag == 80) {
         parse_has_inline_frames:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_inline_frames_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.pprof.Mapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.pprof.Mapping)
  return false;
#undef DO_
}

void Mapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.pprof.Mapping)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 memory_start = 2;
  if (this->memory_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->memory_start(), output);
  }

  // optional uint64 memory_limit = 3;
  if (this->memory_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->memory_limit(), output);
  }

  // optional uint64 file_offset = 4;
  if (this->file_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->file_offset(), output);
  }

  // optional int64 filename = 5;
  if (this->filename() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->filename(), output);
  }

  // optional int64 build_id = 6;
  if (this->build_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->build_id(), output);
  }

  // optional bool has_functions = 7;
  if (this->has_functions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_functions(), output);
  }

  // optional bool has_filenames = 8;
  if (this->has_filenames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->has_filenames(), output);
  }

  // optional bool has_line_numbers = 9;
  if (this->has_line_numbers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->has_line_numbers(), output);
  }

  // optional bool has_inline_frames = 10;
  if (this->has_inline_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->has_inline_frames(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.pprof.Mapping)
}

::google::protobuf::uint8* Mapping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.pprof.Mapping)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 memory_start = 2;
  if (this->memory_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->memory_start(), target);
  }

  // optional uint64 memory_limit = 3;
  if (this->memory_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->memory_limit(), target);
  }

  // optional uint64 file_offset = 4;
  if (this->file_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->file_offset(), target);
  }

  // optional int64 filename = 5;
  if (this->filename() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->filename(), target);
  }

  // optional int64 build_id = 6;
  if (this->build_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->build_id(), target);
  }

  // optional bool has_functions = 7;
  if (this->has_functions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_functions(), target);
  }

  // optional bool has_filenames = 8;
  if (this->has_filenames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->has_filenames(), target);
  }

  // optional bool has_line_numbers = 9;
  if (this->has_line_numbers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->has_line_numbers(), target);
  }

  // optional bool has_inline_frames = 10;
  if (this->has_inline_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->has_inline_frames(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.pprof.Mapping)
  return target;
}

size_t Mapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.pprof.Mapping)
  size_t total_size = 0;

  // optional uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // optional uint64 memory_start = 2;
  if (this->memory_start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->memory_start());
  }

  // optional uint64 memory_limit = 3;
  if (this->memory_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->memory_limit());
  }

  // optional uint64 file_offset = 4;
  if (this->file_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->file_offset());
  }

  // optional int64 filename = 5;
  if (this->filename() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->filename());
  }

  // optional int64 build_id = 6;
  if (this->build_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->build_id());
  }

  // optional bool has_functions = 7;
  if (this->has_functions() != 0) {
    total_size += 1 + 1;
  }

  // optional bool has_filenames = 8;
  if (this->has_filenames() != 0) {
    total_size += 1 + 1;
  }

  // optional bool has_line_numbers = 9;
  if (this->has_line_numbers() != 0) {
    total_size += 1 + 1;
  }

  // optional bool has_inline_frames = 10;
  if (this->has_inline_frames() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mapping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.pprof.Mapping)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Mapping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mapping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.pprof.Mapping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.pprof.Mapping)
    UnsafeMergeFrom(*source);
  }
}

void Mapping::MergeFrom(const Mapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.pprof.Mapping)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Mapping::UnsafeMergeFrom(const Mapping& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.memory_start() != 0) {
    set_memory_start(from.memory_start());
  }
  if (from.memory_limit() != 0) {
    set_memory_limit(from.memory_limit());
  }
  if (from.file_offset() != 0) {
    set_file_offset(from.file_offset());
  }
  if (from.filename() != 0) {
    set_filename(from.filename());
  }
  if (from.build_id() != 0) {
    set_build_id(from.build_id());
  }
  if (from.has_functions() != 0) {
    set_has_functions(from.has_functions());
  }
  if (from.has_filenames() != 0) {
    set_has_filenames(from.has_filenames());
  }
  if (from.has_line_numbers() != 0) {
    set_has_line_numbers(from.has_line_numbers());
  }
  if (from.has_inline_frames() != 0) {
    set_has_inline_frames(from.has_inline_frames());
  }
}

void Mapping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.pprof.Mapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mapping::CopyFrom(const Mapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.pprof.Mapping)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Mapping::IsInitialized() const {

  return true;
}

void Mapping::Swap(Mapping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mapping::InternalSwap(Mapping* other) {
  std::swap(id_, other->id_);
  std::swap(memory_start_, other->memory_start_);
  std::swap(memory_limit_, other->memory_limit_);
  std::swap(file_offset_, other->file_offset_);
  std::swap(filename_, other->filename_);
  std::swap(build_id_, other->build_id_);
  std::swap(has_functions_, other->has_functions_);
  std::swap(has_filenames_, other->has_filenames_);
  std::swap(has_line_numbers_, other->has_line_numbers_);
  std::swap(has_inline_frames_, other->has_inline_frames_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mapping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mapping_descriptor_;
  metadata.reflection = Mapping_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mapping

// optional uint64 id = 1;
void Mapping::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Mapping::id() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Mapping.id)
  return id_;
}
void Mapping::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Mapping.id)
}

// optional uint64 memory_start = 2;
void Mapping::clear_memory_start() {
  memory_start_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Mapping::memory_start() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Mapping.memory_start)
  return memory_start_;
}
void Mapping::set_memory_start(::google::protobuf::uint64 value) {
  
  memory_start_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Mapping.memory_start)
}

// optional uint64 memory_limit = 3;
void Mapping::clear_memory_limit() {
  memory_limit_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Mapping::memory_limit() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Mapping.memory_limit)
  return memory_limit_;
}
void Mapping::set_memory_limit(::google::protobuf::uint64 value) {
  
  memory_limit_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Mapping.memory_limit)
}

// optional uint64 file_offset = 4;
void Mapping::clear_file_offset() {
  file_offset_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Mapping::file_offset() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Mapping.file_offset)
  return file_offset_;
}
void Mapping::set_file_offset(::google::protobuf::uint64 value) {
  
  file_offset_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Mapping.file_offset)
}

// optional int64 filename = 5;
void Mapping::clear_filename() {
  filename_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Mapping::filename() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Mapping.filename)
  return filename_;
}
void Mapping::set_filename(::google::protobuf::int64 value) {
  
  filename_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Mapping.filename)
}

// optional int64 build_id = 6;
void Mapping::clear_build_id() {
  build_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Mapping::build_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Mapping.build_id)
  return build_id_;
}
void Mapping::set_build_id(::google::protobuf::int64 value) {
  
  build_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Mapping.build_id)
}

// optional bool has_functions = 7;
void Mapping::clear_has_functions() {
  has_functions_ = false;
}
bool Mapping::has_functions() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Mapping.has_functions)
  return has_functions_;
}
void Mapping::set_has_functions(bool value) {
  
  has_functions_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Mapping.has_functions)
}

// optional bool has_filenames = 8;
void Mapping::clear_has_filenames() {
  has_filenames_ = false;
}
bool Mapping::has_filenames() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Mapping.has_filenames)
  return has_filenames_;
}
void Mapping::set_has_filenames(bool value) {
  
  has_filenames_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Mapping.has_filenames)
}

// optional bool has_line_numbers = 9;
void Mapping::clear_has_line_numbers() {
  has_line_numbers_ = false;
}
bool Mapping::has_line_numbers() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Mapping.has_line_numbers)
  return has_line_numbers_;
}
void Mapping::set_has_line_numbers(bool value) {
  
  has_line_numbers_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Mapping.has_line_numbers)
}

// optional bool has_inline_frames = 10;
void Mapping::clear_has_inline_frames() {
  has_inline_frames_ = false;
}
bool Mapping::has_inline_frames() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Mapping.has_inline_frames)
  return has_inline_frames_;
}
void Mapping::set_has_inline_frames(bool value) {
  
  has_inline_frames_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Mapping.has_inline_frames)
}

inline const Mapping* Mapping::internal_default_instance() {
  return &Mapping_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Location::kIdFieldNumber;
const int Location::kMappingIdFieldNumber;
const int Location::kAddressFieldNumber;
const int Location::kLineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Location::Location()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.pprof.Location)
}

void Location::InitAsDefaultInstance() {
}

Location::Location(const Location& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.pprof.Location)
}

void Location::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&address_) -
    reinterpret_cast<char*>(&id_) + sizeof(address_));
  _cached_size_ = 0;
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.pprof.Location)
  SharedDtor();
}

void Location::SharedDtor() {
}

void Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Location_descriptor_;
}

const Location& Location::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Location> Location_default_instance_;

Location* Location::New(::google::protobuf::Arena* arena) const {
  Location* n = new Location;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.pprof.Location)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Location, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Location*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, address_);

#undef ZR_HELPER_
#undef ZR_

  line_.Clear();
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.pprof.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapping_id;
        break;
      }

      // optional uint64 mapping_id = 2;
      case 2: {
        if (tag == 16) {
         parse_mapping_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapping_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_address;
        break;
      }

      // optional uint64 address = 3;
      case 3: {
        if (tag == 24) {
         parse_address:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_line;
        break;
      }

      // repeated .tensorflow.tfprof.pprof.Line line = 4;
      case 4: {
        if (tag == 34) {
         parse_line:
          DO_(input->IncrementRecursionDepth());
         parse_loop_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_line()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_line;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.pprof.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.pprof.Location)
  return false;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.pprof.Location)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 mapping_id = 2;
  if (this->mapping_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mapping_id(), output);
  }

  // optional uint64 address = 3;
  if (this->address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->address(), output);
  }

  // repeated .tensorflow.tfprof.pprof.Line line = 4;
  for (unsigned int i = 0, n = this->line_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->line(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.pprof.Location)
}

::google::protobuf::uint8* Location::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.pprof.Location)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 mapping_id = 2;
  if (this->mapping_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mapping_id(), target);
  }

  // optional uint64 address = 3;
  if (this->address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->address(), target);
  }

  // repeated .tensorflow.tfprof.pprof.Line line = 4;
  for (unsigned int i = 0, n = this->line_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->line(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.pprof.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.pprof.Location)
  size_t total_size = 0;

  // optional uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // optional uint64 mapping_id = 2;
  if (this->mapping_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mapping_id());
  }

  // optional uint64 address = 3;
  if (this->address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->address());
  }

  // repeated .tensorflow.tfprof.pprof.Line line = 4;
  {
    unsigned int count = this->line_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->line(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.pprof.Location)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Location* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Location>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.pprof.Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.pprof.Location)
    UnsafeMergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.pprof.Location)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Location::UnsafeMergeFrom(const Location& from) {
  GOOGLE_DCHECK(&from != this);
  line_.MergeFrom(from.line_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.mapping_id() != 0) {
    set_mapping_id(from.mapping_id());
  }
  if (from.address() != 0) {
    set_address(from.address());
  }
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.pprof.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.pprof.Location)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Location::IsInitialized() const {

  return true;
}

void Location::Swap(Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Location::InternalSwap(Location* other) {
  std::swap(id_, other->id_);
  std::swap(mapping_id_, other->mapping_id_);
  std::swap(address_, other->address_);
  line_.UnsafeArenaSwap(&other->line_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Location::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Location_descriptor_;
  metadata.reflection = Location_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Location

// optional uint64 id = 1;
void Location::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Location::id() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Location.id)
  return id_;
}
void Location::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Location.id)
}

// optional uint64 mapping_id = 2;
void Location::clear_mapping_id() {
  mapping_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Location::mapping_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Location.mapping_id)
  return mapping_id_;
}
void Location::set_mapping_id(::google::protobuf::uint64 value) {
  
  mapping_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Location.mapping_id)
}

// optional uint64 address = 3;
void Location::clear_address() {
  address_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Location::address() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Location.address)
  return address_;
}
void Location::set_address(::google::protobuf::uint64 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Location.address)
}

// repeated .tensorflow.tfprof.pprof.Line line = 4;
int Location::line_size() const {
  return line_.size();
}
void Location::clear_line() {
  line_.Clear();
}
const ::tensorflow::tfprof::pprof::Line& Location::line(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Location.line)
  return line_.Get(index);
}
::tensorflow::tfprof::pprof::Line* Location::mutable_line(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.pprof.Location.line)
  return line_.Mutable(index);
}
::tensorflow::tfprof::pprof::Line* Location::add_line() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.pprof.Location.line)
  return line_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::pprof::Line >*
Location::mutable_line() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.pprof.Location.line)
  return &line_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::pprof::Line >&
Location::line() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.pprof.Location.line)
  return line_;
}

inline const Location* Location::internal_default_instance() {
  return &Location_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Line::kFunctionIdFieldNumber;
const int Line::kLineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Line::Line()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.pprof.Line)
}

void Line::InitAsDefaultInstance() {
}

Line::Line(const Line& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.pprof.Line)
}

void Line::SharedCtor() {
  ::memset(&function_id_, 0, reinterpret_cast<char*>(&line_) -
    reinterpret_cast<char*>(&function_id_) + sizeof(line_));
  _cached_size_ = 0;
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.pprof.Line)
  SharedDtor();
}

void Line::SharedDtor() {
}

void Line::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Line::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Line_descriptor_;
}

const Line& Line::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Line> Line_default_instance_;

Line* Line::New(::google::protobuf::Arena* arena) const {
  Line* n = new Line;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.pprof.Line)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Line, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Line*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(function_id_, line_);

#undef ZR_HELPER_
#undef ZR_

}

bool Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.pprof.Line)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 function_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &function_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_line;
        break;
      }

      // optional int64 line = 2;
      case 2: {
        if (tag == 16) {
         parse_line:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &line_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.pprof.Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.pprof.Line)
  return false;
#undef DO_
}

void Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.pprof.Line)
  // optional uint64 function_id = 1;
  if (this->function_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->function_id(), output);
  }

  // optional int64 line = 2;
  if (this->line() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->line(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.pprof.Line)
}

::google::protobuf::uint8* Line::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.pprof.Line)
  // optional uint64 function_id = 1;
  if (this->function_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->function_id(), target);
  }

  // optional int64 line = 2;
  if (this->line() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->line(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.pprof.Line)
  return target;
}

size_t Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.pprof.Line)
  size_t total_size = 0;

  // optional uint64 function_id = 1;
  if (this->function_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->function_id());
  }

  // optional int64 line = 2;
  if (this->line() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->line());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Line::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.pprof.Line)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Line* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Line>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.pprof.Line)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.pprof.Line)
    UnsafeMergeFrom(*source);
  }
}

void Line::MergeFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.pprof.Line)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Line::UnsafeMergeFrom(const Line& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.function_id() != 0) {
    set_function_id(from.function_id());
  }
  if (from.line() != 0) {
    set_line(from.line());
  }
}

void Line::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.pprof.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.pprof.Line)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Line::IsInitialized() const {

  return true;
}

void Line::Swap(Line* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Line::InternalSwap(Line* other) {
  std::swap(function_id_, other->function_id_);
  std::swap(line_, other->line_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Line::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Line_descriptor_;
  metadata.reflection = Line_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Line

// optional uint64 function_id = 1;
void Line::clear_function_id() {
  function_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Line::function_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Line.function_id)
  return function_id_;
}
void Line::set_function_id(::google::protobuf::uint64 value) {
  
  function_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Line.function_id)
}

// optional int64 line = 2;
void Line::clear_line() {
  line_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Line::line() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Line.line)
  return line_;
}
void Line::set_line(::google::protobuf::int64 value) {
  
  line_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Line.line)
}

inline const Line* Line::internal_default_instance() {
  return &Line_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Function::kIdFieldNumber;
const int Function::kNameFieldNumber;
const int Function::kSystemNameFieldNumber;
const int Function::kFilenameFieldNumber;
const int Function::kStartLineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Function::Function()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.pprof.Function)
}

void Function::InitAsDefaultInstance() {
}

Function::Function(const Function& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.pprof.Function)
}

void Function::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&start_line_) -
    reinterpret_cast<char*>(&id_) + sizeof(start_line_));
  _cached_size_ = 0;
}

Function::~Function() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.pprof.Function)
  SharedDtor();
}

void Function::SharedDtor() {
}

void Function::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Function::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Function_descriptor_;
}

const Function& Function::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2fprofile_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Function> Function_default_instance_;

Function* Function::New(::google::protobuf::Arena* arena) const {
  Function* n = new Function;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Function::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.pprof.Function)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Function, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Function*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, start_line_);

#undef ZR_HELPER_
#undef ZR_

}

bool Function::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.pprof.Function)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_name;
        break;
      }

      // optional int64 name = 2;
      case 2: {
        if (tag == 16) {
         parse_name:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &name_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_system_name;
        break;
      }

      // optional int64 system_name = 3;
      case 3: {
        if (tag == 24) {
         parse_system_name:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &system_name_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_filename;
        break;
      }

      // optional int64 filename = 4;
      case 4: {
        if (tag == 32) {
         parse_filename:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filename_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_start_line;
        break;
      }

      // optional int64 start_line = 5;
      case 5: {
        if (tag == 40) {
         parse_start_line:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_line_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.pprof.Function)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.pprof.Function)
  return false;
#undef DO_
}

void Function::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.pprof.Function)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional int64 name = 2;
  if (this->name() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->name(), output);
  }

  // optional int64 system_name = 3;
  if (this->system_name() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->system_name(), output);
  }

  // optional int64 filename = 4;
  if (this->filename() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->filename(), output);
  }

  // optional int64 start_line = 5;
  if (this->start_line() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->start_line(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.pprof.Function)
}

::google::protobuf::uint8* Function::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.pprof.Function)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional int64 name = 2;
  if (this->name() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->name(), target);
  }

  // optional int64 system_name = 3;
  if (this->system_name() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->system_name(), target);
  }

  // optional int64 filename = 4;
  if (this->filename() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->filename(), target);
  }

  // optional int64 start_line = 5;
  if (this->start_line() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->start_line(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.pprof.Function)
  return target;
}

size_t Function::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.pprof.Function)
  size_t total_size = 0;

  // optional uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // optional int64 name = 2;
  if (this->name() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->name());
  }

  // optional int64 system_name = 3;
  if (this->system_name() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->system_name());
  }

  // optional int64 filename = 4;
  if (this->filename() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->filename());
  }

  // optional int64 start_line = 5;
  if (this->start_line() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start_line());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Function::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.pprof.Function)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Function* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Function>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.pprof.Function)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.pprof.Function)
    UnsafeMergeFrom(*source);
  }
}

void Function::MergeFrom(const Function& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.pprof.Function)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Function::UnsafeMergeFrom(const Function& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name() != 0) {
    set_name(from.name());
  }
  if (from.system_name() != 0) {
    set_system_name(from.system_name());
  }
  if (from.filename() != 0) {
    set_filename(from.filename());
  }
  if (from.start_line() != 0) {
    set_start_line(from.start_line());
  }
}

void Function::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.pprof.Function)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Function::CopyFrom(const Function& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.pprof.Function)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Function::IsInitialized() const {

  return true;
}

void Function::Swap(Function* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Function::InternalSwap(Function* other) {
  std::swap(id_, other->id_);
  std::swap(name_, other->name_);
  std::swap(system_name_, other->system_name_);
  std::swap(filename_, other->filename_);
  std::swap(start_line_, other->start_line_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Function::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Function_descriptor_;
  metadata.reflection = Function_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Function

// optional uint64 id = 1;
void Function::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Function::id() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Function.id)
  return id_;
}
void Function::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Function.id)
}

// optional int64 name = 2;
void Function::clear_name() {
  name_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Function::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Function.name)
  return name_;
}
void Function::set_name(::google::protobuf::int64 value) {
  
  name_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Function.name)
}

// optional int64 system_name = 3;
void Function::clear_system_name() {
  system_name_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Function::system_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Function.system_name)
  return system_name_;
}
void Function::set_system_name(::google::protobuf::int64 value) {
  
  system_name_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Function.system_name)
}

// optional int64 filename = 4;
void Function::clear_filename() {
  filename_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Function::filename() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Function.filename)
  return filename_;
}
void Function::set_filename(::google::protobuf::int64 value) {
  
  filename_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Function.filename)
}

// optional int64 start_line = 5;
void Function::clear_start_line() {
  start_line_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Function::start_line() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.pprof.Function.start_line)
  return start_line_;
}
void Function::set_start_line(::google::protobuf::int64 value) {
  
  start_line_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.pprof.Function.start_line)
}

inline const Function* Function::internal_default_instance() {
  return &Function_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pprof
}  // namespace tfprof
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
