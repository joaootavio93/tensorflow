// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/tfprof_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/profiler/tfprof_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace tfprof {

namespace {

const ::google::protobuf::Descriptor* OptionsProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptionsProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvisorOptionsProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvisorOptionsProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvisorOptionsProto_CheckersEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AdvisorOptionsProto_CheckerOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvisorOptionsProto_CheckerOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvisorOptionsProto_CheckerOption_OptionsEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/profiler/tfprof_options.proto");
  GOOGLE_CHECK(file != NULL);
  OptionsProto_descriptor_ = file->message_type(0);
  static const int OptionsProto_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, max_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, min_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, min_peak_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, min_residual_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, min_output_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, min_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, min_accelerator_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, min_cpu_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, min_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, min_float_ops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, min_occurrence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, order_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, account_type_regexes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, start_name_regexes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, trim_name_regexes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, show_name_regexes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, hide_name_regexes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, account_displayed_op_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, select_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, dump_to_file_),
  };
  OptionsProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OptionsProto_descriptor_,
      OptionsProto::internal_default_instance(),
      OptionsProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(OptionsProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, _internal_metadata_));
  AdvisorOptionsProto_descriptor_ = file->message_type(1);
  static const int AdvisorOptionsProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvisorOptionsProto, checkers_),
  };
  AdvisorOptionsProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdvisorOptionsProto_descriptor_,
      AdvisorOptionsProto::internal_default_instance(),
      AdvisorOptionsProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdvisorOptionsProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvisorOptionsProto, _internal_metadata_));
  AdvisorOptionsProto_CheckersEntry_descriptor_ = AdvisorOptionsProto_descriptor_->nested_type(0);
  AdvisorOptionsProto_CheckerOption_descriptor_ = AdvisorOptionsProto_descriptor_->nested_type(1);
  static const int AdvisorOptionsProto_CheckerOption_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvisorOptionsProto_CheckerOption, options_),
  };
  AdvisorOptionsProto_CheckerOption_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdvisorOptionsProto_CheckerOption_descriptor_,
      AdvisorOptionsProto_CheckerOption::internal_default_instance(),
      AdvisorOptionsProto_CheckerOption_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdvisorOptionsProto_CheckerOption),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvisorOptionsProto_CheckerOption, _internal_metadata_));
  AdvisorOptionsProto_CheckerOption_OptionsEntry_descriptor_ = AdvisorOptionsProto_CheckerOption_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OptionsProto_descriptor_, OptionsProto::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdvisorOptionsProto_descriptor_, AdvisorOptionsProto::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        AdvisorOptionsProto_CheckersEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                AdvisorOptionsProto_CheckersEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdvisorOptionsProto_CheckerOption_descriptor_, AdvisorOptionsProto_CheckerOption::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        AdvisorOptionsProto_CheckerOption_OptionsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                AdvisorOptionsProto_CheckerOption_OptionsEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto() {
  OptionsProto_default_instance_.Shutdown();
  delete OptionsProto_reflection_;
  AdvisorOptionsProto_default_instance_.Shutdown();
  delete AdvisorOptionsProto_reflection_;
  AdvisorOptionsProto_CheckerOption_default_instance_.Shutdown();
  delete AdvisorOptionsProto_CheckerOption_reflection_;
}

void protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  OptionsProto_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AdvisorOptionsProto_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ::google::protobuf::internal::GetEmptyString();
  AdvisorOptionsProto_CheckerOption_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  OptionsProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  AdvisorOptionsProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  AdvisorOptionsProto_CheckerOption_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto_once_);
void protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto_once_,
                 &protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto_impl);
}
void protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n-tensorflow/core/profiler/tfprof_option"
    "s.proto\022\021tensorflow.tfprof\"\225\004\n\014OptionsPr"
    "oto\022\021\n\tmax_depth\030\001 \001(\003\022\021\n\tmin_bytes\030\002 \001("
    "\003\022\026\n\016min_peak_bytes\030\023 \001(\003\022\032\n\022min_residua"
    "l_bytes\030\024 \001(\003\022\030\n\020min_output_bytes\030\025 \001(\003\022"
    "\022\n\nmin_micros\030\003 \001(\003\022\036\n\026min_accelerator_m"
    "icros\030\026 \001(\003\022\026\n\016min_cpu_micros\030\027 \001(\003\022\022\n\nm"
    "in_params\030\004 \001(\003\022\025\n\rmin_float_ops\030\005 \001(\003\022\026"
    "\n\016min_occurrence\030\021 \001(\003\022\014\n\004step\030\022 \001(\003\022\020\n\010"
    "order_by\030\007 \001(\t\022\034\n\024account_type_regexes\030\010"
    " \003(\t\022\032\n\022start_name_regexes\030\t \003(\t\022\031\n\021trim"
    "_name_regexes\030\n \003(\t\022\031\n\021show_name_regexes"
    "\030\013 \003(\t\022\031\n\021hide_name_regexes\030\014 \003(\t\022!\n\031acc"
    "ount_displayed_op_only\030\r \001(\010\022\016\n\006select\030\016"
    " \003(\t\022\016\n\006output\030\017 \001(\t\022\024\n\014dump_to_file\030\020 \001"
    "(\t\"\332\002\n\023AdvisorOptionsProto\022F\n\010checkers\030\001"
    " \003(\01324.tensorflow.tfprof.AdvisorOptionsP"
    "roto.CheckersEntry\032e\n\rCheckersEntry\022\013\n\003k"
    "ey\030\001 \001(\t\022C\n\005value\030\002 \001(\01324.tensorflow.tfp"
    "rof.AdvisorOptionsProto.CheckerOption:\0028"
    "\001\032\223\001\n\rCheckerOption\022R\n\007options\030\001 \003(\0132A.t"
    "ensorflow.tfprof.AdvisorOptionsProto.Che"
    "ckerOption.OptionsEntry\032.\n\014OptionsEntry\022"
    "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001b\006proto3", 959);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/profiler/tfprof_options.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto_once_);
void protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto_once_,
                 &protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionsProto::kMaxDepthFieldNumber;
const int OptionsProto::kMinBytesFieldNumber;
const int OptionsProto::kMinPeakBytesFieldNumber;
const int OptionsProto::kMinResidualBytesFieldNumber;
const int OptionsProto::kMinOutputBytesFieldNumber;
const int OptionsProto::kMinMicrosFieldNumber;
const int OptionsProto::kMinAcceleratorMicrosFieldNumber;
const int OptionsProto::kMinCpuMicrosFieldNumber;
const int OptionsProto::kMinParamsFieldNumber;
const int OptionsProto::kMinFloatOpsFieldNumber;
const int OptionsProto::kMinOccurrenceFieldNumber;
const int OptionsProto::kStepFieldNumber;
const int OptionsProto::kOrderByFieldNumber;
const int OptionsProto::kAccountTypeRegexesFieldNumber;
const int OptionsProto::kStartNameRegexesFieldNumber;
const int OptionsProto::kTrimNameRegexesFieldNumber;
const int OptionsProto::kShowNameRegexesFieldNumber;
const int OptionsProto::kHideNameRegexesFieldNumber;
const int OptionsProto::kAccountDisplayedOpOnlyFieldNumber;
const int OptionsProto::kSelectFieldNumber;
const int OptionsProto::kOutputFieldNumber;
const int OptionsProto::kDumpToFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionsProto::OptionsProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.OptionsProto)
}

void OptionsProto::InitAsDefaultInstance() {
}

OptionsProto::OptionsProto(const OptionsProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.OptionsProto)
}

void OptionsProto::SharedCtor() {
  order_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dump_to_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_depth_, 0, reinterpret_cast<char*>(&account_displayed_op_only_) -
    reinterpret_cast<char*>(&max_depth_) + sizeof(account_displayed_op_only_));
  _cached_size_ = 0;
}

OptionsProto::~OptionsProto() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.OptionsProto)
  SharedDtor();
}

void OptionsProto::SharedDtor() {
  order_by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dump_to_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionsProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptionsProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptionsProto_descriptor_;
}

const OptionsProto& OptionsProto::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OptionsProto> OptionsProto_default_instance_;

OptionsProto* OptionsProto::New(::google::protobuf::Arena* arena) const {
  OptionsProto* n = new OptionsProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.OptionsProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OptionsProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OptionsProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(max_depth_, min_cpu_micros_);
  ZR_(min_params_, step_);
  order_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_displayed_op_only_ = false;
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dump_to_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  account_type_regexes_.Clear();
  start_name_regexes_.Clear();
  trim_name_regexes_.Clear();
  show_name_regexes_.Clear();
  hide_name_regexes_.Clear();
  select_.Clear();
}

bool OptionsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.OptionsProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 max_depth = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_depth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min_bytes;
        break;
      }

      // optional int64 min_bytes = 2;
      case 2: {
        if (tag == 16) {
         parse_min_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_min_micros;
        break;
      }

      // optional int64 min_micros = 3;
      case 3: {
        if (tag == 24) {
         parse_min_micros:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_min_params;
        break;
      }

      // optional int64 min_params = 4;
      case 4: {
        if (tag == 32) {
         parse_min_params:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_params_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_min_float_ops;
        break;
      }

      // optional int64 min_float_ops = 5;
      case 5: {
        if (tag == 40) {
         parse_min_float_ops:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_float_ops_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_order_by;
        break;
      }

      // optional string order_by = 7;
      case 7: {
        if (tag == 58) {
         parse_order_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_by()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->order_by().data(), this->order_by().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.OptionsProto.order_by"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_account_type_regexes;
        break;
      }

      // repeated string account_type_regexes = 8;
      case 8: {
        if (tag == 66) {
         parse_account_type_regexes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_account_type_regexes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_type_regexes(this->account_type_regexes_size() - 1).data(),
            this->account_type_regexes(this->account_type_regexes_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.OptionsProto.account_type_regexes"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_account_type_regexes;
        if (input->ExpectTag(74)) goto parse_start_name_regexes;
        break;
      }

      // repeated string start_name_regexes = 9;
      case 9: {
        if (tag == 74) {
         parse_start_name_regexes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_start_name_regexes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start_name_regexes(this->start_name_regexes_size() - 1).data(),
            this->start_name_regexes(this->start_name_regexes_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.OptionsProto.start_name_regexes"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_start_name_regexes;
        if (input->ExpectTag(82)) goto parse_trim_name_regexes;
        break;
      }

      // repeated string trim_name_regexes = 10;
      case 10: {
        if (tag == 82) {
         parse_trim_name_regexes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_trim_name_regexes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trim_name_regexes(this->trim_name_regexes_size() - 1).data(),
            this->trim_name_regexes(this->trim_name_regexes_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.OptionsProto.trim_name_regexes"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_trim_name_regexes;
        if (input->ExpectTag(90)) goto parse_show_name_regexes;
        break;
      }

      // repeated string show_name_regexes = 11;
      case 11: {
        if (tag == 90) {
         parse_show_name_regexes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_show_name_regexes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->show_name_regexes(this->show_name_regexes_size() - 1).data(),
            this->show_name_regexes(this->show_name_regexes_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.OptionsProto.show_name_regexes"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_show_name_regexes;
        if (input->ExpectTag(98)) goto parse_hide_name_regexes;
        break;
      }

      // repeated string hide_name_regexes = 12;
      case 12: {
        if (tag == 98) {
         parse_hide_name_regexes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hide_name_regexes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hide_name_regexes(this->hide_name_regexes_size() - 1).data(),
            this->hide_name_regexes(this->hide_name_regexes_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.OptionsProto.hide_name_regexes"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_hide_name_regexes;
        if (input->ExpectTag(104)) goto parse_account_displayed_op_only;
        break;
      }

      // optional bool account_displayed_op_only = 13;
      case 13: {
        if (tag == 104) {
         parse_account_displayed_op_only:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &account_displayed_op_only_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_select;
        break;
      }

      // repeated string select = 14;
      case 14: {
        if (tag == 114) {
         parse_select:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_select()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->select(this->select_size() - 1).data(),
            this->select(this->select_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.OptionsProto.select"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_select;
        if (input->ExpectTag(122)) goto parse_output;
        break;
      }

      // optional string output = 15;
      case 15: {
        if (tag == 122) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output().data(), this->output().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.OptionsProto.output"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_dump_to_file;
        break;
      }

      // optional string dump_to_file = 16;
      case 16: {
        if (tag == 130) {
         parse_dump_to_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dump_to_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dump_to_file().data(), this->dump_to_file().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.OptionsProto.dump_to_file"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_min_occurrence;
        break;
      }

      // optional int64 min_occurrence = 17;
      case 17: {
        if (tag == 136) {
         parse_min_occurrence:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_occurrence_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_step;
        break;
      }

      // optional int64 step = 18;
      case 18: {
        if (tag == 144) {
         parse_step:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_min_peak_bytes;
        break;
      }

      // optional int64 min_peak_bytes = 19;
      case 19: {
        if (tag == 152) {
         parse_min_peak_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_peak_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_min_residual_bytes;
        break;
      }

      // optional int64 min_residual_bytes = 20;
      case 20: {
        if (tag == 160) {
         parse_min_residual_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_residual_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_min_output_bytes;
        break;
      }

      // optional int64 min_output_bytes = 21;
      case 21: {
        if (tag == 168) {
         parse_min_output_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_output_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_min_accelerator_micros;
        break;
      }

      // optional int64 min_accelerator_micros = 22;
      case 22: {
        if (tag == 176) {
         parse_min_accelerator_micros:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_accelerator_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_min_cpu_micros;
        break;
      }

      // optional int64 min_cpu_micros = 23;
      case 23: {
        if (tag == 184) {
         parse_min_cpu_micros:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_cpu_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.OptionsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.OptionsProto)
  return false;
#undef DO_
}

void OptionsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.OptionsProto)
  // optional int64 max_depth = 1;
  if (this->max_depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->max_depth(), output);
  }

  // optional int64 min_bytes = 2;
  if (this->min_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->min_bytes(), output);
  }

  // optional int64 min_micros = 3;
  if (this->min_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->min_micros(), output);
  }

  // optional int64 min_params = 4;
  if (this->min_params() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->min_params(), output);
  }

  // optional int64 min_float_ops = 5;
  if (this->min_float_ops() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->min_float_ops(), output);
  }

  // optional string order_by = 7;
  if (this->order_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_by().data(), this->order_by().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.order_by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->order_by(), output);
  }

  // repeated string account_type_regexes = 8;
  for (int i = 0; i < this->account_type_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_type_regexes(i).data(), this->account_type_regexes(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.account_type_regexes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->account_type_regexes(i), output);
  }

  // repeated string start_name_regexes = 9;
  for (int i = 0; i < this->start_name_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_name_regexes(i).data(), this->start_name_regexes(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.start_name_regexes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->start_name_regexes(i), output);
  }

  // repeated string trim_name_regexes = 10;
  for (int i = 0; i < this->trim_name_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trim_name_regexes(i).data(), this->trim_name_regexes(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.trim_name_regexes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->trim_name_regexes(i), output);
  }

  // repeated string show_name_regexes = 11;
  for (int i = 0; i < this->show_name_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->show_name_regexes(i).data(), this->show_name_regexes(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.show_name_regexes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->show_name_regexes(i), output);
  }

  // repeated string hide_name_regexes = 12;
  for (int i = 0; i < this->hide_name_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hide_name_regexes(i).data(), this->hide_name_regexes(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.hide_name_regexes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->hide_name_regexes(i), output);
  }

  // optional bool account_displayed_op_only = 13;
  if (this->account_displayed_op_only() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->account_displayed_op_only(), output);
  }

  // repeated string select = 14;
  for (int i = 0; i < this->select_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->select(i).data(), this->select(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.select");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->select(i), output);
  }

  // optional string output = 15;
  if (this->output().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output().data(), this->output().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.output");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->output(), output);
  }

  // optional string dump_to_file = 16;
  if (this->dump_to_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dump_to_file().data(), this->dump_to_file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.dump_to_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->dump_to_file(), output);
  }

  // optional int64 min_occurrence = 17;
  if (this->min_occurrence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->min_occurrence(), output);
  }

  // optional int64 step = 18;
  if (this->step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->step(), output);
  }

  // optional int64 min_peak_bytes = 19;
  if (this->min_peak_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->min_peak_bytes(), output);
  }

  // optional int64 min_residual_bytes = 20;
  if (this->min_residual_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->min_residual_bytes(), output);
  }

  // optional int64 min_output_bytes = 21;
  if (this->min_output_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->min_output_bytes(), output);
  }

  // optional int64 min_accelerator_micros = 22;
  if (this->min_accelerator_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->min_accelerator_micros(), output);
  }

  // optional int64 min_cpu_micros = 23;
  if (this->min_cpu_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->min_cpu_micros(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.OptionsProto)
}

::google::protobuf::uint8* OptionsProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.OptionsProto)
  // optional int64 max_depth = 1;
  if (this->max_depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->max_depth(), target);
  }

  // optional int64 min_bytes = 2;
  if (this->min_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->min_bytes(), target);
  }

  // optional int64 min_micros = 3;
  if (this->min_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->min_micros(), target);
  }

  // optional int64 min_params = 4;
  if (this->min_params() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->min_params(), target);
  }

  // optional int64 min_float_ops = 5;
  if (this->min_float_ops() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->min_float_ops(), target);
  }

  // optional string order_by = 7;
  if (this->order_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_by().data(), this->order_by().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.order_by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->order_by(), target);
  }

  // repeated string account_type_regexes = 8;
  for (int i = 0; i < this->account_type_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_type_regexes(i).data(), this->account_type_regexes(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.account_type_regexes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->account_type_regexes(i), target);
  }

  // repeated string start_name_regexes = 9;
  for (int i = 0; i < this->start_name_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_name_regexes(i).data(), this->start_name_regexes(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.start_name_regexes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->start_name_regexes(i), target);
  }

  // repeated string trim_name_regexes = 10;
  for (int i = 0; i < this->trim_name_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trim_name_regexes(i).data(), this->trim_name_regexes(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.trim_name_regexes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->trim_name_regexes(i), target);
  }

  // repeated string show_name_regexes = 11;
  for (int i = 0; i < this->show_name_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->show_name_regexes(i).data(), this->show_name_regexes(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.show_name_regexes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->show_name_regexes(i), target);
  }

  // repeated string hide_name_regexes = 12;
  for (int i = 0; i < this->hide_name_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hide_name_regexes(i).data(), this->hide_name_regexes(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.hide_name_regexes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->hide_name_regexes(i), target);
  }

  // optional bool account_displayed_op_only = 13;
  if (this->account_displayed_op_only() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->account_displayed_op_only(), target);
  }

  // repeated string select = 14;
  for (int i = 0; i < this->select_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->select(i).data(), this->select(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.select");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->select(i), target);
  }

  // optional string output = 15;
  if (this->output().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output().data(), this->output().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.output");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->output(), target);
  }

  // optional string dump_to_file = 16;
  if (this->dump_to_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dump_to_file().data(), this->dump_to_file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.dump_to_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->dump_to_file(), target);
  }

  // optional int64 min_occurrence = 17;
  if (this->min_occurrence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->min_occurrence(), target);
  }

  // optional int64 step = 18;
  if (this->step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->step(), target);
  }

  // optional int64 min_peak_bytes = 19;
  if (this->min_peak_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->min_peak_bytes(), target);
  }

  // optional int64 min_residual_bytes = 20;
  if (this->min_residual_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->min_residual_bytes(), target);
  }

  // optional int64 min_output_bytes = 21;
  if (this->min_output_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->min_output_bytes(), target);
  }

  // optional int64 min_accelerator_micros = 22;
  if (this->min_accelerator_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->min_accelerator_micros(), target);
  }

  // optional int64 min_cpu_micros = 23;
  if (this->min_cpu_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->min_cpu_micros(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.OptionsProto)
  return target;
}

size_t OptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.OptionsProto)
  size_t total_size = 0;

  // optional int64 max_depth = 1;
  if (this->max_depth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_depth());
  }

  // optional int64 min_bytes = 2;
  if (this->min_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->min_bytes());
  }

  // optional int64 min_peak_bytes = 19;
  if (this->min_peak_bytes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->min_peak_bytes());
  }

  // optional int64 min_residual_bytes = 20;
  if (this->min_residual_bytes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->min_residual_bytes());
  }

  // optional int64 min_output_bytes = 21;
  if (this->min_output_bytes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->min_output_bytes());
  }

  // optional int64 min_micros = 3;
  if (this->min_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->min_micros());
  }

  // optional int64 min_accelerator_micros = 22;
  if (this->min_accelerator_micros() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->min_accelerator_micros());
  }

  // optional int64 min_cpu_micros = 23;
  if (this->min_cpu_micros() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->min_cpu_micros());
  }

  // optional int64 min_params = 4;
  if (this->min_params() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->min_params());
  }

  // optional int64 min_float_ops = 5;
  if (this->min_float_ops() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->min_float_ops());
  }

  // optional int64 min_occurrence = 17;
  if (this->min_occurrence() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->min_occurrence());
  }

  // optional int64 step = 18;
  if (this->step() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->step());
  }

  // optional string order_by = 7;
  if (this->order_by().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_by());
  }

  // optional bool account_displayed_op_only = 13;
  if (this->account_displayed_op_only() != 0) {
    total_size += 1 + 1;
  }

  // optional string output = 15;
  if (this->output().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output());
  }

  // optional string dump_to_file = 16;
  if (this->dump_to_file().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dump_to_file());
  }

  // repeated string account_type_regexes = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->account_type_regexes_size());
  for (int i = 0; i < this->account_type_regexes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->account_type_regexes(i));
  }

  // repeated string start_name_regexes = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->start_name_regexes_size());
  for (int i = 0; i < this->start_name_regexes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->start_name_regexes(i));
  }

  // repeated string trim_name_regexes = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->trim_name_regexes_size());
  for (int i = 0; i < this->trim_name_regexes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->trim_name_regexes(i));
  }

  // repeated string show_name_regexes = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->show_name_regexes_size());
  for (int i = 0; i < this->show_name_regexes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->show_name_regexes(i));
  }

  // repeated string hide_name_regexes = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hide_name_regexes_size());
  for (int i = 0; i < this->hide_name_regexes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hide_name_regexes(i));
  }

  // repeated string select = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->select_size());
  for (int i = 0; i < this->select_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->select(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptionsProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.OptionsProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OptionsProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionsProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.OptionsProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.OptionsProto)
    UnsafeMergeFrom(*source);
  }
}

void OptionsProto::MergeFrom(const OptionsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.OptionsProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OptionsProto::UnsafeMergeFrom(const OptionsProto& from) {
  GOOGLE_DCHECK(&from != this);
  account_type_regexes_.UnsafeMergeFrom(from.account_type_regexes_);
  start_name_regexes_.UnsafeMergeFrom(from.start_name_regexes_);
  trim_name_regexes_.UnsafeMergeFrom(from.trim_name_regexes_);
  show_name_regexes_.UnsafeMergeFrom(from.show_name_regexes_);
  hide_name_regexes_.UnsafeMergeFrom(from.hide_name_regexes_);
  select_.UnsafeMergeFrom(from.select_);
  if (from.max_depth() != 0) {
    set_max_depth(from.max_depth());
  }
  if (from.min_bytes() != 0) {
    set_min_bytes(from.min_bytes());
  }
  if (from.min_peak_bytes() != 0) {
    set_min_peak_bytes(from.min_peak_bytes());
  }
  if (from.min_residual_bytes() != 0) {
    set_min_residual_bytes(from.min_residual_bytes());
  }
  if (from.min_output_bytes() != 0) {
    set_min_output_bytes(from.min_output_bytes());
  }
  if (from.min_micros() != 0) {
    set_min_micros(from.min_micros());
  }
  if (from.min_accelerator_micros() != 0) {
    set_min_accelerator_micros(from.min_accelerator_micros());
  }
  if (from.min_cpu_micros() != 0) {
    set_min_cpu_micros(from.min_cpu_micros());
  }
  if (from.min_params() != 0) {
    set_min_params(from.min_params());
  }
  if (from.min_float_ops() != 0) {
    set_min_float_ops(from.min_float_ops());
  }
  if (from.min_occurrence() != 0) {
    set_min_occurrence(from.min_occurrence());
  }
  if (from.step() != 0) {
    set_step(from.step());
  }
  if (from.order_by().size() > 0) {

    order_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_by_);
  }
  if (from.account_displayed_op_only() != 0) {
    set_account_displayed_op_only(from.account_displayed_op_only());
  }
  if (from.output().size() > 0) {

    output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
  if (from.dump_to_file().size() > 0) {

    dump_to_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dump_to_file_);
  }
}

void OptionsProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.OptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionsProto::CopyFrom(const OptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.OptionsProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OptionsProto::IsInitialized() const {

  return true;
}

void OptionsProto::Swap(OptionsProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionsProto::InternalSwap(OptionsProto* other) {
  std::swap(max_depth_, other->max_depth_);
  std::swap(min_bytes_, other->min_bytes_);
  std::swap(min_peak_bytes_, other->min_peak_bytes_);
  std::swap(min_residual_bytes_, other->min_residual_bytes_);
  std::swap(min_output_bytes_, other->min_output_bytes_);
  std::swap(min_micros_, other->min_micros_);
  std::swap(min_accelerator_micros_, other->min_accelerator_micros_);
  std::swap(min_cpu_micros_, other->min_cpu_micros_);
  std::swap(min_params_, other->min_params_);
  std::swap(min_float_ops_, other->min_float_ops_);
  std::swap(min_occurrence_, other->min_occurrence_);
  std::swap(step_, other->step_);
  order_by_.Swap(&other->order_by_);
  account_type_regexes_.UnsafeArenaSwap(&other->account_type_regexes_);
  start_name_regexes_.UnsafeArenaSwap(&other->start_name_regexes_);
  trim_name_regexes_.UnsafeArenaSwap(&other->trim_name_regexes_);
  show_name_regexes_.UnsafeArenaSwap(&other->show_name_regexes_);
  hide_name_regexes_.UnsafeArenaSwap(&other->hide_name_regexes_);
  std::swap(account_displayed_op_only_, other->account_displayed_op_only_);
  select_.UnsafeArenaSwap(&other->select_);
  output_.Swap(&other->output_);
  dump_to_file_.Swap(&other->dump_to_file_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OptionsProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptionsProto_descriptor_;
  metadata.reflection = OptionsProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OptionsProto

// optional int64 max_depth = 1;
void OptionsProto::clear_max_depth() {
  max_depth_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OptionsProto::max_depth() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.max_depth)
  return max_depth_;
}
void OptionsProto::set_max_depth(::google::protobuf::int64 value) {
  
  max_depth_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.max_depth)
}

// optional int64 min_bytes = 2;
void OptionsProto::clear_min_bytes() {
  min_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OptionsProto::min_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.min_bytes)
  return min_bytes_;
}
void OptionsProto::set_min_bytes(::google::protobuf::int64 value) {
  
  min_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.min_bytes)
}

// optional int64 min_peak_bytes = 19;
void OptionsProto::clear_min_peak_bytes() {
  min_peak_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OptionsProto::min_peak_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.min_peak_bytes)
  return min_peak_bytes_;
}
void OptionsProto::set_min_peak_bytes(::google::protobuf::int64 value) {
  
  min_peak_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.min_peak_bytes)
}

// optional int64 min_residual_bytes = 20;
void OptionsProto::clear_min_residual_bytes() {
  min_residual_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OptionsProto::min_residual_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.min_residual_bytes)
  return min_residual_bytes_;
}
void OptionsProto::set_min_residual_bytes(::google::protobuf::int64 value) {
  
  min_residual_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.min_residual_bytes)
}

// optional int64 min_output_bytes = 21;
void OptionsProto::clear_min_output_bytes() {
  min_output_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OptionsProto::min_output_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.min_output_bytes)
  return min_output_bytes_;
}
void OptionsProto::set_min_output_bytes(::google::protobuf::int64 value) {
  
  min_output_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.min_output_bytes)
}

// optional int64 min_micros = 3;
void OptionsProto::clear_min_micros() {
  min_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OptionsProto::min_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.min_micros)
  return min_micros_;
}
void OptionsProto::set_min_micros(::google::protobuf::int64 value) {
  
  min_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.min_micros)
}

// optional int64 min_accelerator_micros = 22;
void OptionsProto::clear_min_accelerator_micros() {
  min_accelerator_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OptionsProto::min_accelerator_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.min_accelerator_micros)
  return min_accelerator_micros_;
}
void OptionsProto::set_min_accelerator_micros(::google::protobuf::int64 value) {
  
  min_accelerator_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.min_accelerator_micros)
}

// optional int64 min_cpu_micros = 23;
void OptionsProto::clear_min_cpu_micros() {
  min_cpu_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OptionsProto::min_cpu_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.min_cpu_micros)
  return min_cpu_micros_;
}
void OptionsProto::set_min_cpu_micros(::google::protobuf::int64 value) {
  
  min_cpu_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.min_cpu_micros)
}

// optional int64 min_params = 4;
void OptionsProto::clear_min_params() {
  min_params_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OptionsProto::min_params() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.min_params)
  return min_params_;
}
void OptionsProto::set_min_params(::google::protobuf::int64 value) {
  
  min_params_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.min_params)
}

// optional int64 min_float_ops = 5;
void OptionsProto::clear_min_float_ops() {
  min_float_ops_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OptionsProto::min_float_ops() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.min_float_ops)
  return min_float_ops_;
}
void OptionsProto::set_min_float_ops(::google::protobuf::int64 value) {
  
  min_float_ops_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.min_float_ops)
}

// optional int64 min_occurrence = 17;
void OptionsProto::clear_min_occurrence() {
  min_occurrence_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OptionsProto::min_occurrence() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.min_occurrence)
  return min_occurrence_;
}
void OptionsProto::set_min_occurrence(::google::protobuf::int64 value) {
  
  min_occurrence_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.min_occurrence)
}

// optional int64 step = 18;
void OptionsProto::clear_step() {
  step_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OptionsProto::step() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.step)
  return step_;
}
void OptionsProto::set_step(::google::protobuf::int64 value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.step)
}

// optional string order_by = 7;
void OptionsProto::clear_order_by() {
  order_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OptionsProto::order_by() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.order_by)
  return order_by_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionsProto::set_order_by(const ::std::string& value) {
  
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.order_by)
}
void OptionsProto::set_order_by(const char* value) {
  
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.order_by)
}
void OptionsProto::set_order_by(const char* value, size_t size) {
  
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.order_by)
}
::std::string* OptionsProto::mutable_order_by() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.order_by)
  return order_by_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OptionsProto::release_order_by() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.OptionsProto.order_by)
  
  return order_by_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionsProto::set_allocated_order_by(::std::string* order_by) {
  if (order_by != NULL) {
    
  } else {
    
  }
  order_by_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_by);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.OptionsProto.order_by)
}

// repeated string account_type_regexes = 8;
int OptionsProto::account_type_regexes_size() const {
  return account_type_regexes_.size();
}
void OptionsProto::clear_account_type_regexes() {
  account_type_regexes_.Clear();
}
const ::std::string& OptionsProto::account_type_regexes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.account_type_regexes)
  return account_type_regexes_.Get(index);
}
::std::string* OptionsProto::mutable_account_type_regexes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.account_type_regexes)
  return account_type_regexes_.Mutable(index);
}
void OptionsProto::set_account_type_regexes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.account_type_regexes)
  account_type_regexes_.Mutable(index)->assign(value);
}
void OptionsProto::set_account_type_regexes(int index, const char* value) {
  account_type_regexes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.account_type_regexes)
}
void OptionsProto::set_account_type_regexes(int index, const char* value, size_t size) {
  account_type_regexes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.account_type_regexes)
}
::std::string* OptionsProto::add_account_type_regexes() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OptionsProto.account_type_regexes)
  return account_type_regexes_.Add();
}
void OptionsProto::add_account_type_regexes(const ::std::string& value) {
  account_type_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OptionsProto.account_type_regexes)
}
void OptionsProto::add_account_type_regexes(const char* value) {
  account_type_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OptionsProto.account_type_regexes)
}
void OptionsProto::add_account_type_regexes(const char* value, size_t size) {
  account_type_regexes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OptionsProto.account_type_regexes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionsProto::account_type_regexes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OptionsProto.account_type_regexes)
  return account_type_regexes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
OptionsProto::mutable_account_type_regexes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OptionsProto.account_type_regexes)
  return &account_type_regexes_;
}

// repeated string start_name_regexes = 9;
int OptionsProto::start_name_regexes_size() const {
  return start_name_regexes_.size();
}
void OptionsProto::clear_start_name_regexes() {
  start_name_regexes_.Clear();
}
const ::std::string& OptionsProto::start_name_regexes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.start_name_regexes)
  return start_name_regexes_.Get(index);
}
::std::string* OptionsProto::mutable_start_name_regexes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.start_name_regexes)
  return start_name_regexes_.Mutable(index);
}
void OptionsProto::set_start_name_regexes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.start_name_regexes)
  start_name_regexes_.Mutable(index)->assign(value);
}
void OptionsProto::set_start_name_regexes(int index, const char* value) {
  start_name_regexes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.start_name_regexes)
}
void OptionsProto::set_start_name_regexes(int index, const char* value, size_t size) {
  start_name_regexes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.start_name_regexes)
}
::std::string* OptionsProto::add_start_name_regexes() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OptionsProto.start_name_regexes)
  return start_name_regexes_.Add();
}
void OptionsProto::add_start_name_regexes(const ::std::string& value) {
  start_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OptionsProto.start_name_regexes)
}
void OptionsProto::add_start_name_regexes(const char* value) {
  start_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OptionsProto.start_name_regexes)
}
void OptionsProto::add_start_name_regexes(const char* value, size_t size) {
  start_name_regexes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OptionsProto.start_name_regexes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionsProto::start_name_regexes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OptionsProto.start_name_regexes)
  return start_name_regexes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
OptionsProto::mutable_start_name_regexes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OptionsProto.start_name_regexes)
  return &start_name_regexes_;
}

// repeated string trim_name_regexes = 10;
int OptionsProto::trim_name_regexes_size() const {
  return trim_name_regexes_.size();
}
void OptionsProto::clear_trim_name_regexes() {
  trim_name_regexes_.Clear();
}
const ::std::string& OptionsProto::trim_name_regexes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.trim_name_regexes)
  return trim_name_regexes_.Get(index);
}
::std::string* OptionsProto::mutable_trim_name_regexes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.trim_name_regexes)
  return trim_name_regexes_.Mutable(index);
}
void OptionsProto::set_trim_name_regexes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.trim_name_regexes)
  trim_name_regexes_.Mutable(index)->assign(value);
}
void OptionsProto::set_trim_name_regexes(int index, const char* value) {
  trim_name_regexes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.trim_name_regexes)
}
void OptionsProto::set_trim_name_regexes(int index, const char* value, size_t size) {
  trim_name_regexes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.trim_name_regexes)
}
::std::string* OptionsProto::add_trim_name_regexes() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OptionsProto.trim_name_regexes)
  return trim_name_regexes_.Add();
}
void OptionsProto::add_trim_name_regexes(const ::std::string& value) {
  trim_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OptionsProto.trim_name_regexes)
}
void OptionsProto::add_trim_name_regexes(const char* value) {
  trim_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OptionsProto.trim_name_regexes)
}
void OptionsProto::add_trim_name_regexes(const char* value, size_t size) {
  trim_name_regexes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OptionsProto.trim_name_regexes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionsProto::trim_name_regexes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OptionsProto.trim_name_regexes)
  return trim_name_regexes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
OptionsProto::mutable_trim_name_regexes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OptionsProto.trim_name_regexes)
  return &trim_name_regexes_;
}

// repeated string show_name_regexes = 11;
int OptionsProto::show_name_regexes_size() const {
  return show_name_regexes_.size();
}
void OptionsProto::clear_show_name_regexes() {
  show_name_regexes_.Clear();
}
const ::std::string& OptionsProto::show_name_regexes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.show_name_regexes)
  return show_name_regexes_.Get(index);
}
::std::string* OptionsProto::mutable_show_name_regexes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.show_name_regexes)
  return show_name_regexes_.Mutable(index);
}
void OptionsProto::set_show_name_regexes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.show_name_regexes)
  show_name_regexes_.Mutable(index)->assign(value);
}
void OptionsProto::set_show_name_regexes(int index, const char* value) {
  show_name_regexes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.show_name_regexes)
}
void OptionsProto::set_show_name_regexes(int index, const char* value, size_t size) {
  show_name_regexes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.show_name_regexes)
}
::std::string* OptionsProto::add_show_name_regexes() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OptionsProto.show_name_regexes)
  return show_name_regexes_.Add();
}
void OptionsProto::add_show_name_regexes(const ::std::string& value) {
  show_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OptionsProto.show_name_regexes)
}
void OptionsProto::add_show_name_regexes(const char* value) {
  show_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OptionsProto.show_name_regexes)
}
void OptionsProto::add_show_name_regexes(const char* value, size_t size) {
  show_name_regexes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OptionsProto.show_name_regexes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionsProto::show_name_regexes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OptionsProto.show_name_regexes)
  return show_name_regexes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
OptionsProto::mutable_show_name_regexes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OptionsProto.show_name_regexes)
  return &show_name_regexes_;
}

// repeated string hide_name_regexes = 12;
int OptionsProto::hide_name_regexes_size() const {
  return hide_name_regexes_.size();
}
void OptionsProto::clear_hide_name_regexes() {
  hide_name_regexes_.Clear();
}
const ::std::string& OptionsProto::hide_name_regexes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.hide_name_regexes)
  return hide_name_regexes_.Get(index);
}
::std::string* OptionsProto::mutable_hide_name_regexes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.hide_name_regexes)
  return hide_name_regexes_.Mutable(index);
}
void OptionsProto::set_hide_name_regexes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.hide_name_regexes)
  hide_name_regexes_.Mutable(index)->assign(value);
}
void OptionsProto::set_hide_name_regexes(int index, const char* value) {
  hide_name_regexes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.hide_name_regexes)
}
void OptionsProto::set_hide_name_regexes(int index, const char* value, size_t size) {
  hide_name_regexes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.hide_name_regexes)
}
::std::string* OptionsProto::add_hide_name_regexes() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OptionsProto.hide_name_regexes)
  return hide_name_regexes_.Add();
}
void OptionsProto::add_hide_name_regexes(const ::std::string& value) {
  hide_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OptionsProto.hide_name_regexes)
}
void OptionsProto::add_hide_name_regexes(const char* value) {
  hide_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OptionsProto.hide_name_regexes)
}
void OptionsProto::add_hide_name_regexes(const char* value, size_t size) {
  hide_name_regexes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OptionsProto.hide_name_regexes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionsProto::hide_name_regexes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OptionsProto.hide_name_regexes)
  return hide_name_regexes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
OptionsProto::mutable_hide_name_regexes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OptionsProto.hide_name_regexes)
  return &hide_name_regexes_;
}

// optional bool account_displayed_op_only = 13;
void OptionsProto::clear_account_displayed_op_only() {
  account_displayed_op_only_ = false;
}
bool OptionsProto::account_displayed_op_only() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.account_displayed_op_only)
  return account_displayed_op_only_;
}
void OptionsProto::set_account_displayed_op_only(bool value) {
  
  account_displayed_op_only_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.account_displayed_op_only)
}

// repeated string select = 14;
int OptionsProto::select_size() const {
  return select_.size();
}
void OptionsProto::clear_select() {
  select_.Clear();
}
const ::std::string& OptionsProto::select(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.select)
  return select_.Get(index);
}
::std::string* OptionsProto::mutable_select(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.select)
  return select_.Mutable(index);
}
void OptionsProto::set_select(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.select)
  select_.Mutable(index)->assign(value);
}
void OptionsProto::set_select(int index, const char* value) {
  select_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.select)
}
void OptionsProto::set_select(int index, const char* value, size_t size) {
  select_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.select)
}
::std::string* OptionsProto::add_select() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OptionsProto.select)
  return select_.Add();
}
void OptionsProto::add_select(const ::std::string& value) {
  select_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OptionsProto.select)
}
void OptionsProto::add_select(const char* value) {
  select_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OptionsProto.select)
}
void OptionsProto::add_select(const char* value, size_t size) {
  select_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OptionsProto.select)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionsProto::select() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OptionsProto.select)
  return select_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
OptionsProto::mutable_select() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OptionsProto.select)
  return &select_;
}

// optional string output = 15;
void OptionsProto::clear_output() {
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OptionsProto::output() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.output)
  return output_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionsProto::set_output(const ::std::string& value) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.output)
}
void OptionsProto::set_output(const char* value) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.output)
}
void OptionsProto::set_output(const char* value, size_t size) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.output)
}
::std::string* OptionsProto::mutable_output() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.output)
  return output_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OptionsProto::release_output() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.OptionsProto.output)
  
  return output_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionsProto::set_allocated_output(::std::string* output) {
  if (output != NULL) {
    
  } else {
    
  }
  output_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.OptionsProto.output)
}

// optional string dump_to_file = 16;
void OptionsProto::clear_dump_to_file() {
  dump_to_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OptionsProto::dump_to_file() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.dump_to_file)
  return dump_to_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionsProto::set_dump_to_file(const ::std::string& value) {
  
  dump_to_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.dump_to_file)
}
void OptionsProto::set_dump_to_file(const char* value) {
  
  dump_to_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.dump_to_file)
}
void OptionsProto::set_dump_to_file(const char* value, size_t size) {
  
  dump_to_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.dump_to_file)
}
::std::string* OptionsProto::mutable_dump_to_file() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.dump_to_file)
  return dump_to_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OptionsProto::release_dump_to_file() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.OptionsProto.dump_to_file)
  
  return dump_to_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionsProto::set_allocated_dump_to_file(::std::string* dump_to_file) {
  if (dump_to_file != NULL) {
    
  } else {
    
  }
  dump_to_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dump_to_file);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.OptionsProto.dump_to_file)
}

inline const OptionsProto* OptionsProto::internal_default_instance() {
  return &OptionsProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdvisorOptionsProto_CheckerOption::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdvisorOptionsProto_CheckerOption::AdvisorOptionsProto_CheckerOption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
}

void AdvisorOptionsProto_CheckerOption::InitAsDefaultInstance() {
}

AdvisorOptionsProto_CheckerOption::AdvisorOptionsProto_CheckerOption(const AdvisorOptionsProto_CheckerOption& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
}

void AdvisorOptionsProto_CheckerOption::SharedCtor() {
  options_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  options_.SetEntryDescriptor(
      &::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption_OptionsEntry_descriptor_);
  _cached_size_ = 0;
}

AdvisorOptionsProto_CheckerOption::~AdvisorOptionsProto_CheckerOption() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  SharedDtor();
}

void AdvisorOptionsProto_CheckerOption::SharedDtor() {
}

void AdvisorOptionsProto_CheckerOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvisorOptionsProto_CheckerOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvisorOptionsProto_CheckerOption_descriptor_;
}

const AdvisorOptionsProto_CheckerOption& AdvisorOptionsProto_CheckerOption::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AdvisorOptionsProto_CheckerOption> AdvisorOptionsProto_CheckerOption_default_instance_;

AdvisorOptionsProto_CheckerOption* AdvisorOptionsProto_CheckerOption::New(::google::protobuf::Arena* arena) const {
  AdvisorOptionsProto_CheckerOption* n = new AdvisorOptionsProto_CheckerOption;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdvisorOptionsProto_CheckerOption::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  options_.Clear();
}

bool AdvisorOptionsProto_CheckerOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> options = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_options:
          AdvisorOptionsProto_CheckerOption_OptionsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&options_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.AdvisorOptionsProto.CheckerOption.OptionsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.AdvisorOptionsProto.CheckerOption.OptionsEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_options;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  return false;
#undef DO_
}

void AdvisorOptionsProto_CheckerOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  // map<string, string> options = 1;
  if (!this->options().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.AdvisorOptionsProto.CheckerOption.OptionsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.AdvisorOptionsProto.CheckerOption.OptionsEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->options().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->options().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->options().begin();
          it != this->options().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<AdvisorOptionsProto_CheckerOption_OptionsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(options_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<AdvisorOptionsProto_CheckerOption_OptionsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->options().begin();
          it != this->options().end(); ++it) {
        entry.reset(options_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
}

::google::protobuf::uint8* AdvisorOptionsProto_CheckerOption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  // map<string, string> options = 1;
  if (!this->options().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.AdvisorOptionsProto.CheckerOption.OptionsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.AdvisorOptionsProto.CheckerOption.OptionsEntry.value");
      }
    };

    if (deterministic &&
        this->options().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->options().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->options().begin();
          it != this->options().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<AdvisorOptionsProto_CheckerOption_OptionsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(options_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<AdvisorOptionsProto_CheckerOption_OptionsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->options().begin();
          it != this->options().end(); ++it) {
        entry.reset(options_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  return target;
}

size_t AdvisorOptionsProto_CheckerOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  size_t total_size = 0;

  // map<string, string> options = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->options_size());
  {
    ::google::protobuf::scoped_ptr<AdvisorOptionsProto_CheckerOption_OptionsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->options().begin();
        it != this->options().end(); ++it) {
      entry.reset(options_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvisorOptionsProto_CheckerOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdvisorOptionsProto_CheckerOption* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdvisorOptionsProto_CheckerOption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
    UnsafeMergeFrom(*source);
  }
}

void AdvisorOptionsProto_CheckerOption::MergeFrom(const AdvisorOptionsProto_CheckerOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AdvisorOptionsProto_CheckerOption::UnsafeMergeFrom(const AdvisorOptionsProto_CheckerOption& from) {
  GOOGLE_DCHECK(&from != this);
  options_.MergeFrom(from.options_);
}

void AdvisorOptionsProto_CheckerOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvisorOptionsProto_CheckerOption::CopyFrom(const AdvisorOptionsProto_CheckerOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AdvisorOptionsProto_CheckerOption::IsInitialized() const {

  return true;
}

void AdvisorOptionsProto_CheckerOption::Swap(AdvisorOptionsProto_CheckerOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdvisorOptionsProto_CheckerOption::InternalSwap(AdvisorOptionsProto_CheckerOption* other) {
  options_.Swap(&other->options_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdvisorOptionsProto_CheckerOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvisorOptionsProto_CheckerOption_descriptor_;
  metadata.reflection = AdvisorOptionsProto_CheckerOption_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdvisorOptionsProto::kCheckersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdvisorOptionsProto::AdvisorOptionsProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.AdvisorOptionsProto)
}

void AdvisorOptionsProto::InitAsDefaultInstance() {
}

AdvisorOptionsProto::AdvisorOptionsProto(const AdvisorOptionsProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.AdvisorOptionsProto)
}

void AdvisorOptionsProto::SharedCtor() {
  checkers_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  checkers_.SetEntryDescriptor(
      &::tensorflow::tfprof::AdvisorOptionsProto_CheckersEntry_descriptor_);
  _cached_size_ = 0;
}

AdvisorOptionsProto::~AdvisorOptionsProto() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.AdvisorOptionsProto)
  SharedDtor();
}

void AdvisorOptionsProto::SharedDtor() {
}

void AdvisorOptionsProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvisorOptionsProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvisorOptionsProto_descriptor_;
}

const AdvisorOptionsProto& AdvisorOptionsProto::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AdvisorOptionsProto> AdvisorOptionsProto_default_instance_;

AdvisorOptionsProto* AdvisorOptionsProto::New(::google::protobuf::Arena* arena) const {
  AdvisorOptionsProto* n = new AdvisorOptionsProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdvisorOptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.AdvisorOptionsProto)
  checkers_.Clear();
}

bool AdvisorOptionsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.AdvisorOptionsProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .tensorflow.tfprof.AdvisorOptionsProto.CheckerOption> checkers = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_checkers:
          AdvisorOptionsProto_CheckersEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption > > parser(&checkers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.AdvisorOptionsProto.CheckersEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_checkers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.AdvisorOptionsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.AdvisorOptionsProto)
  return false;
#undef DO_
}

void AdvisorOptionsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.AdvisorOptionsProto)
  // map<string, .tensorflow.tfprof.AdvisorOptionsProto.CheckerOption> checkers = 1;
  if (!this->checkers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.AdvisorOptionsProto.CheckersEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->checkers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->checkers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption >::const_iterator
          it = this->checkers().begin();
          it != this->checkers().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<AdvisorOptionsProto_CheckersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(checkers_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<AdvisorOptionsProto_CheckersEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption >::const_iterator
          it = this->checkers().begin();
          it != this->checkers().end(); ++it) {
        entry.reset(checkers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.AdvisorOptionsProto)
}

::google::protobuf::uint8* AdvisorOptionsProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.AdvisorOptionsProto)
  // map<string, .tensorflow.tfprof.AdvisorOptionsProto.CheckerOption> checkers = 1;
  if (!this->checkers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.AdvisorOptionsProto.CheckersEntry.key");
      }
    };

    if (deterministic &&
        this->checkers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->checkers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption >::const_iterator
          it = this->checkers().begin();
          it != this->checkers().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<AdvisorOptionsProto_CheckersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(checkers_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<AdvisorOptionsProto_CheckersEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption >::const_iterator
          it = this->checkers().begin();
          it != this->checkers().end(); ++it) {
        entry.reset(checkers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.AdvisorOptionsProto)
  return target;
}

size_t AdvisorOptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.AdvisorOptionsProto)
  size_t total_size = 0;

  // map<string, .tensorflow.tfprof.AdvisorOptionsProto.CheckerOption> checkers = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->checkers_size());
  {
    ::google::protobuf::scoped_ptr<AdvisorOptionsProto_CheckersEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption >::const_iterator
        it = this->checkers().begin();
        it != this->checkers().end(); ++it) {
      entry.reset(checkers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvisorOptionsProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.AdvisorOptionsProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdvisorOptionsProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdvisorOptionsProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.AdvisorOptionsProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.AdvisorOptionsProto)
    UnsafeMergeFrom(*source);
  }
}

void AdvisorOptionsProto::MergeFrom(const AdvisorOptionsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.AdvisorOptionsProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AdvisorOptionsProto::UnsafeMergeFrom(const AdvisorOptionsProto& from) {
  GOOGLE_DCHECK(&from != this);
  checkers_.MergeFrom(from.checkers_);
}

void AdvisorOptionsProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.AdvisorOptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvisorOptionsProto::CopyFrom(const AdvisorOptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.AdvisorOptionsProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AdvisorOptionsProto::IsInitialized() const {

  return true;
}

void AdvisorOptionsProto::Swap(AdvisorOptionsProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdvisorOptionsProto::InternalSwap(AdvisorOptionsProto* other) {
  checkers_.Swap(&other->checkers_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdvisorOptionsProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvisorOptionsProto_descriptor_;
  metadata.reflection = AdvisorOptionsProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdvisorOptionsProto_CheckerOption

// map<string, string> options = 1;
int AdvisorOptionsProto_CheckerOption::options_size() const {
  return options_.size();
}
void AdvisorOptionsProto_CheckerOption::clear_options() {
  options_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
AdvisorOptionsProto_CheckerOption::options() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption.options)
  return options_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
AdvisorOptionsProto_CheckerOption::mutable_options() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption.options)
  return options_.MutableMap();
}

inline const AdvisorOptionsProto_CheckerOption* AdvisorOptionsProto_CheckerOption::internal_default_instance() {
  return &AdvisorOptionsProto_CheckerOption_default_instance_.get();
}
// -------------------------------------------------------------------

// AdvisorOptionsProto

// map<string, .tensorflow.tfprof.AdvisorOptionsProto.CheckerOption> checkers = 1;
int AdvisorOptionsProto::checkers_size() const {
  return checkers_.size();
}
void AdvisorOptionsProto::clear_checkers() {
  checkers_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption >&
AdvisorOptionsProto::checkers() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.AdvisorOptionsProto.checkers)
  return checkers_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption >*
AdvisorOptionsProto::mutable_checkers() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.AdvisorOptionsProto.checkers)
  return checkers_.MutableMap();
}

inline const AdvisorOptionsProto* AdvisorOptionsProto::internal_default_instance() {
  return &AdvisorOptionsProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tfprof
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
