// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/tfprof_output.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/profiler/tfprof_output.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace tfprof {

namespace {

const ::google::protobuf::Descriptor* TFProfTensorProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFProfTensorProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GraphNodeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GraphNodeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GraphNodeProto_InputShapesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MultiGraphNodeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiGraphNodeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdviceProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdviceProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdviceProto_CheckersEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AdviceProto_Checker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdviceProto_Checker_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/profiler/tfprof_output.proto");
  GOOGLE_CHECK(file != NULL);
  TFProfTensorProto_descriptor_ = file->message_type(0);
  static const int TFProfTensorProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfTensorProto, dtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfTensorProto, value_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfTensorProto, value_int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfTensorProto, value_str_),
  };
  TFProfTensorProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TFProfTensorProto_descriptor_,
      TFProfTensorProto::internal_default_instance(),
      TFProfTensorProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(TFProfTensorProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfTensorProto, _internal_metadata_));
  GraphNodeProto_descriptor_ = file->message_type(1);
  static const int GraphNodeProto_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, tensor_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, run_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, exec_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, accelerator_exec_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, cpu_exec_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, requested_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, peak_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, residual_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, output_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, float_ops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, devices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, total_definition_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, total_run_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, total_exec_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, total_accelerator_exec_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, total_cpu_exec_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, total_requested_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, total_peak_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, total_residual_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, total_output_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, total_parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, total_float_ops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, shapes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, input_shapes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, children_),
  };
  GraphNodeProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GraphNodeProto_descriptor_,
      GraphNodeProto::internal_default_instance(),
      GraphNodeProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(GraphNodeProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphNodeProto, _internal_metadata_));
  GraphNodeProto_InputShapesEntry_descriptor_ = GraphNodeProto_descriptor_->nested_type(0);
  MultiGraphNodeProto_descriptor_ = file->message_type(2);
  static const int MultiGraphNodeProto_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, exec_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, accelerator_exec_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, cpu_exec_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, requested_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, peak_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, residual_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, output_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, float_ops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, total_exec_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, total_accelerator_exec_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, total_cpu_exec_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, total_requested_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, total_peak_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, total_residual_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, total_output_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, total_parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, total_float_ops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, graph_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, children_),
  };
  MultiGraphNodeProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultiGraphNodeProto_descriptor_,
      MultiGraphNodeProto::internal_default_instance(),
      MultiGraphNodeProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(MultiGraphNodeProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiGraphNodeProto, _internal_metadata_));
  AdviceProto_descriptor_ = file->message_type(3);
  static const int AdviceProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdviceProto, checkers_),
  };
  AdviceProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdviceProto_descriptor_,
      AdviceProto::internal_default_instance(),
      AdviceProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdviceProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdviceProto, _internal_metadata_));
  AdviceProto_CheckersEntry_descriptor_ = AdviceProto_descriptor_->nested_type(0);
  AdviceProto_Checker_descriptor_ = AdviceProto_descriptor_->nested_type(1);
  static const int AdviceProto_Checker_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdviceProto_Checker, reports_),
  };
  AdviceProto_Checker_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdviceProto_Checker_descriptor_,
      AdviceProto_Checker::internal_default_instance(),
      AdviceProto_Checker_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdviceProto_Checker),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdviceProto_Checker, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TFProfTensorProto_descriptor_, TFProfTensorProto::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GraphNodeProto_descriptor_, GraphNodeProto::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        GraphNodeProto_InputShapesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::tensorflow::TensorShapeProto,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                GraphNodeProto_InputShapesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultiGraphNodeProto_descriptor_, MultiGraphNodeProto::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdviceProto_descriptor_, AdviceProto::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        AdviceProto_CheckersEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::tensorflow::tfprof::AdviceProto_Checker,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                AdviceProto_CheckersEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdviceProto_Checker_descriptor_, AdviceProto_Checker::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto() {
  TFProfTensorProto_default_instance_.Shutdown();
  delete TFProfTensorProto_reflection_;
  GraphNodeProto_default_instance_.Shutdown();
  delete GraphNodeProto_reflection_;
  MultiGraphNodeProto_default_instance_.Shutdown();
  delete MultiGraphNodeProto_reflection_;
  AdviceProto_default_instance_.Shutdown();
  delete AdviceProto_reflection_;
  AdviceProto_Checker_default_instance_.Shutdown();
  delete AdviceProto_Checker_reflection_;
}

void protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto();
  ::tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftypes_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  TFProfTensorProto_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GraphNodeProto_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MultiGraphNodeProto_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AdviceProto_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ::google::protobuf::internal::GetEmptyString();
  AdviceProto_Checker_default_instance_.DefaultConstruct();
  TFProfTensorProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  GraphNodeProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  MultiGraphNodeProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  AdviceProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  AdviceProto_Checker_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto_once_);
void protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto_once_,
                 &protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto_impl);
}
void protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n,tensorflow/core/profiler/tfprof_output"
    ".proto\022\021tensorflow.tfprof\032,tensorflow/co"
    "re/framework/tensor_shape.proto\032%tensorf"
    "low/core/framework/types.proto\"v\n\021TFProf"
    "TensorProto\022#\n\005dtype\030\001 \001(\0162\024.tensorflow."
    "DataType\022\024\n\014value_double\030\002 \003(\001\022\023\n\013value_"
    "int64\030\003 \003(\003\022\021\n\tvalue_str\030\004 \003(\t\"\216\007\n\016Graph"
    "NodeProto\022\014\n\004name\030\001 \001(\t\022:\n\014tensor_value\030"
    "\017 \001(\0132$.tensorflow.tfprof.TFProfTensorPr"
    "oto\022\021\n\trun_count\030\025 \001(\003\022\023\n\013exec_micros\030\002 "
    "\001(\003\022\037\n\027accelerator_exec_micros\030\021 \001(\003\022\027\n\017"
    "cpu_exec_micros\030\022 \001(\003\022\027\n\017requested_bytes"
    "\030\003 \001(\003\022\022\n\npeak_bytes\030\030 \001(\003\022\026\n\016residual_b"
    "ytes\030\031 \001(\003\022\024\n\014output_bytes\030\032 \001(\003\022\022\n\npara"
    "meters\030\004 \001(\003\022\021\n\tfloat_ops\030\r \001(\003\022\017\n\007devic"
    "es\030\n \003(\t\022\036\n\026total_definition_count\030\027 \001(\003"
    "\022\027\n\017total_run_count\030\026 \001(\003\022\031\n\021total_exec_"
    "micros\030\006 \001(\003\022%\n\035total_accelerator_exec_m"
    "icros\030\023 \001(\003\022\035\n\025total_cpu_exec_micros\030\024 \001"
    "(\003\022\035\n\025total_requested_bytes\030\007 \001(\003\022\030\n\020tot"
    "al_peak_bytes\030\033 \001(\003\022\034\n\024total_residual_by"
    "tes\030\034 \001(\003\022\032\n\022total_output_bytes\030\035 \001(\003\022\030\n"
    "\020total_parameters\030\010 \001(\003\022\027\n\017total_float_o"
    "ps\030\016 \001(\003\022,\n\006shapes\030\013 \003(\0132\034.tensorflow.Te"
    "nsorShapeProto\022H\n\014input_shapes\030\020 \003(\01322.t"
    "ensorflow.tfprof.GraphNodeProto.InputSha"
    "pesEntry\0223\n\010children\030\014 \003(\0132!.tensorflow."
    "tfprof.GraphNodeProto\032P\n\020InputShapesEntr"
    "y\022\013\n\003key\030\001 \001(\005\022+\n\005value\030\002 \001(\0132\034.tensorfl"
    "ow.TensorShapeProto:\0028\001\"\355\004\n\023MultiGraphNo"
    "deProto\022\014\n\004name\030\001 \001(\t\022\023\n\013exec_micros\030\002 \001"
    "(\003\022\037\n\027accelerator_exec_micros\030\014 \001(\003\022\027\n\017c"
    "pu_exec_micros\030\r \001(\003\022\027\n\017requested_bytes\030"
    "\003 \001(\003\022\022\n\npeak_bytes\030\020 \001(\003\022\026\n\016residual_by"
    "tes\030\021 \001(\003\022\024\n\014output_bytes\030\022 \001(\003\022\022\n\nparam"
    "eters\030\004 \001(\003\022\021\n\tfloat_ops\030\005 \001(\003\022\031\n\021total_"
    "exec_micros\030\006 \001(\003\022%\n\035total_accelerator_e"
    "xec_micros\030\016 \001(\003\022\035\n\025total_cpu_exec_micro"
    "s\030\017 \001(\003\022\035\n\025total_requested_bytes\030\007 \001(\003\022\030"
    "\n\020total_peak_bytes\030\023 \001(\003\022\034\n\024total_residu"
    "al_bytes\030\024 \001(\003\022\032\n\022total_output_bytes\030\025 \001"
    "(\003\022\030\n\020total_parameters\030\010 \001(\003\022\027\n\017total_fl"
    "oat_ops\030\t \001(\003\0226\n\013graph_nodes\030\n \003(\0132!.ten"
    "sorflow.tfprof.GraphNodeProto\0228\n\010childre"
    "n\030\013 \003(\0132&.tensorflow.tfprof.MultiGraphNo"
    "deProto\"\302\001\n\013AdviceProto\022>\n\010checkers\030\001 \003("
    "\0132,.tensorflow.tfprof.AdviceProto.Checke"
    "rsEntry\032W\n\rCheckersEntry\022\013\n\003key\030\001 \001(\t\0225\n"
    "\005value\030\002 \001(\0132&.tensorflow.tfprof.AdviceP"
    "roto.Checker:\0028\001\032\032\n\007Checker\022\017\n\007reports\030\002"
    " \003(\tb\006proto3", 2012);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/profiler/tfprof_output.proto", &protobuf_RegisterTypes);
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftypes_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto_once_);
void protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto_once_,
                 &protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TFProfTensorProto::kDtypeFieldNumber;
const int TFProfTensorProto::kValueDoubleFieldNumber;
const int TFProfTensorProto::kValueInt64FieldNumber;
const int TFProfTensorProto::kValueStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFProfTensorProto::TFProfTensorProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.TFProfTensorProto)
}

void TFProfTensorProto::InitAsDefaultInstance() {
}

TFProfTensorProto::TFProfTensorProto(const TFProfTensorProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.TFProfTensorProto)
}

void TFProfTensorProto::SharedCtor() {
  dtype_ = 0;
  _cached_size_ = 0;
}

TFProfTensorProto::~TFProfTensorProto() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.TFProfTensorProto)
  SharedDtor();
}

void TFProfTensorProto::SharedDtor() {
}

void TFProfTensorProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFProfTensorProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFProfTensorProto_descriptor_;
}

const TFProfTensorProto& TFProfTensorProto::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TFProfTensorProto> TFProfTensorProto_default_instance_;

TFProfTensorProto* TFProfTensorProto::New(::google::protobuf::Arena* arena) const {
  TFProfTensorProto* n = new TFProfTensorProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFProfTensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.TFProfTensorProto)
  dtype_ = 0;
  value_double_.Clear();
  value_int64_.Clear();
  value_str_.Clear();
}

bool TFProfTensorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.TFProfTensorProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.DataType dtype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value_double;
        break;
      }

      // repeated double value_double = 2;
      case 2: {
        if (tag == 18) {
         parse_value_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_value_double())));
        } else if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_value_double())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value_int64;
        break;
      }

      // repeated int64 value_int64 = 3;
      case 3: {
        if (tag == 26) {
         parse_value_int64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_value_int64())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26, input, this->mutable_value_int64())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_value_str;
        break;
      }

      // repeated string value_str = 4;
      case 4: {
        if (tag == 34) {
         parse_value_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_value_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value_str(this->value_str_size() - 1).data(),
            this->value_str(this->value_str_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.TFProfTensorProto.value_str"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_value_str;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.TFProfTensorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.TFProfTensorProto)
  return false;
#undef DO_
}

void TFProfTensorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.TFProfTensorProto)
  // optional .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dtype(), output);
  }

  // repeated double value_double = 2;
  if (this->value_double_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_double_cached_byte_size_);
  }
  for (int i = 0; i < this->value_double_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->value_double(i), output);
  }

  // repeated int64 value_int64 = 3;
  if (this->value_int64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_int64_cached_byte_size_);
  }
  for (int i = 0; i < this->value_int64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->value_int64(i), output);
  }

  // repeated string value_str = 4;
  for (int i = 0; i < this->value_str_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value_str(i).data(), this->value_str(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.TFProfTensorProto.value_str");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->value_str(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.TFProfTensorProto)
}

::google::protobuf::uint8* TFProfTensorProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.TFProfTensorProto)
  // optional .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dtype(), target);
  }

  // repeated double value_double = 2;
  if (this->value_double_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_double_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_double_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->value_double(i), target);
  }

  // repeated int64 value_int64 = 3;
  if (this->value_int64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_int64_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_int64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->value_int64(i), target);
  }

  // repeated string value_str = 4;
  for (int i = 0; i < this->value_str_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value_str(i).data(), this->value_str(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.TFProfTensorProto.value_str");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->value_str(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.TFProfTensorProto)
  return target;
}

size_t TFProfTensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.TFProfTensorProto)
  size_t total_size = 0;

  // optional .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  // repeated double value_double = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->value_double_size();
    data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_double_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 value_int64 = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->value_int64_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->value_int64(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_int64_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string value_str = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->value_str_size());
  for (int i = 0; i < this->value_str_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->value_str(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFProfTensorProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.TFProfTensorProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TFProfTensorProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFProfTensorProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.TFProfTensorProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.TFProfTensorProto)
    UnsafeMergeFrom(*source);
  }
}

void TFProfTensorProto::MergeFrom(const TFProfTensorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.TFProfTensorProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TFProfTensorProto::UnsafeMergeFrom(const TFProfTensorProto& from) {
  GOOGLE_DCHECK(&from != this);
  value_double_.UnsafeMergeFrom(from.value_double_);
  value_int64_.UnsafeMergeFrom(from.value_int64_);
  value_str_.UnsafeMergeFrom(from.value_str_);
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void TFProfTensorProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.TFProfTensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFProfTensorProto::CopyFrom(const TFProfTensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.TFProfTensorProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TFProfTensorProto::IsInitialized() const {

  return true;
}

void TFProfTensorProto::Swap(TFProfTensorProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFProfTensorProto::InternalSwap(TFProfTensorProto* other) {
  std::swap(dtype_, other->dtype_);
  value_double_.UnsafeArenaSwap(&other->value_double_);
  value_int64_.UnsafeArenaSwap(&other->value_int64_);
  value_str_.UnsafeArenaSwap(&other->value_str_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFProfTensorProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFProfTensorProto_descriptor_;
  metadata.reflection = TFProfTensorProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TFProfTensorProto

// optional .tensorflow.DataType dtype = 1;
void TFProfTensorProto::clear_dtype() {
  dtype_ = 0;
}
::tensorflow::DataType TFProfTensorProto::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfTensorProto.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
void TFProfTensorProto::set_dtype(::tensorflow::DataType value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfTensorProto.dtype)
}

// repeated double value_double = 2;
int TFProfTensorProto::value_double_size() const {
  return value_double_.size();
}
void TFProfTensorProto::clear_value_double() {
  value_double_.Clear();
}
double TFProfTensorProto::value_double(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfTensorProto.value_double)
  return value_double_.Get(index);
}
void TFProfTensorProto::set_value_double(int index, double value) {
  value_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfTensorProto.value_double)
}
void TFProfTensorProto::add_value_double(double value) {
  value_double_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.TFProfTensorProto.value_double)
}
const ::google::protobuf::RepeatedField< double >&
TFProfTensorProto::value_double() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.TFProfTensorProto.value_double)
  return value_double_;
}
::google::protobuf::RepeatedField< double >*
TFProfTensorProto::mutable_value_double() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.TFProfTensorProto.value_double)
  return &value_double_;
}

// repeated int64 value_int64 = 3;
int TFProfTensorProto::value_int64_size() const {
  return value_int64_.size();
}
void TFProfTensorProto::clear_value_int64() {
  value_int64_.Clear();
}
::google::protobuf::int64 TFProfTensorProto::value_int64(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfTensorProto.value_int64)
  return value_int64_.Get(index);
}
void TFProfTensorProto::set_value_int64(int index, ::google::protobuf::int64 value) {
  value_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfTensorProto.value_int64)
}
void TFProfTensorProto::add_value_int64(::google::protobuf::int64 value) {
  value_int64_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.TFProfTensorProto.value_int64)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TFProfTensorProto::value_int64() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.TFProfTensorProto.value_int64)
  return value_int64_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TFProfTensorProto::mutable_value_int64() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.TFProfTensorProto.value_int64)
  return &value_int64_;
}

// repeated string value_str = 4;
int TFProfTensorProto::value_str_size() const {
  return value_str_.size();
}
void TFProfTensorProto::clear_value_str() {
  value_str_.Clear();
}
const ::std::string& TFProfTensorProto::value_str(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfTensorProto.value_str)
  return value_str_.Get(index);
}
::std::string* TFProfTensorProto::mutable_value_str(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.TFProfTensorProto.value_str)
  return value_str_.Mutable(index);
}
void TFProfTensorProto::set_value_str(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfTensorProto.value_str)
  value_str_.Mutable(index)->assign(value);
}
void TFProfTensorProto::set_value_str(int index, const char* value) {
  value_str_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.TFProfTensorProto.value_str)
}
void TFProfTensorProto::set_value_str(int index, const char* value, size_t size) {
  value_str_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.TFProfTensorProto.value_str)
}
::std::string* TFProfTensorProto::add_value_str() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.TFProfTensorProto.value_str)
  return value_str_.Add();
}
void TFProfTensorProto::add_value_str(const ::std::string& value) {
  value_str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.TFProfTensorProto.value_str)
}
void TFProfTensorProto::add_value_str(const char* value) {
  value_str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.TFProfTensorProto.value_str)
}
void TFProfTensorProto::add_value_str(const char* value, size_t size) {
  value_str_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.TFProfTensorProto.value_str)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TFProfTensorProto::value_str() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.TFProfTensorProto.value_str)
  return value_str_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TFProfTensorProto::mutable_value_str() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.TFProfTensorProto.value_str)
  return &value_str_;
}

inline const TFProfTensorProto* TFProfTensorProto::internal_default_instance() {
  return &TFProfTensorProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphNodeProto::kNameFieldNumber;
const int GraphNodeProto::kTensorValueFieldNumber;
const int GraphNodeProto::kRunCountFieldNumber;
const int GraphNodeProto::kExecMicrosFieldNumber;
const int GraphNodeProto::kAcceleratorExecMicrosFieldNumber;
const int GraphNodeProto::kCpuExecMicrosFieldNumber;
const int GraphNodeProto::kRequestedBytesFieldNumber;
const int GraphNodeProto::kPeakBytesFieldNumber;
const int GraphNodeProto::kResidualBytesFieldNumber;
const int GraphNodeProto::kOutputBytesFieldNumber;
const int GraphNodeProto::kParametersFieldNumber;
const int GraphNodeProto::kFloatOpsFieldNumber;
const int GraphNodeProto::kDevicesFieldNumber;
const int GraphNodeProto::kTotalDefinitionCountFieldNumber;
const int GraphNodeProto::kTotalRunCountFieldNumber;
const int GraphNodeProto::kTotalExecMicrosFieldNumber;
const int GraphNodeProto::kTotalAcceleratorExecMicrosFieldNumber;
const int GraphNodeProto::kTotalCpuExecMicrosFieldNumber;
const int GraphNodeProto::kTotalRequestedBytesFieldNumber;
const int GraphNodeProto::kTotalPeakBytesFieldNumber;
const int GraphNodeProto::kTotalResidualBytesFieldNumber;
const int GraphNodeProto::kTotalOutputBytesFieldNumber;
const int GraphNodeProto::kTotalParametersFieldNumber;
const int GraphNodeProto::kTotalFloatOpsFieldNumber;
const int GraphNodeProto::kShapesFieldNumber;
const int GraphNodeProto::kInputShapesFieldNumber;
const int GraphNodeProto::kChildrenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphNodeProto::GraphNodeProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.GraphNodeProto)
}

void GraphNodeProto::InitAsDefaultInstance() {
  tensor_value_ = const_cast< ::tensorflow::tfprof::TFProfTensorProto*>(
      ::tensorflow::tfprof::TFProfTensorProto::internal_default_instance());
}

GraphNodeProto::GraphNodeProto(const GraphNodeProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.GraphNodeProto)
}

void GraphNodeProto::SharedCtor() {
  input_shapes_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  input_shapes_.SetEntryDescriptor(
      &::tensorflow::tfprof::GraphNodeProto_InputShapesEntry_descriptor_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tensor_value_ = NULL;
  ::memset(&run_count_, 0, reinterpret_cast<char*>(&total_float_ops_) -
    reinterpret_cast<char*>(&run_count_) + sizeof(total_float_ops_));
  _cached_size_ = 0;
}

GraphNodeProto::~GraphNodeProto() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.GraphNodeProto)
  SharedDtor();
}

void GraphNodeProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &GraphNodeProto_default_instance_.get()) {
    delete tensor_value_;
  }
}

void GraphNodeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphNodeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GraphNodeProto_descriptor_;
}

const GraphNodeProto& GraphNodeProto::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GraphNodeProto> GraphNodeProto_default_instance_;

GraphNodeProto* GraphNodeProto::New(::google::protobuf::Arena* arena) const {
  GraphNodeProto* n = new GraphNodeProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GraphNodeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.GraphNodeProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GraphNodeProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GraphNodeProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(run_count_, peak_bytes_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && tensor_value_ != NULL) delete tensor_value_;
  tensor_value_ = NULL;
  ZR_(residual_bytes_, total_exec_micros_);
  ZR_(total_accelerator_exec_micros_, total_float_ops_);

#undef ZR_HELPER_
#undef ZR_

  devices_.Clear();
  shapes_.Clear();
  input_shapes_.Clear();
  children_.Clear();
}

bool GraphNodeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.GraphNodeProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.GraphNodeProto.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exec_micros;
        break;
      }

      // optional int64 exec_micros = 2;
      case 2: {
        if (tag == 16) {
         parse_exec_micros:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exec_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_requested_bytes;
        break;
      }

      // optional int64 requested_bytes = 3;
      case 3: {
        if (tag == 24) {
         parse_requested_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &requested_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_parameters;
        break;
      }

      // optional int64 parameters = 4;
      case 4: {
        if (tag == 32) {
         parse_parameters:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parameters_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_total_exec_micros;
        break;
      }

      // optional int64 total_exec_micros = 6;
      case 6: {
        if (tag == 48) {
         parse_total_exec_micros:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_exec_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_total_requested_bytes;
        break;
      }

      // optional int64 total_requested_bytes = 7;
      case 7: {
        if (tag == 56) {
         parse_total_requested_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_requested_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_total_parameters;
        break;
      }

      // optional int64 total_parameters = 8;
      case 8: {
        if (tag == 64) {
         parse_total_parameters:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_parameters_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_devices;
        break;
      }

      // repeated string devices = 10;
      case 10: {
        if (tag == 82) {
         parse_devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_devices()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devices(this->devices_size() - 1).data(),
            this->devices(this->devices_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.GraphNodeProto.devices"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_devices;
        if (input->ExpectTag(90)) goto parse_shapes;
        break;
      }

      // repeated .tensorflow.TensorShapeProto shapes = 11;
      case 11: {
        if (tag == 90) {
         parse_shapes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_shapes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_shapes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_shapes;
        if (input->ExpectTag(98)) goto parse_loop_children;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.tfprof.GraphNodeProto children = 12;
      case 12: {
        if (tag == 98) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_children;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(104)) goto parse_float_ops;
        break;
      }

      // optional int64 float_ops = 13;
      case 13: {
        if (tag == 104) {
         parse_float_ops:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &float_ops_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_total_float_ops;
        break;
      }

      // optional int64 total_float_ops = 14;
      case 14: {
        if (tag == 112) {
         parse_total_float_ops:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_float_ops_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_tensor_value;
        break;
      }

      // optional .tensorflow.tfprof.TFProfTensorProto tensor_value = 15;
      case 15: {
        if (tag == 122) {
         parse_tensor_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_input_shapes;
        break;
      }

      // map<int32, .tensorflow.TensorShapeProto> input_shapes = 16;
      case 16: {
        if (tag == 130) {
         parse_input_shapes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_input_shapes:
          GraphNodeProto_InputShapesEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::tensorflow::TensorShapeProto,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TensorShapeProto > > parser(&input_shapes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_loop_input_shapes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(136)) goto parse_accelerator_exec_micros;
        break;
      }

      // optional int64 accelerator_exec_micros = 17;
      case 17: {
        if (tag == 136) {
         parse_accelerator_exec_micros:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accelerator_exec_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_cpu_exec_micros;
        break;
      }

      // optional int64 cpu_exec_micros = 18;
      case 18: {
        if (tag == 144) {
         parse_cpu_exec_micros:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cpu_exec_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_total_accelerator_exec_micros;
        break;
      }

      // optional int64 total_accelerator_exec_micros = 19;
      case 19: {
        if (tag == 152) {
         parse_total_accelerator_exec_micros:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_accelerator_exec_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_total_cpu_exec_micros;
        break;
      }

      // optional int64 total_cpu_exec_micros = 20;
      case 20: {
        if (tag == 160) {
         parse_total_cpu_exec_micros:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_cpu_exec_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_run_count;
        break;
      }

      // optional int64 run_count = 21;
      case 21: {
        if (tag == 168) {
         parse_run_count:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &run_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_total_run_count;
        break;
      }

      // optional int64 total_run_count = 22;
      case 22: {
        if (tag == 176) {
         parse_total_run_count:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_run_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_total_definition_count;
        break;
      }

      // optional int64 total_definition_count = 23;
      case 23: {
        if (tag == 184) {
         parse_total_definition_count:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_definition_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_peak_bytes;
        break;
      }

      // optional int64 peak_bytes = 24;
      case 24: {
        if (tag == 192) {
         parse_peak_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &peak_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_residual_bytes;
        break;
      }

      // optional int64 residual_bytes = 25;
      case 25: {
        if (tag == 200) {
         parse_residual_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &residual_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_output_bytes;
        break;
      }

      // optional int64 output_bytes = 26;
      case 26: {
        if (tag == 208) {
         parse_output_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &output_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_total_peak_bytes;
        break;
      }

      // optional int64 total_peak_bytes = 27;
      case 27: {
        if (tag == 216) {
         parse_total_peak_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_peak_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_total_residual_bytes;
        break;
      }

      // optional int64 total_residual_bytes = 28;
      case 28: {
        if (tag == 224) {
         parse_total_residual_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_residual_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_total_output_bytes;
        break;
      }

      // optional int64 total_output_bytes = 29;
      case 29: {
        if (tag == 232) {
         parse_total_output_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_output_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.GraphNodeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.GraphNodeProto)
  return false;
#undef DO_
}

void GraphNodeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.GraphNodeProto)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.GraphNodeProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int64 exec_micros = 2;
  if (this->exec_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->exec_micros(), output);
  }

  // optional int64 requested_bytes = 3;
  if (this->requested_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->requested_bytes(), output);
  }

  // optional int64 parameters = 4;
  if (this->parameters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->parameters(), output);
  }

  // optional int64 total_exec_micros = 6;
  if (this->total_exec_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->total_exec_micros(), output);
  }

  // optional int64 total_requested_bytes = 7;
  if (this->total_requested_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->total_requested_bytes(), output);
  }

  // optional int64 total_parameters = 8;
  if (this->total_parameters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->total_parameters(), output);
  }

  // repeated string devices = 10;
  for (int i = 0; i < this->devices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devices(i).data(), this->devices(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.GraphNodeProto.devices");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->devices(i), output);
  }

  // repeated .tensorflow.TensorShapeProto shapes = 11;
  for (unsigned int i = 0, n = this->shapes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->shapes(i), output);
  }

  // repeated .tensorflow.tfprof.GraphNodeProto children = 12;
  for (unsigned int i = 0, n = this->children_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->children(i), output);
  }

  // optional int64 float_ops = 13;
  if (this->float_ops() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->float_ops(), output);
  }

  // optional int64 total_float_ops = 14;
  if (this->total_float_ops() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->total_float_ops(), output);
  }

  // optional .tensorflow.tfprof.TFProfTensorProto tensor_value = 15;
  if (this->has_tensor_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->tensor_value_, output);
  }

  // map<int32, .tensorflow.TensorShapeProto> input_shapes = 16;
  if (!this->input_shapes().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TensorShapeProto >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->input_shapes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->input_shapes().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TensorShapeProto >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TensorShapeProto >::const_iterator
          it = this->input_shapes().begin();
          it != this->input_shapes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GraphNodeProto_InputShapesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(input_shapes_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            16, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<GraphNodeProto_InputShapesEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TensorShapeProto >::const_iterator
          it = this->input_shapes().begin();
          it != this->input_shapes().end(); ++it) {
        entry.reset(input_shapes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            16, *entry, output);
      }
    }
  }

  // optional int64 accelerator_exec_micros = 17;
  if (this->accelerator_exec_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->accelerator_exec_micros(), output);
  }

  // optional int64 cpu_exec_micros = 18;
  if (this->cpu_exec_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->cpu_exec_micros(), output);
  }

  // optional int64 total_accelerator_exec_micros = 19;
  if (this->total_accelerator_exec_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->total_accelerator_exec_micros(), output);
  }

  // optional int64 total_cpu_exec_micros = 20;
  if (this->total_cpu_exec_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->total_cpu_exec_micros(), output);
  }

  // optional int64 run_count = 21;
  if (this->run_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->run_count(), output);
  }

  // optional int64 total_run_count = 22;
  if (this->total_run_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->total_run_count(), output);
  }

  // optional int64 total_definition_count = 23;
  if (this->total_definition_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->total_definition_count(), output);
  }

  // optional int64 peak_bytes = 24;
  if (this->peak_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->peak_bytes(), output);
  }

  // optional int64 residual_bytes = 25;
  if (this->residual_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->residual_bytes(), output);
  }

  // optional int64 output_bytes = 26;
  if (this->output_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->output_bytes(), output);
  }

  // optional int64 total_peak_bytes = 27;
  if (this->total_peak_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->total_peak_bytes(), output);
  }

  // optional int64 total_residual_bytes = 28;
  if (this->total_residual_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->total_residual_bytes(), output);
  }

  // optional int64 total_output_bytes = 29;
  if (this->total_output_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->total_output_bytes(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.GraphNodeProto)
}

::google::protobuf::uint8* GraphNodeProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.GraphNodeProto)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.GraphNodeProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int64 exec_micros = 2;
  if (this->exec_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->exec_micros(), target);
  }

  // optional int64 requested_bytes = 3;
  if (this->requested_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->requested_bytes(), target);
  }

  // optional int64 parameters = 4;
  if (this->parameters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->parameters(), target);
  }

  // optional int64 total_exec_micros = 6;
  if (this->total_exec_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->total_exec_micros(), target);
  }

  // optional int64 total_requested_bytes = 7;
  if (this->total_requested_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->total_requested_bytes(), target);
  }

  // optional int64 total_parameters = 8;
  if (this->total_parameters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->total_parameters(), target);
  }

  // repeated string devices = 10;
  for (int i = 0; i < this->devices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devices(i).data(), this->devices(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.GraphNodeProto.devices");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->devices(i), target);
  }

  // repeated .tensorflow.TensorShapeProto shapes = 11;
  for (unsigned int i = 0, n = this->shapes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->shapes(i), false, target);
  }

  // repeated .tensorflow.tfprof.GraphNodeProto children = 12;
  for (unsigned int i = 0, n = this->children_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->children(i), false, target);
  }

  // optional int64 float_ops = 13;
  if (this->float_ops() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->float_ops(), target);
  }

  // optional int64 total_float_ops = 14;
  if (this->total_float_ops() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->total_float_ops(), target);
  }

  // optional .tensorflow.tfprof.TFProfTensorProto tensor_value = 15;
  if (this->has_tensor_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->tensor_value_, false, target);
  }

  // map<int32, .tensorflow.TensorShapeProto> input_shapes = 16;
  if (!this->input_shapes().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TensorShapeProto >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->input_shapes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->input_shapes().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TensorShapeProto >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TensorShapeProto >::const_iterator
          it = this->input_shapes().begin();
          it != this->input_shapes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GraphNodeProto_InputShapesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(input_shapes_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       16, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<GraphNodeProto_InputShapesEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TensorShapeProto >::const_iterator
          it = this->input_shapes().begin();
          it != this->input_shapes().end(); ++it) {
        entry.reset(input_shapes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       16, *entry, deterministic, target);
;
      }
    }
  }

  // optional int64 accelerator_exec_micros = 17;
  if (this->accelerator_exec_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->accelerator_exec_micros(), target);
  }

  // optional int64 cpu_exec_micros = 18;
  if (this->cpu_exec_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->cpu_exec_micros(), target);
  }

  // optional int64 total_accelerator_exec_micros = 19;
  if (this->total_accelerator_exec_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->total_accelerator_exec_micros(), target);
  }

  // optional int64 total_cpu_exec_micros = 20;
  if (this->total_cpu_exec_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->total_cpu_exec_micros(), target);
  }

  // optional int64 run_count = 21;
  if (this->run_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->run_count(), target);
  }

  // optional int64 total_run_count = 22;
  if (this->total_run_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->total_run_count(), target);
  }

  // optional int64 total_definition_count = 23;
  if (this->total_definition_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->total_definition_count(), target);
  }

  // optional int64 peak_bytes = 24;
  if (this->peak_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->peak_bytes(), target);
  }

  // optional int64 residual_bytes = 25;
  if (this->residual_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->residual_bytes(), target);
  }

  // optional int64 output_bytes = 26;
  if (this->output_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->output_bytes(), target);
  }

  // optional int64 total_peak_bytes = 27;
  if (this->total_peak_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->total_peak_bytes(), target);
  }

  // optional int64 total_residual_bytes = 28;
  if (this->total_residual_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->total_residual_bytes(), target);
  }

  // optional int64 total_output_bytes = 29;
  if (this->total_output_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->total_output_bytes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.GraphNodeProto)
  return target;
}

size_t GraphNodeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.GraphNodeProto)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .tensorflow.tfprof.TFProfTensorProto tensor_value = 15;
  if (this->has_tensor_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tensor_value_);
  }

  // optional int64 run_count = 21;
  if (this->run_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->run_count());
  }

  // optional int64 exec_micros = 2;
  if (this->exec_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->exec_micros());
  }

  // optional int64 accelerator_exec_micros = 17;
  if (this->accelerator_exec_micros() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->accelerator_exec_micros());
  }

  // optional int64 cpu_exec_micros = 18;
  if (this->cpu_exec_micros() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cpu_exec_micros());
  }

  // optional int64 requested_bytes = 3;
  if (this->requested_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->requested_bytes());
  }

  // optional int64 peak_bytes = 24;
  if (this->peak_bytes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->peak_bytes());
  }

  // optional int64 residual_bytes = 25;
  if (this->residual_bytes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->residual_bytes());
  }

  // optional int64 output_bytes = 26;
  if (this->output_bytes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->output_bytes());
  }

  // optional int64 parameters = 4;
  if (this->parameters() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->parameters());
  }

  // optional int64 float_ops = 13;
  if (this->float_ops() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->float_ops());
  }

  // optional int64 total_definition_count = 23;
  if (this->total_definition_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_definition_count());
  }

  // optional int64 total_run_count = 22;
  if (this->total_run_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_run_count());
  }

  // optional int64 total_exec_micros = 6;
  if (this->total_exec_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_exec_micros());
  }

  // optional int64 total_accelerator_exec_micros = 19;
  if (this->total_accelerator_exec_micros() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_accelerator_exec_micros());
  }

  // optional int64 total_cpu_exec_micros = 20;
  if (this->total_cpu_exec_micros() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_cpu_exec_micros());
  }

  // optional int64 total_requested_bytes = 7;
  if (this->total_requested_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_requested_bytes());
  }

  // optional int64 total_peak_bytes = 27;
  if (this->total_peak_bytes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_peak_bytes());
  }

  // optional int64 total_residual_bytes = 28;
  if (this->total_residual_bytes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_residual_bytes());
  }

  // optional int64 total_output_bytes = 29;
  if (this->total_output_bytes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_output_bytes());
  }

  // optional int64 total_parameters = 8;
  if (this->total_parameters() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_parameters());
  }

  // optional int64 total_float_ops = 14;
  if (this->total_float_ops() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_float_ops());
  }

  // repeated string devices = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->devices_size());
  for (int i = 0; i < this->devices_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->devices(i));
  }

  // repeated .tensorflow.TensorShapeProto shapes = 11;
  {
    unsigned int count = this->shapes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shapes(i));
    }
  }

  // map<int32, .tensorflow.TensorShapeProto> input_shapes = 16;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->input_shapes_size());
  {
    ::google::protobuf::scoped_ptr<GraphNodeProto_InputShapesEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TensorShapeProto >::const_iterator
        it = this->input_shapes().begin();
        it != this->input_shapes().end(); ++it) {
      entry.reset(input_shapes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .tensorflow.tfprof.GraphNodeProto children = 12;
  {
    unsigned int count = this->children_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->children(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphNodeProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.GraphNodeProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GraphNodeProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphNodeProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.GraphNodeProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.GraphNodeProto)
    UnsafeMergeFrom(*source);
  }
}

void GraphNodeProto::MergeFrom(const GraphNodeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.GraphNodeProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GraphNodeProto::UnsafeMergeFrom(const GraphNodeProto& from) {
  GOOGLE_DCHECK(&from != this);
  devices_.UnsafeMergeFrom(from.devices_);
  shapes_.MergeFrom(from.shapes_);
  input_shapes_.MergeFrom(from.input_shapes_);
  children_.MergeFrom(from.children_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_tensor_value()) {
    mutable_tensor_value()->::tensorflow::tfprof::TFProfTensorProto::MergeFrom(from.tensor_value());
  }
  if (from.run_count() != 0) {
    set_run_count(from.run_count());
  }
  if (from.exec_micros() != 0) {
    set_exec_micros(from.exec_micros());
  }
  if (from.accelerator_exec_micros() != 0) {
    set_accelerator_exec_micros(from.accelerator_exec_micros());
  }
  if (from.cpu_exec_micros() != 0) {
    set_cpu_exec_micros(from.cpu_exec_micros());
  }
  if (from.requested_bytes() != 0) {
    set_requested_bytes(from.requested_bytes());
  }
  if (from.peak_bytes() != 0) {
    set_peak_bytes(from.peak_bytes());
  }
  if (from.residual_bytes() != 0) {
    set_residual_bytes(from.residual_bytes());
  }
  if (from.output_bytes() != 0) {
    set_output_bytes(from.output_bytes());
  }
  if (from.parameters() != 0) {
    set_parameters(from.parameters());
  }
  if (from.float_ops() != 0) {
    set_float_ops(from.float_ops());
  }
  if (from.total_definition_count() != 0) {
    set_total_definition_count(from.total_definition_count());
  }
  if (from.total_run_count() != 0) {
    set_total_run_count(from.total_run_count());
  }
  if (from.total_exec_micros() != 0) {
    set_total_exec_micros(from.total_exec_micros());
  }
  if (from.total_accelerator_exec_micros() != 0) {
    set_total_accelerator_exec_micros(from.total_accelerator_exec_micros());
  }
  if (from.total_cpu_exec_micros() != 0) {
    set_total_cpu_exec_micros(from.total_cpu_exec_micros());
  }
  if (from.total_requested_bytes() != 0) {
    set_total_requested_bytes(from.total_requested_bytes());
  }
  if (from.total_peak_bytes() != 0) {
    set_total_peak_bytes(from.total_peak_bytes());
  }
  if (from.total_residual_bytes() != 0) {
    set_total_residual_bytes(from.total_residual_bytes());
  }
  if (from.total_output_bytes() != 0) {
    set_total_output_bytes(from.total_output_bytes());
  }
  if (from.total_parameters() != 0) {
    set_total_parameters(from.total_parameters());
  }
  if (from.total_float_ops() != 0) {
    set_total_float_ops(from.total_float_ops());
  }
}

void GraphNodeProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.GraphNodeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphNodeProto::CopyFrom(const GraphNodeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.GraphNodeProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GraphNodeProto::IsInitialized() const {

  return true;
}

void GraphNodeProto::Swap(GraphNodeProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GraphNodeProto::InternalSwap(GraphNodeProto* other) {
  name_.Swap(&other->name_);
  std::swap(tensor_value_, other->tensor_value_);
  std::swap(run_count_, other->run_count_);
  std::swap(exec_micros_, other->exec_micros_);
  std::swap(accelerator_exec_micros_, other->accelerator_exec_micros_);
  std::swap(cpu_exec_micros_, other->cpu_exec_micros_);
  std::swap(requested_bytes_, other->requested_bytes_);
  std::swap(peak_bytes_, other->peak_bytes_);
  std::swap(residual_bytes_, other->residual_bytes_);
  std::swap(output_bytes_, other->output_bytes_);
  std::swap(parameters_, other->parameters_);
  std::swap(float_ops_, other->float_ops_);
  devices_.UnsafeArenaSwap(&other->devices_);
  std::swap(total_definition_count_, other->total_definition_count_);
  std::swap(total_run_count_, other->total_run_count_);
  std::swap(total_exec_micros_, other->total_exec_micros_);
  std::swap(total_accelerator_exec_micros_, other->total_accelerator_exec_micros_);
  std::swap(total_cpu_exec_micros_, other->total_cpu_exec_micros_);
  std::swap(total_requested_bytes_, other->total_requested_bytes_);
  std::swap(total_peak_bytes_, other->total_peak_bytes_);
  std::swap(total_residual_bytes_, other->total_residual_bytes_);
  std::swap(total_output_bytes_, other->total_output_bytes_);
  std::swap(total_parameters_, other->total_parameters_);
  std::swap(total_float_ops_, other->total_float_ops_);
  shapes_.UnsafeArenaSwap(&other->shapes_);
  input_shapes_.Swap(&other->input_shapes_);
  children_.UnsafeArenaSwap(&other->children_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphNodeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GraphNodeProto_descriptor_;
  metadata.reflection = GraphNodeProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphNodeProto

// optional string name = 1;
void GraphNodeProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GraphNodeProto::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GraphNodeProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.name)
}
void GraphNodeProto::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.GraphNodeProto.name)
}
void GraphNodeProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.GraphNodeProto.name)
}
::std::string* GraphNodeProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.GraphNodeProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GraphNodeProto::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.GraphNodeProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GraphNodeProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.GraphNodeProto.name)
}

// optional .tensorflow.tfprof.TFProfTensorProto tensor_value = 15;
bool GraphNodeProto::has_tensor_value() const {
  return this != internal_default_instance() && tensor_value_ != NULL;
}
void GraphNodeProto::clear_tensor_value() {
  if (GetArenaNoVirtual() == NULL && tensor_value_ != NULL) delete tensor_value_;
  tensor_value_ = NULL;
}
const ::tensorflow::tfprof::TFProfTensorProto& GraphNodeProto::tensor_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.tensor_value)
  return tensor_value_ != NULL ? *tensor_value_
                         : *::tensorflow::tfprof::TFProfTensorProto::internal_default_instance();
}
::tensorflow::tfprof::TFProfTensorProto* GraphNodeProto::mutable_tensor_value() {
  
  if (tensor_value_ == NULL) {
    tensor_value_ = new ::tensorflow::tfprof::TFProfTensorProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.GraphNodeProto.tensor_value)
  return tensor_value_;
}
::tensorflow::tfprof::TFProfTensorProto* GraphNodeProto::release_tensor_value() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.GraphNodeProto.tensor_value)
  
  ::tensorflow::tfprof::TFProfTensorProto* temp = tensor_value_;
  tensor_value_ = NULL;
  return temp;
}
void GraphNodeProto::set_allocated_tensor_value(::tensorflow::tfprof::TFProfTensorProto* tensor_value) {
  delete tensor_value_;
  tensor_value_ = tensor_value;
  if (tensor_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.GraphNodeProto.tensor_value)
}

// optional int64 run_count = 21;
void GraphNodeProto::clear_run_count() {
  run_count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GraphNodeProto::run_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.run_count)
  return run_count_;
}
void GraphNodeProto::set_run_count(::google::protobuf::int64 value) {
  
  run_count_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.run_count)
}

// optional int64 exec_micros = 2;
void GraphNodeProto::clear_exec_micros() {
  exec_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GraphNodeProto::exec_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.exec_micros)
  return exec_micros_;
}
void GraphNodeProto::set_exec_micros(::google::protobuf::int64 value) {
  
  exec_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.exec_micros)
}

// optional int64 accelerator_exec_micros = 17;
void GraphNodeProto::clear_accelerator_exec_micros() {
  accelerator_exec_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GraphNodeProto::accelerator_exec_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.accelerator_exec_micros)
  return accelerator_exec_micros_;
}
void GraphNodeProto::set_accelerator_exec_micros(::google::protobuf::int64 value) {
  
  accelerator_exec_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.accelerator_exec_micros)
}

// optional int64 cpu_exec_micros = 18;
void GraphNodeProto::clear_cpu_exec_micros() {
  cpu_exec_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GraphNodeProto::cpu_exec_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.cpu_exec_micros)
  return cpu_exec_micros_;
}
void GraphNodeProto::set_cpu_exec_micros(::google::protobuf::int64 value) {
  
  cpu_exec_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.cpu_exec_micros)
}

// optional int64 requested_bytes = 3;
void GraphNodeProto::clear_requested_bytes() {
  requested_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GraphNodeProto::requested_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.requested_bytes)
  return requested_bytes_;
}
void GraphNodeProto::set_requested_bytes(::google::protobuf::int64 value) {
  
  requested_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.requested_bytes)
}

// optional int64 peak_bytes = 24;
void GraphNodeProto::clear_peak_bytes() {
  peak_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GraphNodeProto::peak_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.peak_bytes)
  return peak_bytes_;
}
void GraphNodeProto::set_peak_bytes(::google::protobuf::int64 value) {
  
  peak_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.peak_bytes)
}

// optional int64 residual_bytes = 25;
void GraphNodeProto::clear_residual_bytes() {
  residual_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GraphNodeProto::residual_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.residual_bytes)
  return residual_bytes_;
}
void GraphNodeProto::set_residual_bytes(::google::protobuf::int64 value) {
  
  residual_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.residual_bytes)
}

// optional int64 output_bytes = 26;
void GraphNodeProto::clear_output_bytes() {
  output_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GraphNodeProto::output_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.output_bytes)
  return output_bytes_;
}
void GraphNodeProto::set_output_bytes(::google::protobuf::int64 value) {
  
  output_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.output_bytes)
}

// optional int64 parameters = 4;
void GraphNodeProto::clear_parameters() {
  parameters_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GraphNodeProto::parameters() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.parameters)
  return parameters_;
}
void GraphNodeProto::set_parameters(::google::protobuf::int64 value) {
  
  parameters_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.parameters)
}

// optional int64 float_ops = 13;
void GraphNodeProto::clear_float_ops() {
  float_ops_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GraphNodeProto::float_ops() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.float_ops)
  return float_ops_;
}
void GraphNodeProto::set_float_ops(::google::protobuf::int64 value) {
  
  float_ops_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.float_ops)
}

// repeated string devices = 10;
int GraphNodeProto::devices_size() const {
  return devices_.size();
}
void GraphNodeProto::clear_devices() {
  devices_.Clear();
}
const ::std::string& GraphNodeProto::devices(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.devices)
  return devices_.Get(index);
}
::std::string* GraphNodeProto::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.GraphNodeProto.devices)
  return devices_.Mutable(index);
}
void GraphNodeProto::set_devices(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.devices)
  devices_.Mutable(index)->assign(value);
}
void GraphNodeProto::set_devices(int index, const char* value) {
  devices_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.GraphNodeProto.devices)
}
void GraphNodeProto::set_devices(int index, const char* value, size_t size) {
  devices_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.GraphNodeProto.devices)
}
::std::string* GraphNodeProto::add_devices() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.GraphNodeProto.devices)
  return devices_.Add();
}
void GraphNodeProto::add_devices(const ::std::string& value) {
  devices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.GraphNodeProto.devices)
}
void GraphNodeProto::add_devices(const char* value) {
  devices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.GraphNodeProto.devices)
}
void GraphNodeProto::add_devices(const char* value, size_t size) {
  devices_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.GraphNodeProto.devices)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
GraphNodeProto::devices() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.GraphNodeProto.devices)
  return devices_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
GraphNodeProto::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.GraphNodeProto.devices)
  return &devices_;
}

// optional int64 total_definition_count = 23;
void GraphNodeProto::clear_total_definition_count() {
  total_definition_count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GraphNodeProto::total_definition_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.total_definition_count)
  return total_definition_count_;
}
void GraphNodeProto::set_total_definition_count(::google::protobuf::int64 value) {
  
  total_definition_count_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.total_definition_count)
}

// optional int64 total_run_count = 22;
void GraphNodeProto::clear_total_run_count() {
  total_run_count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GraphNodeProto::total_run_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.total_run_count)
  return total_run_count_;
}
void GraphNodeProto::set_total_run_count(::google::protobuf::int64 value) {
  
  total_run_count_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.total_run_count)
}

// optional int64 total_exec_micros = 6;
void GraphNodeProto::clear_total_exec_micros() {
  total_exec_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GraphNodeProto::total_exec_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.total_exec_micros)
  return total_exec_micros_;
}
void GraphNodeProto::set_total_exec_micros(::google::protobuf::int64 value) {
  
  total_exec_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.total_exec_micros)
}

// optional int64 total_accelerator_exec_micros = 19;
void GraphNodeProto::clear_total_accelerator_exec_micros() {
  total_accelerator_exec_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GraphNodeProto::total_accelerator_exec_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.total_accelerator_exec_micros)
  return total_accelerator_exec_micros_;
}
void GraphNodeProto::set_total_accelerator_exec_micros(::google::protobuf::int64 value) {
  
  total_accelerator_exec_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.total_accelerator_exec_micros)
}

// optional int64 total_cpu_exec_micros = 20;
void GraphNodeProto::clear_total_cpu_exec_micros() {
  total_cpu_exec_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GraphNodeProto::total_cpu_exec_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.total_cpu_exec_micros)
  return total_cpu_exec_micros_;
}
void GraphNodeProto::set_total_cpu_exec_micros(::google::protobuf::int64 value) {
  
  total_cpu_exec_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.total_cpu_exec_micros)
}

// optional int64 total_requested_bytes = 7;
void GraphNodeProto::clear_total_requested_bytes() {
  total_requested_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GraphNodeProto::total_requested_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.total_requested_bytes)
  return total_requested_bytes_;
}
void GraphNodeProto::set_total_requested_bytes(::google::protobuf::int64 value) {
  
  total_requested_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.total_requested_bytes)
}

// optional int64 total_peak_bytes = 27;
void GraphNodeProto::clear_total_peak_bytes() {
  total_peak_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GraphNodeProto::total_peak_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.total_peak_bytes)
  return total_peak_bytes_;
}
void GraphNodeProto::set_total_peak_bytes(::google::protobuf::int64 value) {
  
  total_peak_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.total_peak_bytes)
}

// optional int64 total_residual_bytes = 28;
void GraphNodeProto::clear_total_residual_bytes() {
  total_residual_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GraphNodeProto::total_residual_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.total_residual_bytes)
  return total_residual_bytes_;
}
void GraphNodeProto::set_total_residual_bytes(::google::protobuf::int64 value) {
  
  total_residual_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.total_residual_bytes)
}

// optional int64 total_output_bytes = 29;
void GraphNodeProto::clear_total_output_bytes() {
  total_output_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GraphNodeProto::total_output_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.total_output_bytes)
  return total_output_bytes_;
}
void GraphNodeProto::set_total_output_bytes(::google::protobuf::int64 value) {
  
  total_output_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.total_output_bytes)
}

// optional int64 total_parameters = 8;
void GraphNodeProto::clear_total_parameters() {
  total_parameters_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GraphNodeProto::total_parameters() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.total_parameters)
  return total_parameters_;
}
void GraphNodeProto::set_total_parameters(::google::protobuf::int64 value) {
  
  total_parameters_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.total_parameters)
}

// optional int64 total_float_ops = 14;
void GraphNodeProto::clear_total_float_ops() {
  total_float_ops_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GraphNodeProto::total_float_ops() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.total_float_ops)
  return total_float_ops_;
}
void GraphNodeProto::set_total_float_ops(::google::protobuf::int64 value) {
  
  total_float_ops_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.GraphNodeProto.total_float_ops)
}

// repeated .tensorflow.TensorShapeProto shapes = 11;
int GraphNodeProto::shapes_size() const {
  return shapes_.size();
}
void GraphNodeProto::clear_shapes() {
  shapes_.Clear();
}
const ::tensorflow::TensorShapeProto& GraphNodeProto::shapes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.shapes)
  return shapes_.Get(index);
}
::tensorflow::TensorShapeProto* GraphNodeProto::mutable_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.GraphNodeProto.shapes)
  return shapes_.Mutable(index);
}
::tensorflow::TensorShapeProto* GraphNodeProto::add_shapes() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.GraphNodeProto.shapes)
  return shapes_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto >*
GraphNodeProto::mutable_shapes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.GraphNodeProto.shapes)
  return &shapes_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto >&
GraphNodeProto::shapes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.GraphNodeProto.shapes)
  return shapes_;
}

// map<int32, .tensorflow.TensorShapeProto> input_shapes = 16;
int GraphNodeProto::input_shapes_size() const {
  return input_shapes_.size();
}
void GraphNodeProto::clear_input_shapes() {
  input_shapes_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TensorShapeProto >&
GraphNodeProto::input_shapes() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.GraphNodeProto.input_shapes)
  return input_shapes_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TensorShapeProto >*
GraphNodeProto::mutable_input_shapes() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.GraphNodeProto.input_shapes)
  return input_shapes_.MutableMap();
}

// repeated .tensorflow.tfprof.GraphNodeProto children = 12;
int GraphNodeProto::children_size() const {
  return children_.size();
}
void GraphNodeProto::clear_children() {
  children_.Clear();
}
const ::tensorflow::tfprof::GraphNodeProto& GraphNodeProto::children(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.GraphNodeProto.children)
  return children_.Get(index);
}
::tensorflow::tfprof::GraphNodeProto* GraphNodeProto::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.GraphNodeProto.children)
  return children_.Mutable(index);
}
::tensorflow::tfprof::GraphNodeProto* GraphNodeProto::add_children() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.GraphNodeProto.children)
  return children_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::GraphNodeProto >*
GraphNodeProto::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.GraphNodeProto.children)
  return &children_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::GraphNodeProto >&
GraphNodeProto::children() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.GraphNodeProto.children)
  return children_;
}

inline const GraphNodeProto* GraphNodeProto::internal_default_instance() {
  return &GraphNodeProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiGraphNodeProto::kNameFieldNumber;
const int MultiGraphNodeProto::kExecMicrosFieldNumber;
const int MultiGraphNodeProto::kAcceleratorExecMicrosFieldNumber;
const int MultiGraphNodeProto::kCpuExecMicrosFieldNumber;
const int MultiGraphNodeProto::kRequestedBytesFieldNumber;
const int MultiGraphNodeProto::kPeakBytesFieldNumber;
const int MultiGraphNodeProto::kResidualBytesFieldNumber;
const int MultiGraphNodeProto::kOutputBytesFieldNumber;
const int MultiGraphNodeProto::kParametersFieldNumber;
const int MultiGraphNodeProto::kFloatOpsFieldNumber;
const int MultiGraphNodeProto::kTotalExecMicrosFieldNumber;
const int MultiGraphNodeProto::kTotalAcceleratorExecMicrosFieldNumber;
const int MultiGraphNodeProto::kTotalCpuExecMicrosFieldNumber;
const int MultiGraphNodeProto::kTotalRequestedBytesFieldNumber;
const int MultiGraphNodeProto::kTotalPeakBytesFieldNumber;
const int MultiGraphNodeProto::kTotalResidualBytesFieldNumber;
const int MultiGraphNodeProto::kTotalOutputBytesFieldNumber;
const int MultiGraphNodeProto::kTotalParametersFieldNumber;
const int MultiGraphNodeProto::kTotalFloatOpsFieldNumber;
const int MultiGraphNodeProto::kGraphNodesFieldNumber;
const int MultiGraphNodeProto::kChildrenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiGraphNodeProto::MultiGraphNodeProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.MultiGraphNodeProto)
}

void MultiGraphNodeProto::InitAsDefaultInstance() {
}

MultiGraphNodeProto::MultiGraphNodeProto(const MultiGraphNodeProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.MultiGraphNodeProto)
}

void MultiGraphNodeProto::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&exec_micros_, 0, reinterpret_cast<char*>(&total_float_ops_) -
    reinterpret_cast<char*>(&exec_micros_) + sizeof(total_float_ops_));
  _cached_size_ = 0;
}

MultiGraphNodeProto::~MultiGraphNodeProto() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.MultiGraphNodeProto)
  SharedDtor();
}

void MultiGraphNodeProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MultiGraphNodeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiGraphNodeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiGraphNodeProto_descriptor_;
}

const MultiGraphNodeProto& MultiGraphNodeProto::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MultiGraphNodeProto> MultiGraphNodeProto_default_instance_;

MultiGraphNodeProto* MultiGraphNodeProto::New(::google::protobuf::Arena* arena) const {
  MultiGraphNodeProto* n = new MultiGraphNodeProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiGraphNodeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.MultiGraphNodeProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MultiGraphNodeProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MultiGraphNodeProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(exec_micros_, output_bytes_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(parameters_, total_residual_bytes_);
  ZR_(total_output_bytes_, total_float_ops_);

#undef ZR_HELPER_
#undef ZR_

  graph_nodes_.Clear();
  children_.Clear();
}

bool MultiGraphNodeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.MultiGraphNodeProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.MultiGraphNodeProto.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exec_micros;
        break;
      }

      // optional int64 exec_micros = 2;
      case 2: {
        if (tag == 16) {
         parse_exec_micros:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exec_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_requested_bytes;
        break;
      }

      // optional int64 requested_bytes = 3;
      case 3: {
        if (tag == 24) {
         parse_requested_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &requested_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_parameters;
        break;
      }

      // optional int64 parameters = 4;
      case 4: {
        if (tag == 32) {
         parse_parameters:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parameters_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_float_ops;
        break;
      }

      // optional int64 float_ops = 5;
      case 5: {
        if (tag == 40) {
         parse_float_ops:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &float_ops_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_total_exec_micros;
        break;
      }

      // optional int64 total_exec_micros = 6;
      case 6: {
        if (tag == 48) {
         parse_total_exec_micros:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_exec_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_total_requested_bytes;
        break;
      }

      // optional int64 total_requested_bytes = 7;
      case 7: {
        if (tag == 56) {
         parse_total_requested_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_requested_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_total_parameters;
        break;
      }

      // optional int64 total_parameters = 8;
      case 8: {
        if (tag == 64) {
         parse_total_parameters:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_parameters_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_total_float_ops;
        break;
      }

      // optional int64 total_float_ops = 9;
      case 9: {
        if (tag == 72) {
         parse_total_float_ops:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_float_ops_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_graph_nodes;
        break;
      }

      // repeated .tensorflow.tfprof.GraphNodeProto graph_nodes = 10;
      case 10: {
        if (tag == 82) {
         parse_graph_nodes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_graph_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_graph_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_graph_nodes;
        if (input->ExpectTag(90)) goto parse_loop_children;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.tfprof.MultiGraphNodeProto children = 11;
      case 11: {
        if (tag == 90) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_children;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(96)) goto parse_accelerator_exec_micros;
        break;
      }

      // optional int64 accelerator_exec_micros = 12;
      case 12: {
        if (tag == 96) {
         parse_accelerator_exec_micros:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accelerator_exec_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_cpu_exec_micros;
        break;
      }

      // optional int64 cpu_exec_micros = 13;
      case 13: {
        if (tag == 104) {
         parse_cpu_exec_micros:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cpu_exec_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_total_accelerator_exec_micros;
        break;
      }

      // optional int64 total_accelerator_exec_micros = 14;
      case 14: {
        if (tag == 112) {
         parse_total_accelerator_exec_micros:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_accelerator_exec_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_total_cpu_exec_micros;
        break;
      }

      // optional int64 total_cpu_exec_micros = 15;
      case 15: {
        if (tag == 120) {
         parse_total_cpu_exec_micros:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_cpu_exec_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_peak_bytes;
        break;
      }

      // optional int64 peak_bytes = 16;
      case 16: {
        if (tag == 128) {
         parse_peak_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &peak_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_residual_bytes;
        break;
      }

      // optional int64 residual_bytes = 17;
      case 17: {
        if (tag == 136) {
         parse_residual_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &residual_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_output_bytes;
        break;
      }

      // optional int64 output_bytes = 18;
      case 18: {
        if (tag == 144) {
         parse_output_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &output_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_total_peak_bytes;
        break;
      }

      // optional int64 total_peak_bytes = 19;
      case 19: {
        if (tag == 152) {
         parse_total_peak_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_peak_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_total_residual_bytes;
        break;
      }

      // optional int64 total_residual_bytes = 20;
      case 20: {
        if (tag == 160) {
         parse_total_residual_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_residual_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_total_output_bytes;
        break;
      }

      // optional int64 total_output_bytes = 21;
      case 21: {
        if (tag == 168) {
         parse_total_output_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_output_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.MultiGraphNodeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.MultiGraphNodeProto)
  return false;
#undef DO_
}

void MultiGraphNodeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.MultiGraphNodeProto)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.MultiGraphNodeProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int64 exec_micros = 2;
  if (this->exec_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->exec_micros(), output);
  }

  // optional int64 requested_bytes = 3;
  if (this->requested_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->requested_bytes(), output);
  }

  // optional int64 parameters = 4;
  if (this->parameters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->parameters(), output);
  }

  // optional int64 float_ops = 5;
  if (this->float_ops() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->float_ops(), output);
  }

  // optional int64 total_exec_micros = 6;
  if (this->total_exec_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->total_exec_micros(), output);
  }

  // optional int64 total_requested_bytes = 7;
  if (this->total_requested_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->total_requested_bytes(), output);
  }

  // optional int64 total_parameters = 8;
  if (this->total_parameters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->total_parameters(), output);
  }

  // optional int64 total_float_ops = 9;
  if (this->total_float_ops() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->total_float_ops(), output);
  }

  // repeated .tensorflow.tfprof.GraphNodeProto graph_nodes = 10;
  for (unsigned int i = 0, n = this->graph_nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->graph_nodes(i), output);
  }

  // repeated .tensorflow.tfprof.MultiGraphNodeProto children = 11;
  for (unsigned int i = 0, n = this->children_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->children(i), output);
  }

  // optional int64 accelerator_exec_micros = 12;
  if (this->accelerator_exec_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->accelerator_exec_micros(), output);
  }

  // optional int64 cpu_exec_micros = 13;
  if (this->cpu_exec_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->cpu_exec_micros(), output);
  }

  // optional int64 total_accelerator_exec_micros = 14;
  if (this->total_accelerator_exec_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->total_accelerator_exec_micros(), output);
  }

  // optional int64 total_cpu_exec_micros = 15;
  if (this->total_cpu_exec_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->total_cpu_exec_micros(), output);
  }

  // optional int64 peak_bytes = 16;
  if (this->peak_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->peak_bytes(), output);
  }

  // optional int64 residual_bytes = 17;
  if (this->residual_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->residual_bytes(), output);
  }

  // optional int64 output_bytes = 18;
  if (this->output_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->output_bytes(), output);
  }

  // optional int64 total_peak_bytes = 19;
  if (this->total_peak_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->total_peak_bytes(), output);
  }

  // optional int64 total_residual_bytes = 20;
  if (this->total_residual_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->total_residual_bytes(), output);
  }

  // optional int64 total_output_bytes = 21;
  if (this->total_output_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->total_output_bytes(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.MultiGraphNodeProto)
}

::google::protobuf::uint8* MultiGraphNodeProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.MultiGraphNodeProto)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.MultiGraphNodeProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int64 exec_micros = 2;
  if (this->exec_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->exec_micros(), target);
  }

  // optional int64 requested_bytes = 3;
  if (this->requested_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->requested_bytes(), target);
  }

  // optional int64 parameters = 4;
  if (this->parameters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->parameters(), target);
  }

  // optional int64 float_ops = 5;
  if (this->float_ops() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->float_ops(), target);
  }

  // optional int64 total_exec_micros = 6;
  if (this->total_exec_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->total_exec_micros(), target);
  }

  // optional int64 total_requested_bytes = 7;
  if (this->total_requested_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->total_requested_bytes(), target);
  }

  // optional int64 total_parameters = 8;
  if (this->total_parameters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->total_parameters(), target);
  }

  // optional int64 total_float_ops = 9;
  if (this->total_float_ops() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->total_float_ops(), target);
  }

  // repeated .tensorflow.tfprof.GraphNodeProto graph_nodes = 10;
  for (unsigned int i = 0, n = this->graph_nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->graph_nodes(i), false, target);
  }

  // repeated .tensorflow.tfprof.MultiGraphNodeProto children = 11;
  for (unsigned int i = 0, n = this->children_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->children(i), false, target);
  }

  // optional int64 accelerator_exec_micros = 12;
  if (this->accelerator_exec_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->accelerator_exec_micros(), target);
  }

  // optional int64 cpu_exec_micros = 13;
  if (this->cpu_exec_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->cpu_exec_micros(), target);
  }

  // optional int64 total_accelerator_exec_micros = 14;
  if (this->total_accelerator_exec_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->total_accelerator_exec_micros(), target);
  }

  // optional int64 total_cpu_exec_micros = 15;
  if (this->total_cpu_exec_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->total_cpu_exec_micros(), target);
  }

  // optional int64 peak_bytes = 16;
  if (this->peak_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->peak_bytes(), target);
  }

  // optional int64 residual_bytes = 17;
  if (this->residual_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->residual_bytes(), target);
  }

  // optional int64 output_bytes = 18;
  if (this->output_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->output_bytes(), target);
  }

  // optional int64 total_peak_bytes = 19;
  if (this->total_peak_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->total_peak_bytes(), target);
  }

  // optional int64 total_residual_bytes = 20;
  if (this->total_residual_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->total_residual_bytes(), target);
  }

  // optional int64 total_output_bytes = 21;
  if (this->total_output_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->total_output_bytes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.MultiGraphNodeProto)
  return target;
}

size_t MultiGraphNodeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.MultiGraphNodeProto)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int64 exec_micros = 2;
  if (this->exec_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->exec_micros());
  }

  // optional int64 accelerator_exec_micros = 12;
  if (this->accelerator_exec_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->accelerator_exec_micros());
  }

  // optional int64 cpu_exec_micros = 13;
  if (this->cpu_exec_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cpu_exec_micros());
  }

  // optional int64 requested_bytes = 3;
  if (this->requested_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->requested_bytes());
  }

  // optional int64 peak_bytes = 16;
  if (this->peak_bytes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->peak_bytes());
  }

  // optional int64 residual_bytes = 17;
  if (this->residual_bytes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->residual_bytes());
  }

  // optional int64 output_bytes = 18;
  if (this->output_bytes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->output_bytes());
  }

  // optional int64 parameters = 4;
  if (this->parameters() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->parameters());
  }

  // optional int64 float_ops = 5;
  if (this->float_ops() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->float_ops());
  }

  // optional int64 total_exec_micros = 6;
  if (this->total_exec_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_exec_micros());
  }

  // optional int64 total_accelerator_exec_micros = 14;
  if (this->total_accelerator_exec_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_accelerator_exec_micros());
  }

  // optional int64 total_cpu_exec_micros = 15;
  if (this->total_cpu_exec_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_cpu_exec_micros());
  }

  // optional int64 total_requested_bytes = 7;
  if (this->total_requested_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_requested_bytes());
  }

  // optional int64 total_peak_bytes = 19;
  if (this->total_peak_bytes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_peak_bytes());
  }

  // optional int64 total_residual_bytes = 20;
  if (this->total_residual_bytes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_residual_bytes());
  }

  // optional int64 total_output_bytes = 21;
  if (this->total_output_bytes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_output_bytes());
  }

  // optional int64 total_parameters = 8;
  if (this->total_parameters() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_parameters());
  }

  // optional int64 total_float_ops = 9;
  if (this->total_float_ops() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_float_ops());
  }

  // repeated .tensorflow.tfprof.GraphNodeProto graph_nodes = 10;
  {
    unsigned int count = this->graph_nodes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->graph_nodes(i));
    }
  }

  // repeated .tensorflow.tfprof.MultiGraphNodeProto children = 11;
  {
    unsigned int count = this->children_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->children(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiGraphNodeProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.MultiGraphNodeProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MultiGraphNodeProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiGraphNodeProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.MultiGraphNodeProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.MultiGraphNodeProto)
    UnsafeMergeFrom(*source);
  }
}

void MultiGraphNodeProto::MergeFrom(const MultiGraphNodeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.MultiGraphNodeProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MultiGraphNodeProto::UnsafeMergeFrom(const MultiGraphNodeProto& from) {
  GOOGLE_DCHECK(&from != this);
  graph_nodes_.MergeFrom(from.graph_nodes_);
  children_.MergeFrom(from.children_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.exec_micros() != 0) {
    set_exec_micros(from.exec_micros());
  }
  if (from.accelerator_exec_micros() != 0) {
    set_accelerator_exec_micros(from.accelerator_exec_micros());
  }
  if (from.cpu_exec_micros() != 0) {
    set_cpu_exec_micros(from.cpu_exec_micros());
  }
  if (from.requested_bytes() != 0) {
    set_requested_bytes(from.requested_bytes());
  }
  if (from.peak_bytes() != 0) {
    set_peak_bytes(from.peak_bytes());
  }
  if (from.residual_bytes() != 0) {
    set_residual_bytes(from.residual_bytes());
  }
  if (from.output_bytes() != 0) {
    set_output_bytes(from.output_bytes());
  }
  if (from.parameters() != 0) {
    set_parameters(from.parameters());
  }
  if (from.float_ops() != 0) {
    set_float_ops(from.float_ops());
  }
  if (from.total_exec_micros() != 0) {
    set_total_exec_micros(from.total_exec_micros());
  }
  if (from.total_accelerator_exec_micros() != 0) {
    set_total_accelerator_exec_micros(from.total_accelerator_exec_micros());
  }
  if (from.total_cpu_exec_micros() != 0) {
    set_total_cpu_exec_micros(from.total_cpu_exec_micros());
  }
  if (from.total_requested_bytes() != 0) {
    set_total_requested_bytes(from.total_requested_bytes());
  }
  if (from.total_peak_bytes() != 0) {
    set_total_peak_bytes(from.total_peak_bytes());
  }
  if (from.total_residual_bytes() != 0) {
    set_total_residual_bytes(from.total_residual_bytes());
  }
  if (from.total_output_bytes() != 0) {
    set_total_output_bytes(from.total_output_bytes());
  }
  if (from.total_parameters() != 0) {
    set_total_parameters(from.total_parameters());
  }
  if (from.total_float_ops() != 0) {
    set_total_float_ops(from.total_float_ops());
  }
}

void MultiGraphNodeProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.MultiGraphNodeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiGraphNodeProto::CopyFrom(const MultiGraphNodeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.MultiGraphNodeProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MultiGraphNodeProto::IsInitialized() const {

  return true;
}

void MultiGraphNodeProto::Swap(MultiGraphNodeProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiGraphNodeProto::InternalSwap(MultiGraphNodeProto* other) {
  name_.Swap(&other->name_);
  std::swap(exec_micros_, other->exec_micros_);
  std::swap(accelerator_exec_micros_, other->accelerator_exec_micros_);
  std::swap(cpu_exec_micros_, other->cpu_exec_micros_);
  std::swap(requested_bytes_, other->requested_bytes_);
  std::swap(peak_bytes_, other->peak_bytes_);
  std::swap(residual_bytes_, other->residual_bytes_);
  std::swap(output_bytes_, other->output_bytes_);
  std::swap(parameters_, other->parameters_);
  std::swap(float_ops_, other->float_ops_);
  std::swap(total_exec_micros_, other->total_exec_micros_);
  std::swap(total_accelerator_exec_micros_, other->total_accelerator_exec_micros_);
  std::swap(total_cpu_exec_micros_, other->total_cpu_exec_micros_);
  std::swap(total_requested_bytes_, other->total_requested_bytes_);
  std::swap(total_peak_bytes_, other->total_peak_bytes_);
  std::swap(total_residual_bytes_, other->total_residual_bytes_);
  std::swap(total_output_bytes_, other->total_output_bytes_);
  std::swap(total_parameters_, other->total_parameters_);
  std::swap(total_float_ops_, other->total_float_ops_);
  graph_nodes_.UnsafeArenaSwap(&other->graph_nodes_);
  children_.UnsafeArenaSwap(&other->children_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiGraphNodeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiGraphNodeProto_descriptor_;
  metadata.reflection = MultiGraphNodeProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiGraphNodeProto

// optional string name = 1;
void MultiGraphNodeProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MultiGraphNodeProto::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.MultiGraphNodeProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MultiGraphNodeProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.MultiGraphNodeProto.name)
}
void MultiGraphNodeProto::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.MultiGraphNodeProto.name)
}
void MultiGraphNodeProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.MultiGraphNodeProto.name)
}
::std::string* MultiGraphNodeProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.MultiGraphNodeProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MultiGraphNodeProto::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.MultiGraphNodeProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MultiGraphNodeProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.MultiGraphNodeProto.name)
}

// optional int64 exec_micros = 2;
void MultiGraphNodeProto::clear_exec_micros() {
  exec_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MultiGraphNodeProto::exec_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.MultiGraphNodeProto.exec_micros)
  return exec_micros_;
}
void MultiGraphNodeProto::set_exec_micros(::google::protobuf::int64 value) {
  
  exec_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.MultiGraphNodeProto.exec_micros)
}

// optional int64 accelerator_exec_micros = 12;
void MultiGraphNodeProto::clear_accelerator_exec_micros() {
  accelerator_exec_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MultiGraphNodeProto::accelerator_exec_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.MultiGraphNodeProto.accelerator_exec_micros)
  return accelerator_exec_micros_;
}
void MultiGraphNodeProto::set_accelerator_exec_micros(::google::protobuf::int64 value) {
  
  accelerator_exec_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.MultiGraphNodeProto.accelerator_exec_micros)
}

// optional int64 cpu_exec_micros = 13;
void MultiGraphNodeProto::clear_cpu_exec_micros() {
  cpu_exec_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MultiGraphNodeProto::cpu_exec_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.MultiGraphNodeProto.cpu_exec_micros)
  return cpu_exec_micros_;
}
void MultiGraphNodeProto::set_cpu_exec_micros(::google::protobuf::int64 value) {
  
  cpu_exec_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.MultiGraphNodeProto.cpu_exec_micros)
}

// optional int64 requested_bytes = 3;
void MultiGraphNodeProto::clear_requested_bytes() {
  requested_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MultiGraphNodeProto::requested_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.MultiGraphNodeProto.requested_bytes)
  return requested_bytes_;
}
void MultiGraphNodeProto::set_requested_bytes(::google::protobuf::int64 value) {
  
  requested_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.MultiGraphNodeProto.requested_bytes)
}

// optional int64 peak_bytes = 16;
void MultiGraphNodeProto::clear_peak_bytes() {
  peak_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MultiGraphNodeProto::peak_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.MultiGraphNodeProto.peak_bytes)
  return peak_bytes_;
}
void MultiGraphNodeProto::set_peak_bytes(::google::protobuf::int64 value) {
  
  peak_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.MultiGraphNodeProto.peak_bytes)
}

// optional int64 residual_bytes = 17;
void MultiGraphNodeProto::clear_residual_bytes() {
  residual_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MultiGraphNodeProto::residual_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.MultiGraphNodeProto.residual_bytes)
  return residual_bytes_;
}
void MultiGraphNodeProto::set_residual_bytes(::google::protobuf::int64 value) {
  
  residual_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.MultiGraphNodeProto.residual_bytes)
}

// optional int64 output_bytes = 18;
void MultiGraphNodeProto::clear_output_bytes() {
  output_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MultiGraphNodeProto::output_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.MultiGraphNodeProto.output_bytes)
  return output_bytes_;
}
void MultiGraphNodeProto::set_output_bytes(::google::protobuf::int64 value) {
  
  output_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.MultiGraphNodeProto.output_bytes)
}

// optional int64 parameters = 4;
void MultiGraphNodeProto::clear_parameters() {
  parameters_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MultiGraphNodeProto::parameters() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.MultiGraphNodeProto.parameters)
  return parameters_;
}
void MultiGraphNodeProto::set_parameters(::google::protobuf::int64 value) {
  
  parameters_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.MultiGraphNodeProto.parameters)
}

// optional int64 float_ops = 5;
void MultiGraphNodeProto::clear_float_ops() {
  float_ops_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MultiGraphNodeProto::float_ops() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.MultiGraphNodeProto.float_ops)
  return float_ops_;
}
void MultiGraphNodeProto::set_float_ops(::google::protobuf::int64 value) {
  
  float_ops_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.MultiGraphNodeProto.float_ops)
}

// optional int64 total_exec_micros = 6;
void MultiGraphNodeProto::clear_total_exec_micros() {
  total_exec_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MultiGraphNodeProto::total_exec_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.MultiGraphNodeProto.total_exec_micros)
  return total_exec_micros_;
}
void MultiGraphNodeProto::set_total_exec_micros(::google::protobuf::int64 value) {
  
  total_exec_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.MultiGraphNodeProto.total_exec_micros)
}

// optional int64 total_accelerator_exec_micros = 14;
void MultiGraphNodeProto::clear_total_accelerator_exec_micros() {
  total_accelerator_exec_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MultiGraphNodeProto::total_accelerator_exec_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.MultiGraphNodeProto.total_accelerator_exec_micros)
  return total_accelerator_exec_micros_;
}
void MultiGraphNodeProto::set_total_accelerator_exec_micros(::google::protobuf::int64 value) {
  
  total_accelerator_exec_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.MultiGraphNodeProto.total_accelerator_exec_micros)
}

// optional int64 total_cpu_exec_micros = 15;
void MultiGraphNodeProto::clear_total_cpu_exec_micros() {
  total_cpu_exec_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MultiGraphNodeProto::total_cpu_exec_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.MultiGraphNodeProto.total_cpu_exec_micros)
  return total_cpu_exec_micros_;
}
void MultiGraphNodeProto::set_total_cpu_exec_micros(::google::protobuf::int64 value) {
  
  total_cpu_exec_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.MultiGraphNodeProto.total_cpu_exec_micros)
}

// optional int64 total_requested_bytes = 7;
void MultiGraphNodeProto::clear_total_requested_bytes() {
  total_requested_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MultiGraphNodeProto::total_requested_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.MultiGraphNodeProto.total_requested_bytes)
  return total_requested_bytes_;
}
void MultiGraphNodeProto::set_total_requested_bytes(::google::protobuf::int64 value) {
  
  total_requested_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.MultiGraphNodeProto.total_requested_bytes)
}

// optional int64 total_peak_bytes = 19;
void MultiGraphNodeProto::clear_total_peak_bytes() {
  total_peak_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MultiGraphNodeProto::total_peak_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.MultiGraphNodeProto.total_peak_bytes)
  return total_peak_bytes_;
}
void MultiGraphNodeProto::set_total_peak_bytes(::google::protobuf::int64 value) {
  
  total_peak_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.MultiGraphNodeProto.total_peak_bytes)
}

// optional int64 total_residual_bytes = 20;
void MultiGraphNodeProto::clear_total_residual_bytes() {
  total_residual_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MultiGraphNodeProto::total_residual_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.MultiGraphNodeProto.total_residual_bytes)
  return total_residual_bytes_;
}
void MultiGraphNodeProto::set_total_residual_bytes(::google::protobuf::int64 value) {
  
  total_residual_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.MultiGraphNodeProto.total_residual_bytes)
}

// optional int64 total_output_bytes = 21;
void MultiGraphNodeProto::clear_total_output_bytes() {
  total_output_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MultiGraphNodeProto::total_output_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.MultiGraphNodeProto.total_output_bytes)
  return total_output_bytes_;
}
void MultiGraphNodeProto::set_total_output_bytes(::google::protobuf::int64 value) {
  
  total_output_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.MultiGraphNodeProto.total_output_bytes)
}

// optional int64 total_parameters = 8;
void MultiGraphNodeProto::clear_total_parameters() {
  total_parameters_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MultiGraphNodeProto::total_parameters() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.MultiGraphNodeProto.total_parameters)
  return total_parameters_;
}
void MultiGraphNodeProto::set_total_parameters(::google::protobuf::int64 value) {
  
  total_parameters_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.MultiGraphNodeProto.total_parameters)
}

// optional int64 total_float_ops = 9;
void MultiGraphNodeProto::clear_total_float_ops() {
  total_float_ops_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MultiGraphNodeProto::total_float_ops() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.MultiGraphNodeProto.total_float_ops)
  return total_float_ops_;
}
void MultiGraphNodeProto::set_total_float_ops(::google::protobuf::int64 value) {
  
  total_float_ops_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.MultiGraphNodeProto.total_float_ops)
}

// repeated .tensorflow.tfprof.GraphNodeProto graph_nodes = 10;
int MultiGraphNodeProto::graph_nodes_size() const {
  return graph_nodes_.size();
}
void MultiGraphNodeProto::clear_graph_nodes() {
  graph_nodes_.Clear();
}
const ::tensorflow::tfprof::GraphNodeProto& MultiGraphNodeProto::graph_nodes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.MultiGraphNodeProto.graph_nodes)
  return graph_nodes_.Get(index);
}
::tensorflow::tfprof::GraphNodeProto* MultiGraphNodeProto::mutable_graph_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.MultiGraphNodeProto.graph_nodes)
  return graph_nodes_.Mutable(index);
}
::tensorflow::tfprof::GraphNodeProto* MultiGraphNodeProto::add_graph_nodes() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.MultiGraphNodeProto.graph_nodes)
  return graph_nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::GraphNodeProto >*
MultiGraphNodeProto::mutable_graph_nodes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.MultiGraphNodeProto.graph_nodes)
  return &graph_nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::GraphNodeProto >&
MultiGraphNodeProto::graph_nodes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.MultiGraphNodeProto.graph_nodes)
  return graph_nodes_;
}

// repeated .tensorflow.tfprof.MultiGraphNodeProto children = 11;
int MultiGraphNodeProto::children_size() const {
  return children_.size();
}
void MultiGraphNodeProto::clear_children() {
  children_.Clear();
}
const ::tensorflow::tfprof::MultiGraphNodeProto& MultiGraphNodeProto::children(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.MultiGraphNodeProto.children)
  return children_.Get(index);
}
::tensorflow::tfprof::MultiGraphNodeProto* MultiGraphNodeProto::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.MultiGraphNodeProto.children)
  return children_.Mutable(index);
}
::tensorflow::tfprof::MultiGraphNodeProto* MultiGraphNodeProto::add_children() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.MultiGraphNodeProto.children)
  return children_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::MultiGraphNodeProto >*
MultiGraphNodeProto::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.MultiGraphNodeProto.children)
  return &children_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::MultiGraphNodeProto >&
MultiGraphNodeProto::children() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.MultiGraphNodeProto.children)
  return children_;
}

inline const MultiGraphNodeProto* MultiGraphNodeProto::internal_default_instance() {
  return &MultiGraphNodeProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdviceProto_Checker::kReportsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdviceProto_Checker::AdviceProto_Checker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.AdviceProto.Checker)
}

void AdviceProto_Checker::InitAsDefaultInstance() {
}

AdviceProto_Checker::AdviceProto_Checker(const AdviceProto_Checker& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.AdviceProto.Checker)
}

void AdviceProto_Checker::SharedCtor() {
  _cached_size_ = 0;
}

AdviceProto_Checker::~AdviceProto_Checker() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.AdviceProto.Checker)
  SharedDtor();
}

void AdviceProto_Checker::SharedDtor() {
}

void AdviceProto_Checker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdviceProto_Checker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdviceProto_Checker_descriptor_;
}

const AdviceProto_Checker& AdviceProto_Checker::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AdviceProto_Checker> AdviceProto_Checker_default_instance_;

AdviceProto_Checker* AdviceProto_Checker::New(::google::protobuf::Arena* arena) const {
  AdviceProto_Checker* n = new AdviceProto_Checker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdviceProto_Checker::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.AdviceProto.Checker)
  reports_.Clear();
}

bool AdviceProto_Checker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.AdviceProto.Checker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string reports = 2;
      case 2: {
        if (tag == 18) {
         parse_reports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_reports()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reports(this->reports_size() - 1).data(),
            this->reports(this->reports_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.AdviceProto.Checker.reports"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reports;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.AdviceProto.Checker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.AdviceProto.Checker)
  return false;
#undef DO_
}

void AdviceProto_Checker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.AdviceProto.Checker)
  // repeated string reports = 2;
  for (int i = 0; i < this->reports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reports(i).data(), this->reports(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.AdviceProto.Checker.reports");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->reports(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.AdviceProto.Checker)
}

::google::protobuf::uint8* AdviceProto_Checker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.AdviceProto.Checker)
  // repeated string reports = 2;
  for (int i = 0; i < this->reports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reports(i).data(), this->reports(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.AdviceProto.Checker.reports");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->reports(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.AdviceProto.Checker)
  return target;
}

size_t AdviceProto_Checker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.AdviceProto.Checker)
  size_t total_size = 0;

  // repeated string reports = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->reports_size());
  for (int i = 0; i < this->reports_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->reports(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdviceProto_Checker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.AdviceProto.Checker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdviceProto_Checker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdviceProto_Checker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.AdviceProto.Checker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.AdviceProto.Checker)
    UnsafeMergeFrom(*source);
  }
}

void AdviceProto_Checker::MergeFrom(const AdviceProto_Checker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.AdviceProto.Checker)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AdviceProto_Checker::UnsafeMergeFrom(const AdviceProto_Checker& from) {
  GOOGLE_DCHECK(&from != this);
  reports_.UnsafeMergeFrom(from.reports_);
}

void AdviceProto_Checker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.AdviceProto.Checker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdviceProto_Checker::CopyFrom(const AdviceProto_Checker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.AdviceProto.Checker)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AdviceProto_Checker::IsInitialized() const {

  return true;
}

void AdviceProto_Checker::Swap(AdviceProto_Checker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdviceProto_Checker::InternalSwap(AdviceProto_Checker* other) {
  reports_.UnsafeArenaSwap(&other->reports_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdviceProto_Checker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdviceProto_Checker_descriptor_;
  metadata.reflection = AdviceProto_Checker_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdviceProto::kCheckersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdviceProto::AdviceProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.AdviceProto)
}

void AdviceProto::InitAsDefaultInstance() {
}

AdviceProto::AdviceProto(const AdviceProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.AdviceProto)
}

void AdviceProto::SharedCtor() {
  checkers_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  checkers_.SetEntryDescriptor(
      &::tensorflow::tfprof::AdviceProto_CheckersEntry_descriptor_);
  _cached_size_ = 0;
}

AdviceProto::~AdviceProto() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.AdviceProto)
  SharedDtor();
}

void AdviceProto::SharedDtor() {
}

void AdviceProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdviceProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdviceProto_descriptor_;
}

const AdviceProto& AdviceProto::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AdviceProto> AdviceProto_default_instance_;

AdviceProto* AdviceProto::New(::google::protobuf::Arena* arena) const {
  AdviceProto* n = new AdviceProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdviceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.AdviceProto)
  checkers_.Clear();
}

bool AdviceProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.AdviceProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .tensorflow.tfprof.AdviceProto.Checker> checkers = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_checkers:
          AdviceProto_CheckersEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::tensorflow::tfprof::AdviceProto_Checker,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdviceProto_Checker > > parser(&checkers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.AdviceProto.CheckersEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_checkers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.AdviceProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.AdviceProto)
  return false;
#undef DO_
}

void AdviceProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.AdviceProto)
  // map<string, .tensorflow.tfprof.AdviceProto.Checker> checkers = 1;
  if (!this->checkers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdviceProto_Checker >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.AdviceProto.CheckersEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->checkers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->checkers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdviceProto_Checker >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdviceProto_Checker >::const_iterator
          it = this->checkers().begin();
          it != this->checkers().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<AdviceProto_CheckersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(checkers_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<AdviceProto_CheckersEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdviceProto_Checker >::const_iterator
          it = this->checkers().begin();
          it != this->checkers().end(); ++it) {
        entry.reset(checkers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.AdviceProto)
}

::google::protobuf::uint8* AdviceProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.AdviceProto)
  // map<string, .tensorflow.tfprof.AdviceProto.Checker> checkers = 1;
  if (!this->checkers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdviceProto_Checker >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.AdviceProto.CheckersEntry.key");
      }
    };

    if (deterministic &&
        this->checkers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->checkers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdviceProto_Checker >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdviceProto_Checker >::const_iterator
          it = this->checkers().begin();
          it != this->checkers().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<AdviceProto_CheckersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(checkers_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<AdviceProto_CheckersEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdviceProto_Checker >::const_iterator
          it = this->checkers().begin();
          it != this->checkers().end(); ++it) {
        entry.reset(checkers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.AdviceProto)
  return target;
}

size_t AdviceProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.AdviceProto)
  size_t total_size = 0;

  // map<string, .tensorflow.tfprof.AdviceProto.Checker> checkers = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->checkers_size());
  {
    ::google::protobuf::scoped_ptr<AdviceProto_CheckersEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdviceProto_Checker >::const_iterator
        it = this->checkers().begin();
        it != this->checkers().end(); ++it) {
      entry.reset(checkers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdviceProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.AdviceProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdviceProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdviceProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.AdviceProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.AdviceProto)
    UnsafeMergeFrom(*source);
  }
}

void AdviceProto::MergeFrom(const AdviceProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.AdviceProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AdviceProto::UnsafeMergeFrom(const AdviceProto& from) {
  GOOGLE_DCHECK(&from != this);
  checkers_.MergeFrom(from.checkers_);
}

void AdviceProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.AdviceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdviceProto::CopyFrom(const AdviceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.AdviceProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AdviceProto::IsInitialized() const {

  return true;
}

void AdviceProto::Swap(AdviceProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdviceProto::InternalSwap(AdviceProto* other) {
  checkers_.Swap(&other->checkers_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdviceProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdviceProto_descriptor_;
  metadata.reflection = AdviceProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdviceProto_Checker

// repeated string reports = 2;
int AdviceProto_Checker::reports_size() const {
  return reports_.size();
}
void AdviceProto_Checker::clear_reports() {
  reports_.Clear();
}
const ::std::string& AdviceProto_Checker::reports(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.AdviceProto.Checker.reports)
  return reports_.Get(index);
}
::std::string* AdviceProto_Checker::mutable_reports(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.AdviceProto.Checker.reports)
  return reports_.Mutable(index);
}
void AdviceProto_Checker::set_reports(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.AdviceProto.Checker.reports)
  reports_.Mutable(index)->assign(value);
}
void AdviceProto_Checker::set_reports(int index, const char* value) {
  reports_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.AdviceProto.Checker.reports)
}
void AdviceProto_Checker::set_reports(int index, const char* value, size_t size) {
  reports_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.AdviceProto.Checker.reports)
}
::std::string* AdviceProto_Checker::add_reports() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.AdviceProto.Checker.reports)
  return reports_.Add();
}
void AdviceProto_Checker::add_reports(const ::std::string& value) {
  reports_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.AdviceProto.Checker.reports)
}
void AdviceProto_Checker::add_reports(const char* value) {
  reports_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.AdviceProto.Checker.reports)
}
void AdviceProto_Checker::add_reports(const char* value, size_t size) {
  reports_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.AdviceProto.Checker.reports)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdviceProto_Checker::reports() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.AdviceProto.Checker.reports)
  return reports_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
AdviceProto_Checker::mutable_reports() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.AdviceProto.Checker.reports)
  return &reports_;
}

inline const AdviceProto_Checker* AdviceProto_Checker::internal_default_instance() {
  return &AdviceProto_Checker_default_instance_.get();
}
// -------------------------------------------------------------------

// AdviceProto

// map<string, .tensorflow.tfprof.AdviceProto.Checker> checkers = 1;
int AdviceProto::checkers_size() const {
  return checkers_.size();
}
void AdviceProto::clear_checkers() {
  checkers_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdviceProto_Checker >&
AdviceProto::checkers() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.AdviceProto.checkers)
  return checkers_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::AdviceProto_Checker >*
AdviceProto::mutable_checkers() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.AdviceProto.checkers)
  return checkers_.MutableMap();
}

inline const AdviceProto* AdviceProto::internal_default_instance() {
  return &AdviceProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tfprof
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
